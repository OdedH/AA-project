A fast ﬁnite-state relaxation method for enforcing
global constraints on sequence decoding
Roy W. Tromble and Jason Eisner
Department of Computer Science and Center for Language and Speech Processing
Johns Hopkins University
Baltimore, MD 21218
{royt,jason}@cs.jhu.edu

Abstract
We describe ﬁnite-state constraint relaxation, a method for applying global constraints, expressed as automata, to sequence
model decoding. We present algorithms for both hard constraints and binary soft constraints. On the CoNLL-2004 semantic role labeling task, we report a speedup of at least 16x
over a previous method that used integer linear programming.

1

Introduction

Many tasks in natural language processing involve
sequence labeling. If one models long-distance or
global properties of labeled sequences, it can become intractable to ﬁnd (“decode”) the best labeling
of an unlabeled sequence.
Nonetheless, such global properties can improve
the accuracy of a model, so recent NLP papers
have considered practical techniques for decoding with them. Such techniques include Gibbs
sampling (Finkel et al., 2005), a general-purpose
Monte Carlo method, and integer linear programming (ILP), (Roth and Yih, 2005), a general-purpose
exact framework for NP-complete problems.
Under generative models such as hidden Markov
models, the probability of a labeled sequence depends only on its local properties. The situation
improves with discriminatively trained models, such
as conditional random ﬁelds (Lafferty et al., 2001),
which do efﬁciently allow features that are functions
of the entire observation sequence. However, these
features can still only look locally at the label sequence. That is a signiﬁcant shortcoming, because
in many domains, hard or soft global constraints on
the label sequence are motivated by common sense:
• For named entity recognition, a phrase that
appears multiple times should tend to get the
same label each time (Finkel et al., 2005).
• In bibliography entries (Peng and McCallum,
2004), a given ﬁeld (author, title, etc.) should

be ﬁlled by at most one substring of the input, and there are strong preferences on the cooccurrence and order of certain ﬁelds.
• In seminar announcements, a given ﬁeld
(speaker, start time, etc.) should appear with
at most one value in each announcement, although the ﬁeld and value may be repeated
(Finkel et al., 2005).
• For semantic role labeling, each argument
should be instantiated only once for a given
verb. There are several other constraints that
we will describe later (Roth and Yih, 2005).
A popular approximate technique is to hypothesize a list of possible answers by decoding without
any global constraints, and then rerank (or prune)
this n-best list using the full model with all constraints. Reranking relies on the local model being
“good enough” that the globally best answer appears
in its n-best list. Otherwise, reranking can’t ﬁnd it.
In this paper, we propose “constraint relaxation,”
a simple exact alternative to reranking. As in reranking, we start with a weighted lattice of hypotheses
proposed by the local model. But rather than restrict
to the n best of these according to the local model,
we aim to directly extract the one best according to
the global model. As in reranking, we hope that the
local constraints alone will work well, but if they do
not, the penalty is not incorrect decoding, but longer
runtime as we gradually fold the global constraints
into the lattice. Constraint relaxation can be used
whenever the global constraints can be expressed as
regular languages over the label sequence.
In the worst case, our runtime may be exponential
in the number of constraints, since we are considering an intractable class of problems. However, we
show that in practice, the method is quite effective
at rapid decoding under global hard constraints.

423
Proceedings of the Human Language Technology Conference of the North American Chapter of the ACL, pages 423–430,
New York, June 2006. c 2006 Association for Computational Linguistics

?
O

O
0

?

1

Figure 1: An automaton expressing the constraint that the label
sequence cannot be O∗ . Here ? matches any symbol except O.

The remainder of the paper is organized as follows: In §2 we describe how ﬁnite-state automata
can be used to apply global constraints. We then
give a brute-force decoding algorithm (§3). In §4,
we present a more efﬁcient algorithm for the case of
hard constraints. We report results for the semantic
role labeling task in §5. §6 treats soft constraints.

2

Finite-state constraints

Previous approaches to global sequence labeling—
Gibbs sampling, ILP, and reranking—seem motivated by the idea that standard sequence methods are
incapable of considering global constraints at all.
In fact, ﬁnite-state automata (FSAs) are powerful
enough to express many long-distance constraints.
Since all ﬁnite languages are regular, any constraint
over label sequences of bounded length is ﬁnitestate. FSAs are more powerful than n-gram models. For example, the regular expression Σ∗ XΣ∗ YΣ∗
matches only sequences of labels that contain an X
before a Y. Similarly, the regular expression ¬(O∗ )
requires at least one non-O label; it compiles into the
FSA of Figure 1.
Note that this FSA is in one or the other of its two
states according to whether it has encountered a nonO label yet. In general, the current state of an FSA
records properties of the label sequence preﬁx read
so far. The FSA needs enough states to keep track of
whether the label sequence as a whole satisﬁes the
global constraint in question.
FSAs are a ﬂexible approach to constraints because they are closed under logical operations such
as disjunction (union) and conjunction (intersection). They may be speciﬁed by regular expressions
(Karttunen et al., 1996), in a logical language (Vaillette, 2004), or directly as FSAs. They may also be
weighted to express soft constraints.
Formally, we pose the decoding problem in terms
of an observation sequence x ∈ X ∗ and possible la424

bel sequences y ∈ Y ∗ . In many NLP tasks, X is the
set of words, and Y the tags. A lattice L: Y ∗ → R
maps label sequences to weights, and is encoded as a
weighted FSA. Constraints are formally the same—
any function C: Y ∗ → R is a constraint, including weighted features from a classiﬁer or probabilistic model. In this paper we will consider only constraints that are weighted in particular ways.
Given a lattice L and constraints C, we seek
def

y∗ = argmax L(y) +
y

C(y) .

(1)

C∈C

We assume the lattice L is generated by a model
M : X ∗ → (Y ∗ → R). For a given observation sequence x, we put L = M (x). One possible model
is a ﬁnite-state transducer, where M (x) is an FSA
found by composing the transducer with x. Another
is a CRF, where M (x) is a lattice with sums of logpotentials for arc weights.1

3

A brute-force ﬁnite-state decoder

To ﬁnd the best constrained labeling in a lattice, y∗ ,
according to (1), we could simply intersect the lattice with all the constraints, then extract the best
path.
Weighted FSA intersection is a generalization of
ordinary unweighted FSA intersection (Mohri et al.,
1996). It is customary in NLP to use the so-called
tropical semiring, where weights are represented by
their natural logarithms and summed rather than
multiplied. Then the intersected automaton L ∩ C
computes
def

(L ∩ C)(y) = L(y) + C(y)

(2)

To ﬁnd y∗ , one would extract the best path in
L ∩ C1 ∩ C2 ∩ · · · using the Viterbi algorithm, or
Dijkstra’s algorithm if the lattice is cyclic. This step
is fast if the intersected automaton is small.
The problem is that the multiple intersections in
L ∩ C1 ∩ C2 ∩ · · · can quickly lead to an FSA with
an intractable number of states. The intersection
of two ﬁnite-state automata produces an automaton
1
Pn For example, if M is a simple linear-chain CRF, L(y) =
i=1 f (yi−1 , yi ) + g(xi , yi ). We build L = M (x) as an
acyclic FSA whose state set is Y × {1, 2, . . . n}, with transitions (y , i − 1) → (y, i) of weight f (y , y) + g(xi , y).

with the cross product state set. That is, if F has m
states and G has n states, then F ∩ G has up to mn
states (fewer if some of the mn possible states do
not lie on any accepting path).
Intersection of many such constraints, even if they
have only a few states each, quickly leads to a combinatorial explosion. In the worst case, the size, in
states, of the resulting lattice is exponential in the
number of constraints. To deal with this, we present
a constraint relaxation algorithm.

4

Hard constraints

The simplest kind of constraint is the hard constraint. Hard constraints are necessarily binary—
either the labeling satisﬁes the constraint, or it violates it. Violation is fatal—the labeling produced
by decoding must satisfy each hard constraint.
Formally, a hard constraint is a mapping C: Y ∗ →
{0, −∞}, encoded as an unweighted FSA. If a string
satisﬁes the constraint, recognition of the string will
lead to an accepting state. If it violates the constraint, recognition will end in a non-accepting state.
Here we give an algorithm for decoding with a set
of such constraints. Later (§6), we discuss the case
of binary soft constraints. In what follows, we will
assume that there is always at least one path in the
lattice that satisﬁes all of the constraints.
4.1

Decoding by constraint relaxation

Our decoding algorithm ﬁrst relaxes the global constraints and solves a simpler problem. In particular,
we ﬁnd the best labeling according to the model,
def

∗
y0 = argmax L(y)

(3)

y

ignoring all the constraints in C.
∗
Next, we check whether y0 satisiﬁes the con∗
straints. If so, then we are done—y0 is also y∗ . If
not, then we reintroduce the constraints. However,
rather than include all at once, we introduce them
only as they are violated by successive solutions to
∗
∗
the relaxed problems: y0 , y1 , etc. We deﬁne
def

∗
y1 = argmax (L(y) + C(y))

(4)

y

∗
for some constraint C that y0 violates. Similarly,
∗ satisﬁes an additional constraint that y∗ violates,
y2
1

425

H ARD -C ONSTRAIN -L ATTICE(L, C):
y := Best-Path(L)
2.
while ∃C ∈ C such that C(y) = −∞:
3.
L := L ∩ C
4.
C := C − {C}
5.
y := Best-Path(L)
6.
return y
1.

Figure 2: Hard constraints decoding algorithm.
∗
and so on. Eventually, we ﬁnd some k for which yk
satisﬁes all constraints, and this path is returned.
To determine whether a labeling y satisﬁes a constraint C, we represent y as a straight-line automaton and intersect with C, checking the result for nonemptiness. This is equivalent to string recognition.
Our hope is that, although intractable in the worst
case, the constraint relaxation algorithm will operate
efﬁciently in practice. The success of traditional sequence models on NLP tasks suggests that, for natural language, much of the correct analysis can be
recovered from local features and constraints alone.
We suspect that, as a result, global constraints will
often be easy to satisfy.
Pseudocode for the algorithm appears in Figure 2.
Note that line 2 does not specify how to choose
C from among multiple violated constraints. This
is discussed in §7. Our algorithm resembles the
method of Koskenniemi (1990) and later work. The
difference is that there lattices are unweighted and
may not contain a path that satisﬁes all constraints,
so that the order of constraint intersection matters.

5

Semantic role labeling

The semantic role labeling task (Carreras and
M` rques, 2004) involves choosing instantiations of
a
verb arguments from a sentence for a given verb.
The verb and its arguments form a proposition. We
use data from the CoNLL-2004 shared task—the
PropBank (Palmer et al., 2005) annotations of the
Penn Treebank (Marcus et al., 1993), with sections
15–18 as the training set and section 20 as the development set. Unless otherwise speciﬁed, all measurements are made on the development set.
We follow Roth and Yih (2005) exactly, in order
to compare system runtimes. They, in turn, follow
Hacioglu et al. (2004) and others in labeling only
the heads of syntactic chunks rather than all words.
We label only the core arguments (A0–A5), treating

?

(a)

A0
A0

0

1

A0

A1
A2
A3

?

A5
A4
A3
A2
A1
A0
O

O

0

?

1

O

(verb position)

• A RGUMENT CANDIDATES (Fig. 5) encodes a
set of position spans each of which must receive only a single label type. These spans were
proposed using a high-recall heuristic (Xue and
Palmer, 2004).

2

A3
A2
A1
A0
O

2

• K NOWN VERB POSITION (Fig. 4(b)) simply
encodes the position of the verb in question,
which must be labeled O.

0

• D ISALLOW ARGUMENTS (Fig. 4(c)) speciﬁes
argument types that are compatible with the
verb in question, according to PropBank.

A4

(b)

A5

(c)

Figure 4: Automata expressing N O DUPLICATE A0 (? matches
anything but A0), K NOWN VERB POSITION [2], and D ISALLOW
ARGUMENTS [A4,A5].

adjuncts and references as O.
Figure 3 shows an example sentence from the
shared task. It is marked with an IOB phrase chunking, the heads of the phrases, and the correct semantic role labeling. Heads are taken to be the rightmost
words of chunks. On average, there are 18.8 phrases
per proposition, vs. 23.5 words per sentence. Sentences may contain multiple propositions. There are
4305 propositions in section 20.
5.1

Constraints

Roth and Yih use ﬁve global constraints on label sequences for the semantic role labeling task. We express these constraints as FSAs. The ﬁrst two are
general, and the seven automata encoding them can
be constructed ofﬂine:
• N O DUPLICATE ARGUMENT LABELS
(Fig. 4(a)) requires that each verb have at
most one argument of each type in a given
sentence. We separate this into six individual
constraints, one for each core argument type.
Thus, we have constraints called N O DUPLI CATE A0, N O DUPLICATE A1, etc. Each of
these is represented as a three-state FSA.
• AT LEAST ONE ARGUMENT (Fig. 1) simply requires that the label sequence is not O∗ . This is
a two-state automaton as described in §2.
The last three constraints require information
about the example, and the automata must be constructed on a per-example basis:
426

5.2 Experiments
We implemented our hard constraint relaxation algorithm, using the FSA toolkit (Kanthak and Ney,
2004) for ﬁnite-state operations. FSA is an opensource C++ library providing a useful set of algorithms on weighted ﬁnite-state acceptors and transducers. For each example we decoded, we chose a
random order in which to apply the constraints.
Lattices are generated from what amounts to a
unigram model—the voted perceptron classiﬁer of
Roth and Yih. The features used are a subset of those
commonly applied to the task.
Our system produces output identical to that of
Roth and Yih. Table 1 shows F-measure on the core
arguments. Table 2 shows a runtime comparison.
The ILP runtime was provided by the authors (personal communication). Because the systems were
run under different conditions, the times are not directly comparable. However, constraint relaxation is
more than sixteen times faster than ILP despite running on a slower platform.
5.2.1 Comparison to an ILP solver
Roth and Yih’s linear program has two kinds of
numeric constraints. Some encode the shortest path
problem structure; the others encode the global constraints of §5.1. The ILP solver works by relaxing
to a (real-valued) linear program, which may obtain
a fractional solution that represents a path mixture
instead of a path. It then uses branch-and-bound to
seek the optimal rounding of this fractional solution
to an integer solution (Gu´ ret et al., 2002) that repree
sents a single path satisfying the global constraints.
Our method avoids fractional solutions: a relaxed
solution is always a true single path, which either

Mr. Turner said
the
test will
be shipped in
45
days
to hospitals and clinical laboratories .
B-NP I-NP B-VP B-NP I-NP B-VP I-VP I-VP B-PP B-NP I-NP B-PP B-NP
O B-NP
I-NP
O
Turner said
test
shipped in
days
to hospitals and
laboratories .
A0
O
A1
A1
A1
A1
A1
A1
A1
A1
O
Figure 3: Example sentence, with phrase tags and heads, and core argument labels. The A1 argument of “said” is a long clause.
O

A0

A2
A3
A4
A5

A5
O
A0
A1

5

O

6

O

7

O

8

O

10

A0

11

A0

12

9

13

A0

14

A0

16

A1
2

A2

22

A3
A4

28

A5

34

40

A1

A2

A3

A4

A5

17

23

29

35

41

A1

A2

A3

A4

A5

18

24

30

36

42

A1

19

A2

25

A3

31

A4

37

A5

43

A1

A2

A3

A4

A5

20

26

32

38

44

A1

A2

A3

A4

A5

O

A0

A0

A0

15

A0

A4
1

O

O

O

A3

A1
0

4

A2

21

27

33

39

A1
A2
A3

A1
3

A4

A2
A3

A5
A4
A3
A2
A1
A0
O
46

A4
A5

A5

45

Figure 5: An automaton expressing A RGUMENT CANDIDATES.
Argument
A0
A1
A2
A3
A4
A5
All

Count
2849
4029
943
149
147
4
8121

F-measure
79.27
75.59
55.68
46.41
81.82
25.00
74.51

Constraint
A RGUMENT CANDIDATES
N O DUPLICATE A1
N O DUPLICATE A0
N O DUPLICATE A2
AT LEAST ONE ARGUMENT
D ISALLOW ARGUMENTS
N O DUPLICATE A3
N O DUPLICATE A4
N O DUPLICATE A5
K NOWN VERB POSITION

Table 1: F-measure on core arguments.

satisﬁes or violates each global constraint. In effect,
we are using two kinds of domain knowledge. First,
we recognize that this is a graph problem, and insist
on true paths so we can use Viterbi decoding. Second, we choose to relax only domain-speciﬁc constraints that are likely to be satisﬁed anyway (in our
domain), in contrast to the meta-constraint of integrality relaxed by ILP. Thus it is cheaper on average for us to repair a relaxed solution. (Our repair
strategy—ﬁnite-state intersection in place of branchand-bound search—remains expensive in the worst
case, as the problem is NP-hard.)
5.2.2

Constraint violations

∗
The y0 s, generated with only local information,
satisfy most of the global constraints most of the
time. Table 3 shows the violations by type.
The majority of best labelings according to the
local model don’t violate any global constraints—
a fact especially remarkable because there are no
label sequence features in Roth and Yih’s unigram

427

Violations
1619
899
348
151
108
48
13
3
1
0

Fraction
0.376
0.209
0.081
0.035
0.025
0.011
0.003
0.001
0.000
0.000

∗
Table 3: Violations of constraints by y0 .

model. This conﬁrms our intuition that natural language structure is largely apparent locally. Table 4
shows the breakdown. The majority of examples are
very efﬁcient to decode, because they don’t require
∗
intersection of the lattice with any constraints—y0
is extracted and is good enough. Those examples
where constraints are violated are still relatively efﬁcient because they only require a small number of intersections. In total, the average number of intersections needed, even with the naive randomized constraint ordering, was only 0.65. The order doesn’t
matter very much, since 75% of examples have one
violation or fewer.
5.2.3

Effects on lattice size

Figure 6 shows the effect of intersection with violated constraints on the average size of lattices,
measured in arcs. The vertical bars at k = 0,
k = 1, . . . show the number of examples where con-

Method
Brute Force Finite-State
ILP
Constraint Relaxation

Total Time
37m25.290s
11m39.220s
39.700s

Per Example
0.522s
0.162s
0.009s

Platform
Pentium III, 1.0 GHz
Xeon, 3.x GHz
Pentium III, 1.0 GHz

Table 2: A comparison of runtimes for constrained decoding with ILP and FSA.
Violations
0
1
2
3
4
5
6–10

Labelings
2368
863
907
156
10
1
0

Fraction
0.550
0.200
0.211
0.036
0.002
0.000
0.000

Constraint
A RGUMENT CANDIDATES
AT LEAST ONE ARGUMENT
N O DUPLICATE A2
N O DUPLICATE A0
N O DUPLICATE A1
N O DUPLICATE A3
N O DUPLICATE A4

Cumulative
0.550
0.750
0.961
0.997
0.999
1.000
1.000

∗
Table 4: Number of y0 with each violation count.
2500

Verbs
Mean Arcs with Relaxation
Mean Arcs with Brute Force

longer runtime of the brute-force method (Table 2).
Harder examples (corresponding to longer trajectories) have larger lattices, on average. This is partly
just because it is disproportionately the longer sentences that are hard: they have more opportunities
for a relaxed decoding to violate global constraints.
Hard examples are rare. The left three columns,
requiring only 0–2 intersections, constitute 96% of
examples. The vast majority can be decoded without
much more than doubling the local-lattice size.

1500

1000

500

0

1

2

3

4

5

Figure 6: Mean lattice size (measured in arcs) throughout decoding. Vertical bars show the number of examples over which
each mean is computed.

straint relaxation had to intersect k contraints (i.e.,
∗
y∗ ≡ yk ). The trajectory ending at (for example)
k = 3 shows how the average lattice size for that
subset of examples evolved over the 3 intersections.
The X at k = 3 shows the ﬁnal size of the brute-force
lattice on the same subset of examples.
For the most part, our lattices do stay much
smaller than those produced by the brute-force algorithm. (The uppermost curve, k = 5, is an obvious
exception; however, that curve describes only the
seven hardest examples.) Note that plotting only the
ﬁnal size of the brute-force lattice obscures the long
trajectory of its construction, which involves 10 intersections and, like the trajectories shown, includes
larger intermediate automata.2 This explains the far
2

Fraction
0.0209
0.0063
0.0007
0.0005
0.0005
0.0002
0.0002

ˆ
Table 5: Violations of constraints by y, measured over the development set.

2000

0

Violations
90
27
3
2
2
1
1

The ﬁnal brute-force lattice is especially shrunk by its in-

428

6

Soft constraints

ˆ
The gold standard labels y occasionally violate the
hard global constraints that we are using. Counts
for the development set appear in Table 5. Counts
for violations of N O DUPLICATE A· do not include
discontinous arguments, of which there are 104 instances, since we ignore them.
Because of the infrequency, the hard constraints
still help most of the time. However, on a small subset of the examples, they preclude us from inferring
the correct labeling.
We can apply these constraints with weights,
rather than making them inviolable. This constitutes
a transition from hard to soft constraints. Formally,
a soft constraint C: Y ∗ → R− is a mapping from a
label sequence to a non-positive penalty.
Soft constraints present new difﬁculty for decodclusion of, for example, D ISALLOW ARGUMENTS, which can
only remove arcs. That constraint is rarely included in the relaxation lattices because it is rarely violated (see Table 3).

S OFT-C ONSTRAIN -L ATTICE(L, C):
(y∗ , Score(y∗ )) := (empty, −∞)
2.
branches := [(L, C, 0)]
3.
while (L, C, penalty) := Dequeue(branches):
4.
L := Prune(L, Score(y∗ ) − penalty)
5.
unless Empty(L):
6.
y := Best-Path(L)
7.
for C ∈ C:
8.
if C(y) < 0:
(* so C(y) = wC *)
9.
C := C − {C}
10.
Enqueue(branches, (L ∩ C, C, penalty))
11.
penalty := penalty + C(y)
12.
if Score(y∗ ) < L(y) + penalty:
13.
(y∗ , Score(y∗ )) := (y, L(y) + penalty)
∗
14.
return y

1.

Figure 7: Soft constraints decoding algorithm

ing, because instead of eliminating paths of L from
contention, they just reweight them.
In what follows, we consider only binary soft
constraints—they are either satisﬁed or violated, and
the same penalty is assessed whenever a violation
occurs. That is, ∀C ∈ C, ∃wC < 0 such that
∀y, C(y) ∈ {0, wC }.
6.1

Soft constraint relaxation

The decoding algorithm for soft constraints is a generalization of that for hard constraints. The difference is that, whereas with hard constraints a violation meant disqualiﬁcation, here violation simply
means a penalty. We therefore must ﬁnd and compare two labelings: the best that satisﬁes the constraint, and the best that violates it.
We present a branch-and-bound algorithm
(Lawler and Wood, 1966), with pseudocode in
Figure 7. At line 9, we process and eliminate a
currently violated constraint C ∈ C by considering
two cases. On the ﬁrst branch, we insist that C be
satisﬁed, enqueuing L ∩ C for later exploration. On
the second branch, we assume C is violated by all
paths, and so continue considering L unmodiﬁed,
but accept a penalty for doing so; we immediately
explore the second branch by returning to the start
of the for loop.3
Not every branch needs to be completely explored. Bounding is handled by the P RUNE function at line 4, which shrinks L by removing some
3

It is possible that a future best path on the second branch
will not actually violate C, in which case we have overpenalized
it, but in that case we will also ﬁnd it with correct penalty on the
ﬁrst branch.

429

or all paths that cannot score better than Score(y∗ ),
the score of the best path found on any branch so
far. Our experiments used almost the simplest possible P RUNE: replace L by the empty lattice if the best
path falls below the bound, else leave L unchanged.4
A similar bounding would be possible in the implicit branches. If, during the for loop, we ﬁnd that
the test at line 12 would fail, we can quit the for
loop and immediately move to the next branch in
the queue at line 3.
There are two factors in this algorithm that contribute to avoiding consideration of all of the exponential number of leaves corresponding to the power
set of constraints. First, bounding stops evaluation
of subtrees. Second, only violated constraints require branching. If a lattice’s best path satisiﬁes a
constraint, then the best path that violates it can be
no better since, by assumption, ∀y, C(y) ≤ 0.
6.2 Runtime experiments
Using the ten constraints from §5.1, weighted
naively by their log odds of violation, the soft constraint relaxation algorithm runs in a time of 58.40
seconds. It is, as expected, slower than hard constraint relaxation, but only by a factor of about two.
As a side note, softening these particular constraints in this particular way did not improve decoding quality in this case. It might help to jointly
train the relative weights of these constraints and
the local model—e.g., using a perceptron algorithm
(Freund and Schapire, 1998), which repeatedly extracts the best global path (using our algorithm),
compares it to the gold standard, and adjusts the constraint weights. An obvious alternative is maximumentropy training, but the partition function would
have to be computed using the large brute-force lattices, or else approximated by a sampling method.

7

Future work

For a given task, we may be able to obtain further
speedups by carefully choosing the order in which
to test and apply the constraints. We might treat this
as a reinforcement learning problem (Sutton, 1988),
4
Partial pruning is also possible: by running the Viterbi version of the forward-backward algorithm, one can discover for
each edge the weight of the best path on which it appears. One
can then remove all edges that do not appear on any sufﬁciently
good path.

where an agent will obtain rewards by ﬁnding y∗
quickly. In the hard-constraint algorithm, for example, the agent’s possible moves are to test some
constraint for violation by the current best path, or
to intersect some constraint with the current lattice.
Several features can help the agent choose the next
move. How large is the current lattice, which constraints does it already incorporate, and which remaining constraints are already known to be satisﬁed or violated by its best path? And what were the
answers to those questions at previous stages?
Our constraint relaxation method should be tested
on problems other than semantic role labeling. For
example, information extraction from bibliography
entries, as discussed in §1, has about 13 ﬁelds to extract, and interesting hard and soft global constraints
on co-occurrence, order, and adjacency. The method
should also be evaluated on a task with longer sequences: though the ﬁnite-state operations we use
do scale up linearly with the sequence length, longer
sequences have more chance of violating a global
constraint somewhere in the sequence, requiring us
to apply that constraint explicitly.

8

Conclusion

Roth and Yih (2005) showed that global constraints
can improve the output of sequence labeling models
for semantic role labeling. In general, decoding under such constraints is NP-complete. We exhibited
a practical approach, ﬁnite-state constraint relaxation, that greatly sped up decoding on this NLP task
by using familiar ﬁnite-state operations—weighted
FSA intersection and best-path extraction—rather
than integer linear programming.
We have also given a constraint relaxation algorithm for binary soft constraints. This allows incorporation of constraints akin to reranking features, in
addition to inviolable constraints.

Acknowledgments
This material is based upon work supported by
the National Science Foundation under Grant No.
0347822. We thank Scott Yih for kindly providing
both the voted-perceptron classiﬁer and runtime results for decoding with ILP, and the reviewers for
helpful comments.

430

References
Xavier Carreras and Llu´s M` rques. 2004. Introduction to the
ı
a
CoNLL-2004 shared task: Semantic role labeling. In Proc.
of CoNLL, pp. 89–97.
Jenny Rose Finkel, Trond Grenager, and Christopher Manning.
2005. Incorporating non-local information into information
extraction systems by Gibbs sampling. In Proc. of ACL, pp.
363–370.
Yoav Freund and Robert E. Schapire. 1998. Large margin classiﬁcation using the perceptron algorithm. In Proc. of COLT,
pp. 209–217, New York. ACM Press.
Christelle Gu´ ret, Christian Prins, and Marc Sevaux. 2002. Ape
plications of optimization with Xpress-MP. Dash Optimization. Translated and revised by Susanne Heipcke.
Kadri Hacioglu, Sameer Pradhan, Wayne Ward, James H. Martin, and Daniel Jurafsky. 2004. Semantic role labeling by
tagging syntactic chunks. In Proc. of CoNLL, pp. 110–113.
Stephan Kanthak and Hermann Ney. 2004. FSA: An efﬁcient
and ﬂexible C++ toolkit for ﬁnite state automata using ondemand computation. In Proc. of ACL, pp. 510–517.
Lauri Karttunen, Jean-Pierre Chanod, Gregory Grefenstette,
and Anne Schiller. 1996. Regular expressions for language engineering. Journal of Natural Language Engineering, 2(4):305–328.
Kimmo Koskenniemi. 1990. Finite-state parsing and disambiguation. In Proc. of COLING, pp. 229–232.
John Lafferty, Andrew McCallum, and Fernando Pereira. 2001.
Conditional random ﬁelds: Probabilistic models for segmenting and labeling sequence data. In Proc. of ICML, pp.
282–289.
Eugene L. Lawler and David E. Wood. 1966. Branch-andbound methods: A survey. Operations Research, 14(4):699–
719.
Mitchell P. Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1993. Building a large annotated corpus
of English: the Penn Treebank. Computational Linguistics,
19:313–330.
Mehryar Mohri, Fernando Pereira, and Michael Riley. 1996.
Weighted automata in text and speech processing. In A. Kornai, editor, Proc. of the ECAI 96 Workshop, pp. 46–50.
Martha Palmer, Daniel Gildea, and Paul Kingsbury. 2005. The
Proposition Bank: An annotated corpus of semantic roles.
Computational Linguistics, 31(1):71–106.
Fuchun Peng and Andrew McCallum. 2004. Accurate information extraction from research papers using conditional random ﬁelds. In Proc. of HLT-NAACL, pp. 329–336.
Dan Roth and Wen-tau Yih. 2005. Integer linear programming
inference for conditional random ﬁelds. In Proc. of ICML,
pp. 737–744.
Richard S. Sutton. 1988. Learning to predict by the methods of
temporal differences. Machine Learning, 3(1):9–44.
Nathan Vaillette. 2004. Logical Speciﬁcation of Finite-State
Transductions for Natural Language Processing. Ph.D. thesis, Ohio State University.
Nianwen Xue and Martha Palmer. 2004. Calibrating features
for semantic role labeling. In Proc. of EMNLP, pp. 88–94.

