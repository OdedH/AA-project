Easy and Hard
Constraint Ranking in OT

Outline
The Constraint Ranking problem
Making fast ranking faster
Extension: Considering all competitors
How hard is OT generation?
Making slow ranking slower

Jason Eisner
U. of Rochester

August 6, 2000 – SIGPHON - Luxembourg

The Ranking Problem
finite
positive
data
m items
C1
C5

Constraint
Ranker

What Is Each Input Datum?

<C3, C1, C2, C5, C4>
or “fail”

Find grammar consistent with data

C2
C4 C3

(or just determine whether one exists)

Possibilities from Tesar & Smolensky
A pairwise ranking g > h
An attested form g
An attested set G
1 grammatical element - learner doesn’t know which!
Captures uncertainty about the representation or
underlying form of the speaker’s utterance
Today we’ll assume learner does know underlying

How efficient can this be?
Different from Gold learnability
Proposed by Tesar & Smolensky

n constraints

Key Results

{ ga(zé.bo),
(ga.zé)bo }

Outline

A pairwise ranking g > h linear time in n
coNP-hard
An attested form g
even with
m=1
Σ2-complete
An attested set G
1 grammatical element - learner doesn’t know which!
Captures uncertainty about the representation or
underlying form of the speaker’s utterance
Today we’ll assume learner does know underlying
gazebo

gazebo

The Constraint Ranking problem
Making fast ranking faster
Extension: Considering all competitors
How hard is OT generation?
Making slow ranking slower

{ ga(zé.bo),
(ga.zé)bo }

1

More Pairwise Rankings …

Pairwise Rankings: g > h
favor h

C1

C2

favor g

C3

C4

g

evidence from more pairs

C5
constraints not
ranked yet

h

Must eliminate h before C1 or C2 makes it win
C4 or C5 » C1
C4 or C5 » C2
Satisfying these is necessary and sufficient

g>h

C2 » C1

g’ > h’
C2 » C1

C1 or C3 or C5 » C2

C1 or C3 or C5 » C2

C1 or C3 or C5 » C4

We’ll now use Recursive Constraint Demotion (RCD)
(Tesar & Smolensky - easy greedy algorithm)

g>h

g’’ > h’’

g’ > h’

C4 or C5 » C1

C4 or C5 » C2

g’’ > h’’

C2 » C3
C2 » C4

g’’ > h’’

g’ > h’

C4 or C5 » C1

g>h
C4 or C5 » C1
C4 or C5 » C2

C2 » C1

C4 or C5 » C2

C2 » C3

C1 or C3 or C5 » C2
C2 » C3

C2 » C4

C1 or C3 or C5 » C4

C2 » C4

C1 or C3 or C5 » C4

5

2

5

2

4

3

Needn’t be
dominated
by anyone

4

3
1

g>h

g’’ > h’’

g’ > h’

C4 or C5 » C1

1

C2 » C1

C4 or C5 » C2

C1 or C3 or C5 » C2

g>h

g’’ > h’’

g’ > h’

C4 or C5 » C1

C2 » C1

C4 or C5 » C2

C2 » C3

C1 or C3 or C5 » C2
C2 » C3

C1 or C3 or C5 » C4

C2 » C4

C1 or C3 or C5 » C4

C2 » C4

5

2

5

4

3

»

2

4
3

1

1

2

g>h

g’ > h’

C4 or C5 » C1

C2 » C1

g’’ > h’’

C4 or C5 » C2

Recursive Constraint Demotion

C1 or C3 or C5 » C2
C2 » C3
C2 » C4

g>h

g’’ > h’’

g’ > h’

C4 or C5 » C1

C1 or C3 or C5 » C4

C2 » C1

C4 or C5 » C2

C1 or C3 or C5 » C2
C2 » C3

5

»

2

»

How to find undominated constraint at each step?
T&S simply search: O(mn) per search ⇒ O(mn2)
But we can do better:
Abstraction: Topological sort of a hypergraph
Ordinary topological sort is linear-time; same here!

3
1

g>h

g’’ > h’’

g’ > h’

C4 or C5 » C1

C2 » C1

g>h

C1 or C3 or C5 » C2

g’’ > h’’

g’ > h’

C4 or C5 » C1

C4 or C5 » C2

C2 » C1

C4 or C5 » C2

C2 » C3

C1 or C3 or C5 » C2
C2 » C3

C2 » C4

C1 or C3 or C5 » C4

maintain count
shrink
representation
of parents
of hypergraph

5

0

C2 » C4

C1 or C3 or C5 » C4

Delete that structure in time proportional to its size
Maintain list of red nodes: find next in time O(1)
Total time: O(M+n), down from O(Mn)

maintain count
of parents

2

0

2
3

C1 or C3 or C5 » C4

C2 » C4

4

2

4

2

1
2

1

n=nodes
M=edges ≤ mn

Comparison: Constraint Demotion
Tesar & Smolensky 1996
Formerly same speed, but now RCD is faster
Advantage: CD maintains a full ranking at all times
Can be run online (memoryless)
This eventually converges; but not a conservative strategy
Current grammar is often inconsistent with past data
To make it conservative:

3

4

1

1
1

1

n=nodes
M=edges ≤ mn

Outline
The Constraint Ranking problem
Making fast ranking faster
Extension: Considering all competitors
How hard is OT generation?
Making slow ranking slower

On each new datum, rerank from scratch using all data (memorized)
Might as well use faster RCD for this
Modifying the previous ranking is no faster, in worst case

3

New Problem
Observed data: g, g’, …
Must beat or tie all competitors
(Not enough to ensure g > h, g’ > h’ …)

Just use RCD?
Try to divide g’s competitors h into equiv. classes
But can get exponentially many classes
Hence exponentially many blue nodes

But Greedy Algorithm Still Works
Preserves spirit of RCD
Greedily extend grammar 1 constraint at a time
No compilation into hypergraph
5

»

1

2

4

chosen so far

To pick each of n constraints, check m forms under n grammars
We’ll see that this is hard …

T&S’s solution also runs OT generation mn2 times
Error-Driven Constraint Demotion
For n2 CD passes, for m forms, find (profile of) optimal competitor

»

2

»

1

»

2

»

3

5

Preserves spirit of RCD
Greedily extend grammar 1 constraint at a time
No compilation into hypergraph
But must run OT generation mn2 times

5
5

But Greedy Algorithm Still Works

3

remaining

»

2

»

4

check these partial grammars:
pick one making g, g’, … optimal
(maybe with ties to be broken later)

Continuous Algorithms
Simulated annealing
Boersma 1997: Gradual Learning Algorithm
Constraint ranking is stochastic, with real-valued bias & variance

Maximum likelihood
Johnson 2000: Generalized Iterative Scaling (maxent)
Constraint weights instead of strict ranking

Deal with noise and free variation!
How many iterations to convergence?

That requires more info from generation - we’ll return to this!

Outline
The Constraint Ranking problem
Making fast ranking faster
Extension: Considering all competitors
How hard is OT generation?
Making slow ranking slower

Complexity Classes: Boolean
…

coNP
∀xΨ(x)

P
Ψ

NP
∃xΨ(x)

Dp

∆2 =PNP

Σ2 =NPNP
∃x∀yΨ(x,y)

polytime w/
oracle: NP
subroutines
run in unit
time

X-hard ≥ X-complete = hardest in X

4

Complexity Classes: Integer
Integer-valued functions have classes too
FP (like P)
OptP (like NP ∃xΨ(x) )
FPNP (like PNP = ∆2 )

Turing-machine polytime
min f(x)

Note: OptP-complete ⇒ FPNP-complete
Can ask Boolean questions about output of an OptPcomplete function; often yields complete decision problems

Hardness Proof

OptP-complete Functions
Traveling Salesperson
Minimum cost for touring a graph?

Minimum Satisfying Assignment
Minimum bitstring b1 b2 … bn satisfying
φ(b1, b2, … bn), a Boolean formula?

Optimal violation profile in OT!
Given underlying form
Given grammar of bounded finite-state constraints
Clearly in OptP: min f(x) where f computes violation profile
As hard as Minimum Satisfying Assignment

Subtlety in the Proof

Given formula φ(b1, b2, … bn)
Need minimum satisfier b1b2 … bn (or 11…1 if unsat)
Reduce to finding minimum violation profile
Let OT candidates be bitstrings b1b2 … bn

Turning φ into a DFA for C(φ) might blow it up
exponentially - so not poly reduction!
Luckily, we’re allowed to assume φ is in CNF:
φ = D1^ D2 ^ … Dm

Let constraint C(φ) be satisfied if φ(b1, b2, … bn)

000
001
010
…

C(φ)
only
satisfiers
survive
past here

C(¬b1)
0
0
0

C(¬b2) C(¬b3)
0
0
0
1
1
0
…

Another Subtlety
Must ensure that if there is no satisfying
assignment, 11…1 wins
Modify each C(Di) so that 11…1 satisfies it
At worst, this doubles the size of the DFA
C(D1) … C(Dm) C(¬b1) C(¬b2) C(¬b3)
equivalent to
000
0
0
0
C(φ);
001
0
0
1
only satisfiers
010
0
1
0
survive past here
…
…

C(D1) … C(Dm) C(¬b1) C(¬b2) C(¬b3)
equivalent to
000
0
0
0
C(φ);
001
0
0
1
only satisfiers
010
0
1
0
survive past here
…
…

Associated Decision Problems
OptVal
OptVal < k?
OptVal = k?
Last bit of OptVal?
Is g optimal?
Is some g ∈ G
optimal?

FPNP-complete
NP-complete
Dp-complete
∆2 -complete
coNP-complete
∆2 -complete

EDCD

RCD (mult.
competitors)

5

Is some g ∈ G optimal?
Problem is in ∆2 =PNP:

Outline

gazebo

{ ga(zé.bo),
(ga.zé)bo }

OptVal < k? is in NP
So binary search for OptVal via NP oracle
Then ask oracle: ∃g ∈ G with profile OptVal?

Completeness:
Given φ, we built grammar making the MSA optimal
∆2-complete problem: Is final bit of MSA zero?
Reduction: Is some g in {0,1}n-10 optimal?
Notice that {0,1}n-10 is a natural attested set

Ranking With Attested Forms
Complexity of ranking?
If restricted to 1 form: coNP-complete
no worse than checking correctness of ranking!

The Constraint Ranking problem
Making fast ranking faster
Extension: Considering all competitors
How hard is OT generation?
Making slow ranking slower

Ranking With Attested Sets
Problem is in Σ2 ∃x∀yΨ(x,y)
∃(ranking, g ∈ G) ∀h : g > h

In fact Σ2-complete!
Proof by reduction from QSAT2

General lower bound: coNP-hard
General upper bound: ∆2 =PNP

∃ b1,…br ∀ c1,…cs φ(b1,…br, c1,…cs)

because RCD solves with O(mn2) many checks

Conclusions

Few natural problems in this category
Some learning problems that get positive and
negative evidence
OT only has implicit negative evidence: no other
form can do better than the attested form

Open Questions

Easy ranking easier than known
Hard ranking harder than known
Adding bits of realism quickly drives complexity
of ranking through the roof
Optimization adds a quantifier:

Rescue OT by restricting something?
Effect of relaxing restrictions?
Unbounded violations
Non-finite-state constraints
Non-poly-bounded candidates
Uncertainty about underlying form

generation

ranking

w/ uncertainty

derivational

FP

NP-complete

NP-complete

Parameterized analysis (Wareham 1998)
Should exploit structure of Con

OT

OptPcomplete

coNP-hard,
in ∆2

Σ2-complete

huge (linear time is too long!) but universal

6

