First- and Second-Order Expectation Semirings
with Applications to Minimum-Risk Training on Translation Forests∗
Zhifei Li and Jason Eisner
Department of Computer Science and Center for Language and Speech Processing
Johns Hopkins University, Baltimore, MD 21218, USA
zhifei.work@gmail.com, jason@cs.jhu.edu

Abstract
Many statistical translation models can be
regarded as weighted logical deduction.
Under this paradigm, we use weights from
the expectation semiring (Eisner, 2002), to
compute ﬁrst-order statistics (e.g., the expected hypothesis length or feature counts)
over packed forests of translations (lattices or hypergraphs). We then introduce
a novel second-order expectation semiring, which computes second-order statistics (e.g., the variance of the hypothesis length or the gradient of entropy).
This second-order semiring is essential for
many interesting training paradigms such
as minimum risk, deterministic annealing, active learning, and semi-supervised
learning, where gradient descent optimization requires computing the gradient of entropy or risk. We use these semirings in an
open-source machine translation toolkit,
Joshua, enabling minimum-risk training
for a beneﬁt of up to 1.0 BLEU point.

1

Introduction

A hypergraph or “packed forest” (Gallo et al.,
1993; Klein and Manning, 2004; Huang and Chiang, 2005) is a compact data structure that uses
structure-sharing to represent exponentially many
trees in polynomial space. A weighted hypergraph
also deﬁnes a probability or other weight for each
tree, and can be used to represent the hypothesis
space considered (for a given input) by a monolingual parser or a tree-based translation system,
e.g., tree to string (Quirk et al., 2005; Liu et al.,
2006), string to tree (Galley et al., 2006), tree to
tree (Eisner, 2003), or string to string with latent
tree structures (Chiang, 2007).
∗
This research was partially supported by the Defense
Advanced Research Projects Agency’s GALE program via
Contract No HR0011-06-2-0001. We are grateful to Sanjeev
Khudanpur for early guidance and regular discussions.

Given a hypergraph, we are often interested in
computing some quantities over it using dynamic
programming algorithms. For example, we may
want to run the Viterbi algorithm to ﬁnd the most
probable derivation tree in the hypergraph, or the k
most probable trees. Semiring-weighted logic programming is a general framework to specify these
algorithms (Pereira and Warren, 1983; Shieber et
al., 1994; Goodman, 1999; Eisner et al., 2005;
Lopez, 2009). Goodman (1999) describes many
useful semirings (e.g., Viterbi, inside, and Viterbin-best). While most of these semirings are used in
“testing” (i.e., decoding), we are mainly interested
in the semirings that are useful for “training” (i.e.,
parameter estimation). The expectation semiring
(Eisner, 2002), originally proposed for ﬁnite-state
machines, is one such “training” semiring, and can
be used to compute feature expectations for the Estep of the EM algorithm, or gradients of the likelihood function for gradient descent.
In this paper, we apply the expectation semiring (Eisner, 2002) to a hypergraph (or packed forest) rather than just a lattice. We then propose
a novel second-order expectation semiring, nicknamed the “variance semiring.”
The original ﬁrst-order expectation semiring allows us to efﬁciently compute a vector of ﬁrstorder statistics (expectations; ﬁrst derivatives) on
the set of paths in a lattice or the set of trees in a
hypergraph. The second-order expectation semiring additionally computes a matrix of secondorder statistics (expectations of products; second
derivatives (Hessian); derivatives of expectations).
We present details on how to compute many interesting quantities over the hypergraph using the
expectation and variance semirings. These quantities include expected hypothesis length, feature
expectation, entropy, cross-entropy, KullbackLeibler divergence, Bayes risk, variance of hypothesis length, gradient of entropy and Bayes
risk, covariance and Hessian matrix, and so on.
The variance semiring is essential for many interesting training paradigms such as deterministic

In Proceedings of EMNLP, August 2009, pp. 40–51. Fig. 2 has been corrected.

annealing (Rose, 1998), minimum risk (Smith and
Eisner, 2006), active and semi-supervised learning
(Grandvalet and Bengio, 2004; Jiao et al., 2006).
In these settings, we must compute the gradient of
entropy or risk. The semirings can also be used for
second-order gradient optimization algorithms.
We implement the expectation and variance
semirings in Joshua (Li et al., 2009a), and demonstrate their practical beneﬁt by using minimumrisk training to improve Hiero (Chiang, 2007).

2

Hierarchical Machine Translation

In Hiero, a synchronous context-free grammar
(SCFG) is extracted from automatically wordaligned corpora. An illustrative grammar rule for
Chinese-to-English translation is
X →

X0 的 X1 , X1 of X0 ,

where the Chinese word 的 means of, and the
alignment, encoded via subscripts on the nonterminals, causes the two phrases around 的 to be
reordered around of in the translation.
Given
a source sentence, Hiero uses a CKY parser to
generate a hypergraph, encoding many derivation
trees along with the translation strings.
2.2

S→ X0 , X0

S→ X0 , X0

X 0,4 a cat the mat

X 0,4 the mat a cat

X→ X0 的 X1 , X1 on X0
X→ X0 的 X1 , X0 ’s X1
X→ X0 的 X1 , X1 of X0
X→ X0 的 X1 , X0 X1

X 0,2 the mat NA

X 3,4 a cat NA

X→ 垫子 上, the mat

!"0 #1

Semiring Parsing on Hypergraphs

We use a speciﬁc tree-based system called Hiero
(Chiang, 2007) as an example, although the discussion is general for any systems that use a hypergraph to represent the hypothesis space.
2.1

goal item

on the mat

X→ 猫, a cat

$2

of

%3

a cat

Figure 1: A toy hypergraph in Hiero. When generating the
hypergraph, a trigram language model is integrated. Rectangles represent items, where each item is identiﬁed by the
non-terminal symbol, source span, and left- and right-side
language model states. An item has one or more incoming
hyperedges. A hyperedge consists of a rule, and a pointer to
an antecedent item for each non-terminal symbol in the rule.

set of incoming hyperedges of node v (i.e., hyperedges of which v is the consequent), which represent different ways of deriving v. Figure 1 shows
a simple Hiero-style hypergraph. The hypergraph
encodes four different derivation trees that share
some of the same items. By exploiting this sharing, a hypergraph can compactly represent exponentially many trees.
We observe that any ﬁnite-state automaton can
also be encoded as a hypergraph (in which every
hyperedge is an ordinary edge that connects a single antecedent to a consequent). Thus, the methods of this paper apply directly to the simpler case
of hypothesis lattices as well.

Hypergraphs

Formally, a hypergraph is a pair V, E , where V
is a set of nodes (vertices) and E is a set of hyperedges, with each hyperedge connecting a set of
antecedent nodes to a single consequent node.1 In
parsing parlance, a node corresponds to an item
in the chart (which speciﬁes aligned spans of input and output together with a nonterminal label).
The root node corresponds to the goal item. A
hyperedge represents an SCFG rule that has been
“instantiated” at a particular position, so that the
nonterminals on the right and left sides have been
replaced by particular antecedent and consequent
items; this corresponds to storage of backpointers
in the chart.
We write T (e) to denote the set of antecedent
nodes of a hyperedge e. We write I(v) for the
1
Strictly speaking, making each hyperedge designate a
single consequent deﬁnes a B-hypergraph (Gallo et al., 1993).

2.3

Semiring Parsing

We assume a hypergraph HG, which compactly
encodes many derivation trees d ∈ D. Given HG,
we wish to extract the best derivations—or other
aggregate properties of the forest of derivations.
Semiring parsing (Goodman, 1999) is a general
framework to describe such algorithms. To deﬁne
a particular algorithm, we choose a semiring K
and specify a “weight” ke ∈ K for each hyperedge e. The desired aggregate result then emerges
as the total weight of all derivations in the hypergraph. For example, to simply count derivations,
one can assign every hyperedge weight 1 in the
semiring of ordinary integers; then each derivation also has weight 1, and their total weight is the
number of derivations.
We write K = K, ⊕, ⊗, 0, 1 for a semiring
with elements K, additive operation ⊕, multi-

plicative operation ⊗, additive identity 0, and multiplicative identity 1. The ⊗ operation is used to
obtain the weight of each derivation d by multiplying the weights of its component hyperedges e,
that is, kd =
e∈d ke . The ⊕ operation is used
to sum over all derivations d in the hypergraph
to obtain the total weight of the hypergraph HG,
which is d∈D e∈d ke .2 Figure 2 shows how to
compute the total weight of an acyclic hypergraph
HG.3 In general, the total weight is a sum over
exponentially many derivations d. But Figure 2
sums over these derivations in time only linear on
the size of the hypergraph. Its correctness relies
on axiomatic properties of the semiring: namely,
⊕ is associative and commutative with identity 0,
⊗ is associative with two-sided identity 1, and
⊗ distributes over ⊕ from both sides. The distributive property is what makes Figure 2 work.
The other properties are necessary to ensure that
4
d∈D
e∈d ke is well-deﬁned.
The algorithm in Figure 2 is general and can be
applied with any semiring (e.g., Viterbi). Below,
we present our novel semirings.

3

Finding Expectations on Hypergraphs

We now introduce the computational problems of
this paper and the semirings we use to solve them.
3.1

Problem Deﬁnitions

We are given a function p : D → R≥0 , which
decomposes multiplicatively over component hydef
peredges e of a derivation d ∈ D: that is, p(d) =
e∈d pe . In practice, p(d) will specify a probability distribution over the derivations in the hyper2

Eisner (2002) uses closed semirings that are also
equipped with a Kleene closure operator ∗ . For example, in
the real semiring R, +, ×, 0, 1 , we deﬁne p∗ = (1 − p)−1
(= 1 + p + p2 + . . .) for |p| < 1 and is undeﬁned otherwise. The closure operator enables exact summation over the
inﬁnitely many paths in a cyclic FSM, or trees in a hypergraph with non-branching cycles, without the need to iterate
around cycles to numerical convergence. For completeness,
we specify the closure operator for our semirings, satisfying
the axioms k∗ = 1 ⊕ k ⊗ k∗ = 1 ⊕ k∗ ⊗ k, but we do not
use it in our experiments since our hypergraphs are acyclic.
3
We assume that HG has already been built by deductive
inference (Shieber et al., 1994). But in practice, the nodes’ inside weights β(v) are usually accumulated as the hypergraph
is being built, so that pruning heuristics can consult them.
4
Actually, the notation e∈d ke assumes that ⊗ is commutative as well, as does the notation “for u ∈ T (e)” in our
algorithms; neither speciﬁes a loop order. One could however use a non-commutative semiring by ordering each hyperedge’s antecedents and specifying that a derivation’s weight
is the product of the weights of its hyperedges when visited in
preﬁx order. Tables 1–2 will not assume any commutativity.

I NSIDE(HG, K)
1 for v in topological order on HG £ each node
2
£ ﬁnd β(v) ← e∈I(v) (ke ⊗ ( u∈T (e) β(u)))
3
β(v) ← 0
4
for e ∈ I(v)
£ each incoming hyperedge
5
k ← ke
£ hyperedge weight
6
for u ∈ T (e)
£ each antecedent node
7
k ← k ⊗ β(u)
8
β(v) ← β(v) ⊕ k
9 return β(root)
Figure 2: Inside algorithm for an acyclic hypergraph HG,
which provides hyperedge weights ke ∈ K. This computes
all “inside weights” β(v) ∈ K, and returns β(root), which
is total weight of the hypergraph, i.e., d∈D e∈d ke . Each
leaf is assumed to have an incoming hyperedge of weight 1
with no antecedents, so the base case is subsumed by line 5.

O UTSIDE(HG, K)
1 for v in HG
2
α(v) ← 0
3 α(root) ← 1
4 for v in reverse topological order on HG
5
for e ∈ I(v) £ each incoming hyperedge
6
for u ∈ T (e) £ each antecedent node
7
α(u) ← α(u) ⊕ (α(v) ⊗ ke ⊗
8
w∈T (e),w=u β(w))
Figure 3: Computes the “outside weights” α(v). Can only be
run after I NSIDE(HG) of Figure 2 has already computed the
inside weights β(v).

graph. It is often convenient to permit this probability distribution to be unnormalized, i.e., one
may have to divide it through by some Z to get a
proper distribution that sums to 1.
We are also given two functions of interest r, s :
D → R, each of which decomposes additively
def
over its component hyperedges e: that is, r(d) =
def
e∈d se .
e∈d re , and s(d) =
We are now interested in computing the following quantities on the hypergraph HG:
def

Z =

p(d)

(1)

p(d)r(d)

(2)

p(d)s(d)

(3)

p(d)r(d)s(d)

(4)

d∈D
def

r =
d∈D
def

s =
d∈D
def

t =
d∈D

Note that r/Z, s/Z, and t/Z are expectations under p of r(d), s(d), and r(d)s(d), respectively.
More formally, the probabilistic interpretation

I NSIDE -O UTSIDE(HG, K, X )
1
2
3
4
5
6
7
8
9
10
11
12

£ Run inside and outside on HG with only ke weights
ˆ
k ← I NSIDE(HG, K) £ see Figure 2
O UTSIDE(HG, K)
£ see Figure 3
£ Do a single linear combination to get x
ˆ
x←0
ˆ
for v in HG £ each node
for e ∈ I(v) £ each incoming hyperedge
ke ← α(v)
for u ∈ T (e) £ each antecedent node
ke ← ke β(u)
x ← x + (ke xe )
ˆ
ˆ
ˆ ˆ
return k, x

Figure 4: If every hyperedge speciﬁes a weight ke , xe in
some expectation semiring EK,X , then this inside-outside algorithm is a more efﬁcient alternative to Figure 2 for computˆ ˆ
ing the total weight k, x of the hypergraph, especially if the
xe are vectors. First, at lines 2–3, the inside and outside alˆ
gorithms are run using only the ke weights, obtaining only k
(without x) but also obtaining all inside and outside weights
ˆ
β, α ∈ K as a side effect. Then the second component x of
ˆ
the total weight is accumulated in lines 5–11 as a linear combination of all the xe values, namely x =
ˆ
e ke xe , where
ke is computed at lines 8–10 using α and β weights. The linear coefﬁcient ke is the “exclusive weight” for hyperedge e,
meaning that the product ke ke is the total weight in K of all
derivations d ∈ D that include e.

is that D is a discrete sample space (consisting
of all derivations in the hypergraph), p is a measure over this space, and r, s : D → R are random variables. Then r/Z and s/Z give the expectations of these random variables, and t/Z gives
the expectation of their product t = rs, so that
t/Z − (r/Z)(s/Z) gives their covariance.
Example 1: r(d) is the length of the translation
corresponding to derivation d (arranged by setting
re to the number of target-side terminal words in
the SCFG rule associated with e). Then r/Z is
the expected hypothesis length. Example 2: r(d)
evaluates the loss of d compared to a reference
translation, using some additively decomposable
loss function. Then r/Z is the risk (expected loss),
which is useful in minimum-risk training. Example 3: r(d) is the number of times that a certain
feature ﬁres on d. Then r/Z is the expected feature count, which is useful in maximum-likelihood
training. We will generalize later in Section 4 to
allow r(d) to be a vector of features. Example 4:
Suppose r(d) and s(d) are identical and both compute hypothesis length. Then the second-order
statistic t/Z is the second moment of the length
distribution, so the variance of hypothesis length
can be found as t/Z − (r/Z)2 .

3.2

Computing the Quantities

We will use the semiring parsing framework to
compute the quantities (1)–(4). Although each is a
sum over exponentially many derivations, we will
compute it in O(|HG|) time using Figure 2.
In the simplest case, let K = R, +, ×, 0, 1 ,
and deﬁne ke = pe for each hyperedge e. Then
the algorithm of Figure 2 reduces to the classical
inside algorithm (Baker, 1979) and computes Z.
Next suppose K is the expectation semiring
(Eisner, 2002), shown in Table 1. Deﬁne ke =
pe , pe re . Then Figure 2 will return Z, r .
Finally, suppose K is our novel second-order
expectation semiring, which we introduce in Table 2. Deﬁne ke = pe , pe re , pe se , pe re se .
Then the algorithm of Figure 2 returns Z, r, s, t .
Note that, to compute t, one cannot simply construct a ﬁrst-order expectation semiring by deﬁndef
ing t(d) = r(d)s(d) because t(d), unlike r(d)
and s(d), is not additively decomposable over the
hyperedges in d.5 Also, when r(d) and s(d) are
identical, the second-order expectation semiring
allows us to compute variance as t/Z − (r/Z)2 ,
which is why we may call our second-order expectation semiring the variance semiring.
3.3

Correctness of the Algorithms

To prove our claim about the ﬁrst-order expectation semiring, we ﬁrst observe that the deﬁnitions
in Table 1 satisfy the semiring axioms. The
reader can easily check these axioms (as well
as the closure axioms in footnote 2). With a
valid semiring, we then simply observe that Figure 2 returns the total weight d∈D e∈d ke =
d∈D p(d), p(d)r(d) = Z, r . It is easy to
verify the second equality from the deﬁnitions
of ⊕, Z, and r. The ﬁrst equality requires
proving that
=
p(d), p(d)r(d)
e∈d ke
from the deﬁnitions of ⊗, ke , p(d), and r(d).
The main intuition is that ⊗ can be used to
build up p(d), p(d)r(d) inductively from the
ke : if d decomposes into two disjoint subderivations d1 , d2 , then p(d), p(d)r(d)
=
p(d1 )p(d2 ), p(d1 )p(d2 )(r(d1 ) + r(d2 ))
=
p(d1 ), p(d1 )r(d1 ) ⊗ p(d2 ), p(d2 )r(d2 ) . The
base cases are where d is a single hyperedge e, in
which case p(d), p(d)r(d) = ke (thanks to our
choice of ke ), and where d is empty, in which case
5

However, in a more tricky way, the second-order expectation semiring can be constructed using the ﬁrst-order expectation semiring, as will be seen in Section 4.3.

p, r
p1 p2 , p1 r2 + p2 r1
p1 + p2 , r1 + r2
p∗ , p∗ p∗ r
0, 0
1, 0

Element
p1 , r1 ⊗ p2 , r2
p1 , r1 ⊕ p2 , r2
p, r ∗
0
1

4

Table 1: Expectation semiring: Each element in the semiring is a pair p, r . The second and third rows deﬁne the
operations between two elements p1 , r1 and p2 , r2 , and
the last two rows deﬁne the identities. Note that the multiplicative identity 1 has an r component of 0.

sa+b
+ +
+
+ +
- +
- -

a+b

+ log(1 + e
+ log(1 − e
a + log(1 − e
a + log(1 + e
a
a

b− a

)
)
a)
a)

b− a
b−
b−

sa·b
+
+

a·b

+
+
a+
a+
a

b

a

b
b
b

Table 3: Storing signed values in log domain: each value a
(= sa e a ) is stored as a pair sa , a where sa and a are the
sign bit of a and natural logarithm of |a|, respectively. This
table shows the operations between two values a = sa 2 a
and b = sb 2 b , assuming a ≥ b . Note: log(1 + x) (where
|x| < 1) should be computed by the Mercator series x −
x2 /2+x3 /3−· · · , e.g., using the math library function log1p.

p(d), p(d)r(d) = 1. It follows by induction that
p(d), p(d)r(d) = e∈d ke .
The proof for the second-order expectation semiring is similar.
In particular,
one mainly needs to show that
e∈d ke =
p(d), p(d)r(d), p(d)s(d), p(d)r(d)s(d) .
3.4

Preventing Underﬂow/Overﬂow

In Tables 1–2, we do not discuss how to store p, r,
s, and t. If p is a probability, it often suffers from
the underﬂow problem. r, s, and t may suffer from
both underﬂow and overﬂow problems, depending
on their scales.
To address these, we could represent p in the
log domain as usual. However, r, s, and t can be
positive or negative, and we cannot directly take
the log of a negative number. Therefore, we represent real numbers as ordered pairs. Speciﬁcally, to
represent a = sa e a , we store sa , a , where the
sa ∈ {+, −} is the sign bit of a and the ﬂoatingpoint number a is the natural logarithm of |a|.6
Table 3 shows the “·” and “+”operations.
6

In this section, we generalize beyond the above
case where p, r, s are R-valued. In general, p may
be an element of some other semiring, and r and s
may be vectors or other algebraic objects.
When r and s are vectors, especially highdimensional vectors, the basic “inside algorithm”
of Figure 2 will be slow. We will show how to
speed it up with an “inside-outside algorithm.”
4.1

a·b

a+b

sa sb

Generalizations and Speedups

An alternative that avoids log and exp is to store a =
fa 2ea as fa , ea , where fa is a ﬂoating-point number and
ea is a sufﬁciently wide integer. E.g., combining a 32-bit
fa with a 32-bit ea will in effect extend fa ’s 8-bit internal
exponent to 32 bits by adding ea to it. This gives much more
dynamic range than the 11-bit exponent of a 64-bit doubleprecision ﬂoating-point number, if vastly less than in Table 3.

Allowing Feature Vectors and More

In general, for P, R, S, T , we can deﬁne the
ﬁrst-order expectation semiring EP,R = P ×
R, ⊕, ⊗, 0, 1 and the second-order expectation
semiring EP,R,S,T = P × R × S × T, ⊕, ⊗, 0, 1 ,
using the deﬁnitions from Tables 1–2. But do
those deﬁnitions remain meaningful, and do they
continue to satisfy the semiring axioms?
Indeed they do when P = R, R = Rn , S =
Rm , T = Rn×m , with rs deﬁned as the outer
product rsT (a matrix) where sT is the transpose of s. In this way, the second-order semiring
EP,R,S,T lets us take expectations of vectors and
outer products of vectors. So we can ﬁnd means
and covariances of any number of linearly decomposable quantities (e.g., feature counts) deﬁned on
the hypergraph.
We will consider some other choices in Sections 4.3–4.4 below. Thus, for generality, we conclude this section by stating the precise technical
conditions needed to construct EP,R and EP,R,S,T :
• P is a semiring
• R is a P -module (e.g, a vector space), meaning that it comes equipped with an associative
and commutative addition operation with an
identity element 0, and also a multiplication
operation P ×R → R, such that p(r1 +r2 ) =
pr1 +pr2 , (p1 +p2 )r = p1 r +p2 r, p1 (p2 r) =
(p1 p2 )r
• S and T are also P -modules
• there is a multiplication operation R × S →
T that is bilinear, i.e., (r1 + r2 )s = r1 s +
r2 s, r(s1 + s2 ) = rs1 + rs2 , (pr)s = p(rs),
r(ps) = p(rs)
As a matter of notation, note that above and in
Tables 1–2, we overload “+” to denote any of
the addition operations within P, R, S, T ; overload “0” to denote their respective additive identities; and overload concatenation to denote any
of the multiplication operations within or between

Element
p1 , r1 , s1 , t1 ⊗ p2 , r2 , s2 , t2
p1 , r1 , s1 , t1 ⊕ p2 , r2 , s2 , t2
p, r, s, t ∗
0
1

p, r, s, t
p1 p2 , p1 r2 + p2 r1 , p1 s2 + p2 s1 ,
p1 t2 + p2 t1 + r1 s2 + r2 s1
p1 + p2 , r1 + r2 , s1 + s2 , t1 + t2
p∗ , p∗ p∗ r, p∗ p∗ s, p∗ p∗ (p∗ rs + p∗ rs + t)
0, 0, 0, 0
1, 0, 0, 0

Table 2: Second-order expectation semiring (variance semiring): Each element in the semiring is a 4-tuple p, r, s, t . The
second and third rows deﬁne the operations between two elements p1 , r1 , s1 , t1 and p2 , r2 , s2 , t2 , while the last two rows
deﬁne the identities. Note that the multiplicative identity 1 has r,s and t components of 0.

P, R, S, T . “1” refers to the multiplicative identity
of P . We continue to use distinguished symbols
⊕, ⊗, 0, 1 for the operations and identities in our
“main semiring of interest,” EP,R or EP,R,S,T .
To compute equations (1)–(4) in this more general setting, we must still require multiplicative
def
or additive decomposability, deﬁning p(d) =
def
def
e∈d pe , r(d) =
e∈d re , s(d) =
e∈d se as before. But the and
operators here now denote
appropriate operations within P , R, and S respectively (rather than the usual operations within R).
4.2

Inside-Outside Speedup for First-Order
Expectation Semirings

Under the ﬁrst-order expectation semiring ER,Rn ,
the inside algorithm of Figure 2 will return Z, r
where r is a vector of n feature expectations.
However, Eisner (2002, section 5) observes that
this is inefﬁcient when n is large. Why? The
inside algorithm takes the trouble to compute an
inside weight β(v) ∈ R × Rn for each node v
in the hypergraph (or lattice). The second component of β(v) is a presumably dense vector of
all features that ﬁre in all subderivations rooted at
node v. Moreover, as β(v) is computed in lines
3–8, that vector is built up (via the ⊗ and ⊕ operations of Table 1) as a linear combination of other
dense vectors (the second components of the various β(u)). These vector operations can be slow.
A much more efﬁcient approach (usually) is
the traditional inside-outside algorithm (Baker,
1979).7 Figure 4 generalizes the inside-outside
algorithm to work with any expectation semiring
EK,X .8 We are given a hypergraph HG whose
edges have weights ke , xe in this semiring (so
7

Note, however, that the expectation semiring requires
only the forward/inside pass to compute expectations, and
thus it is more efﬁcient than the traditional inside-outside algorithm (which requires two passes) if we are interested in
computing only a small number of quantities.
8
This follows Eisner (2002), who similarly generalized
the forward-backward algorithm.

now ke ∈ K denotes only part of the edge weight,
not all of it). I NSIDE -O UTSIDE(HG, K, X) ﬁnds
ˆ ˆ
d∈D
e∈d ke , xe , which has the form k, x .
But, I NSIDE(HG, EK,X ) could accomplish the
same thing. So what makes the inside-outside algorithm more efﬁcient? It turns out that x can
ˆ
be found quickly as a single linear combination
e ke xe of just the feature vectors xe that appear on individual hyperedges—typically a sum
of very sparse vectors! And the linear coefﬁcients
ˆ
ke , as well as k, are computed entirely within the
cheap semiring K. They are based on β and α values obtained by ﬁrst running I NSIDE(HG, K) and
O UTSIDE(HG, K), which use only the ke part of
the weights and ignore the more expensive xe .
It is noteworthy that the expectation semiring is
not used at all by Figure 4. Although the return
ˆ ˆ
value k, x is in the expectation semiring, it is
built up not by ⊕ and ⊗ but rather by computing
ˆ
k and x separately. One might therefore wonder
ˆ
why the expectation semiring and its operations
are still needed. One reason is that the input to
Figure 4 consists of hyperedge weights ke , xe in
the expectation semiring—and these weights may
well have been constructed using ⊗ and ⊕. For
example, Eisner (2002) uses ﬁnite-state operations
such as composition, which do combine weights
entirely within the expectation semiring before
their result is passed to the forward-backward algorithm. A second reason is that when we work
with a second-order expectation semiring in Secˆ
tion 4.4 below, the k, β, and α values in Figure 4
will turn out to be elements of a ﬁrst-order expectation semiring, and they must still be constructed
by ﬁrst-order ⊗ and ⊕, via calls to Figures 2–3.
Why does inside-outside work? Whereas the
inside algorithm computes
d∈D
e∈d in any
semiring, the inside-outside algorithm exploits
the special structure of an expectation semiring. By that semiring’s deﬁnitions of ⊕ and ⊗
(Table 1),
d∈D
e∈d ke , xe can be found as

)xe .
ˆ is found
The ﬁrst component (giving k)
by calling the inside algorithm on just the
ke part of the weights.
The second component (giving x) can be rearranged into
ˆ
e
d: e∈d ( e ∈d,e =e ke )xe =
e ke xe , where
d∈D

e∈d ke ,

d∈D

e∈d (

e ∈d,e =e ke

def

ke = d: e∈d ( e ∈d,e =e ke ) is found from β, α.
The application described at the start of this
subsection is the classical inside-outside algodef
rithm. Here ke , xe = pe , pe re , and the alˆ ˆ
gorithm returns k, x = Z, r . In fact, that
x = r can be seen directly: r = d p(d)r(d) =
ˆ
=
d p(d)( e∈d re ) =
e
d: e∈d p(d)re
ˆ
e ke xe = x. This uses the fact
e (ke ke )re =
that ke ke = d: e∈d p(d).

Z, r , s, t , more quickly than the inside algorithm of Figure 2 computed Z, r, s, t .
Figure 4 in this case will run the inside and
outside algorithms in the semiring EP,R , so that
ˆ
ke , k, α, β, and ke will now be elements of P × R
(not just elements of P as in the ﬁrst-order case).
Finally it ﬁnds x = e ke xe , where xe ∈ S × T .9
ˆ
This is a particularly effective speedup over
the inside algorithm when R consists of scalars
(or small vectors) whereas S, T are sparse highdimensional vectors. We will see exactly this case
in our experiments, where our weights p, r, s, t
denote (probability, risk, gradient of probability,
gradient of risk), or (probability, entropy, gradient
of probability, gradient of entropy).

4.3 Lifting Trick for Second-Order Semirings

5

We now observe that the second-order expectation
semiring EP,R,S,T can be obtained indirectly by
nesting one ﬁrst-order expectation semiring inside
another! First “lift” P to obtain the ﬁrst-order exdef
pectation semiring K = EP,R . Then lift this a second time to obtain the “nested” ﬁrst-order expectation semiring EK,X = E(EP,R ),(S×T ) , where we

In Sections 3.2 and 4.1, we saw how our semirings
helped ﬁnd the sum Z of all p(d), and compute
expectations r, s, t of r(d), s(d), and r(d)s(d).
It turns out that these semirings can also compute ﬁrst- and second-order partial derivatives of
all the above results, with respect to a parameter
vector θ ∈ Rm . That is, we ask how they are
affected when θ changes slightly from its current
value. The elementary values pe , re , se are now
assumed to implicitly be functions of θ.
def
Case 1: Recall that Z =
d p(d) is computed by I NSIDE(HG, R) if each hyperedge e has
weight pe . “Lift” this weight to pe , pe , where
pe ∈ Rm is a gradient vector. Now Z, Z will
be returned by I NSIDE(HG, ER,Rm )— or, more
efﬁciently, by I NSIDE -O UTSIDE(HG, R, Rm ).
Case 2:
To differentiate a second
time,
“lift” the above weights again
to
obtain
pe , pe , pe , pe
=
pe , pe , pe , 2 pe , where 2 pe ∈ Rm×m
is the Hessian matrix of second-order mixed
partial derivatives.
These weights are in a
second-order expectation semiring.10
Now

def

equip X = S × T with the operations s1 , t1 +
def
def
s2 , t2 = s1 + s2 , t1 + t2 and p, r s, t =
ps, pt + rs . The resulting ﬁrst-order expectation
semiring has elements of the form p, r , s, t .
Table 4 shows that it is indeed isomorphic to
EP,R,S,T , with corresponding elements p, r, s, t .
This construction of the second-order semiring
as a ﬁrst-order semiring is a useful bit of abstract
algebra, because it means that known properties
of ﬁrst-order semirings will also apply to secondorder ones. First of all, we are immediately guaranteed that the second-order semiring satisﬁes the
semiring axioms. Second, we can directly apply
the inside-outside algorithm there, as we now see.
4.4

Inside-Outside Speedup for
Second-Order Expectation Semirings

Given a hypergraph weighted by a second-order
expectation semiring EP,R,S,T . By recasting this
as the ﬁrst-order expectation semiring EK,X where
K = EP,R and X = (S × T ), we can again apply I NSIDE -O UTSIDE(HG, K, X) to ﬁnd the total
weight of all derivations.
For example, to speed up Section 3.2, we
may deﬁne ke , xe = pe , pe re , pe se , pe re se
for each hyperedge e. Then the inside-outside
ˆ ˆ
algorithm of Figure 4 will compute k, x =

Finding Gradients on Hypergraphs

9
Figure 4 was already proved generally correct in Section 4.2. To understand more speciﬁcally how s, t gets
computed, observe in analogy to the end of Section 4.2 that
s, t = d p(d)s(d), p(d)r(d)s(d)
= d p(d), p(d)r(d) s(d), 0
= d p(d), p(d)r(d)
e∈d se , 0
= e d: e∈d p(d), p(d)r(d) se , 0
= e (ke ke ) se , 0 = e ke pe , pe re se , 0
= e ke pe se , pe re se = e ke xe = x.
ˆ
10
Modulo the trivial isomorphism from p, r , s, t to
p, r, s, t (see Section 4.3), the intended semiring both here
and in Case 3 is the one that was deﬁned at the start of Section 4.1, in which r, s are vectors and their product is deﬁned

p1 , r1 , s1 , t1

⊕ p2 , r2 , s2 , t2
⊗ p2 , r2 , s2 , t2
=

p1 , r1 + p2 , r2 , s1 , t1 + s2 , t2

=
p1 , r1 , s1 , t1

=

p1 + p2 , r1 + r2 , s1 + s2 , t1 + t2

=

p1 , r1 p2 , r2 , p1 , r1 s2 , t2 + p2 , r2 s1 , t1

p1 p2 , p1 r2 + p2 r1 , p1 s2 + p2 s1 , p1 t2 + p2 t1 + r1 s2 + r2 s1

Table 4: Constructing second-order expectation semiring as ﬁrst-order. Here we show that the operations in EK,X are
def
def
isomorphic to Table 2’s operations in EP,R,S,T , provided that K = EP,R and X = S × T is a K-module, in which addition is
def
def
deﬁned by s1 , t1 + s2 , t2 = s1 + s2 , t1 + t2 , and left-multiplication by K is deﬁned by p, r s, t = ps, pt + rs .

Z, Z, 2 Z
will be returned by
I NSIDE(HG, ER,Rm ,Rm ,Rm×m ), or more efﬁciently by I NSIDE -O UTSIDE(HG, ER,Rm , Rm ×
Rm×m ).
Case 3: Our experiments will need to ﬁnd expectations and their partial derivatives. Recall that
Z, r is computed by I NSIDE(HG, ER,Rn ) when
the edge weights are pe , pe re with re ∈ Rn . Lift
these weights to
pe , pe re , pe , pe re
=
pe , pe re , pe , ( pe )re
+
pe ( re ) .
Now
Z, r, Z, r
will
be
returned
by
I NSIDE(HG, ER,Rn ,Rm ,Rn×m )
or
by
m × Rn×m ).11
n, R
I NSIDE -O UTSIDE(HG, ER,R
Z,

5.1 What Connects Gradients to Expectations?
In Case 1, we claimed that the same algorithm
will compute either gradients Z, Z or expectations Z, r , if the hyperedge weights are set to
pe , pe or pe , pe re respectively.12 This may
seem wonderful and mysterious. We now show in
two distinct ways why this follows from our setup
of Section 3.1. At the end, we derive as a special
case the well-known relationship between gradients and expectations in log-linear models.
From Expectations to Gradients One perspective is that our semiring fundamentally ﬁnds expectations. Thus, we must be ﬁnding Z by formulating it as a certain expectation r. Specifically, Z =
d p(d) =
d p(d) =
to be rsT , a matrix. However, when using this semiring to
compute second derivatives (Case 2) or covariances, one may
exploit the invariant that r = s, e.g., to avoid storing s and to
compute r1 s2 + s1 r2 in multiplication simply as 2 · r1 r2 .
11
Or, if n > m, it is faster to instead use
I NSIDE -O UTSIDE(HG, ER,Rm , Rn × Rm×n ), swapping the
second and third components of the 4-tuple and transposing the matrix in the fourth component.
Algebraically, this changes nothing because ER,Rn ,Rm ×Rn×m and
ER,Rm ,Rn ×Rm×n are isomorphic, thanks to symmetries in Table 2. This method computes the expectation of the gradient
rather than the gradient of the expectation—they are equal.
12
Cases 2–3 relied on the fact that this relationship still
holds even when the scalars Z, pe ∈ R are replaced by more
complex objects that we wish to differentiate. Our discussion below sticks to the scalar case for simplicity, but would
generalize fairly straightforwardly. Pearlmutter and Siskind
(2007) give the relevant generalizations of dual numbers.

= r, provided that r(d) =
d p(d)r(d)
( p(d))/p(d). That can be arranged by deﬁning
def
re = ( pe )/pe .13 So that is why the input weights
pe , pe re take the form pe , pe .
From Gradients to Expectations An alternative perspective is that our semiring fundamentally ﬁnds gradients. Indeed, pairs like p, p
have long been used for this purpose (Clifford,
1873) under the name “dual numbers.” Operations on dual numbers, including those in Table 1, compute a result in R along with its gradient. For example, our ⊗ multiplies dual numbers,
since p1 , p1 ⊗ p2 , p2 = p1 p2 , p1 ( p2 ) +
( p1 )p2 = p1 p2 , (p1 p2 ) . The inside algorithm thus computes both Z and Z in a single
“forward” or “inside” pass—known as automatic
differentiation in the forward mode. The insideoutside algorithm instead uses the reverse mode
(a.k.a. back-propagation), where a separate “backward” or “outside” pass is used to compute Z.
How can we modify this machinery to produce expectations r given some arbitrary re
¯
of interest?
Automatic differentiation may
be used on any function (e.g., a neural net),
but for our simple sum-of-products function
Z, it happens that Z =
( d e pe ) =
( e ∈d,e =e pe ) pe . Our trick is to
d
e∈d
surreptitiously replace the
pe in the input
weights pe , pe with pe re . Then the output
changes similarly: the algorithms will instead
ﬁnd
d
e∈d ( e ∈d,e =e pe )pe re , which reduces to d e∈d p(d)re = d p(d) e∈d re =
¯
d p(d)r(d) = r .
Log-linear Models as a Special Case Replacing pe with pe re is unnecessary if pe already
equals pe re . That is the case in log-linear models,
def
where pe = exp(re · θ) for some feature vector re
associated with e. So there, Z already equals
r—yielding a key useful property of log-linear
¯
13

Proof: r(d) =
e∈d re =
log pe =
e∈d log pe =
log p(d) = ( p(d))/p(d).
e∈d

e∈d (

log

pe )/pe =
e∈d pe =

models, that log Z = ( Z)/Z = r/Z, the vec¯
tor of feature expectations (Lau et al., 1993).

6

Practical Applications

Given a hypergraph HG whose hyperedges e are
annotated with values pe . Recall from Section 3.1
that this deﬁnes a probability distribution over all
derivations d in the hypergraph, namely p(d)/Z
def
where p(d) = e∈d pe .
6.1

First-Order Expectation Semiring ER,R

In Section 3, we show how to compute the expected hypothesis length or expected feature
counts, using the algorithm of Figure 2 with a
ﬁrst-order expectation semiring ER,R . In general,
given hyperedge weights pe , pe re , the algorithm
computes Z, r and thus r/Z, the expectation of
def
r(d) = e∈d re . We now show how to compute a
few other quantities by choosing re appropriately.
Entropy on a Hypergraph The entropy of the
distribution of derivations in a hypergraph14 is
H(p) = −

(p(d)/Z) log(p(d)/Z)

(5)

where the ﬁrst term Zq can be computed using
the inside algorithm with hyperedge weights qe ,
and the numerator and denominator of the second term using an expectation semiring with hydef
peredge weights pe , pe re with re = log qe .
The KL divergence to p from q can be computed
as KL(p q) = H(p, q) − H(p).
Expected Loss (Risk) Given a reference sentence y ∗ , the expected loss (i.e., Bayes risk) of the
hypotheses in the hypergraph is deﬁned as,
(p(d)/Z)L(Y(d), y ∗ )

R(p) =
d∈D

where Y(d) is the target yield of d and L(y, y ∗ ) is
the loss of the hypothesis y with respect to the reference y ∗ . The popular machine translation metric, BLEU (Papineni et al., 2001), is not additively
decomposable, and thus we are not able to compute the expected loss for it. Tromble et al. (2008)
develop the following loss function, of which a linear approximation to BLEU is a special case,
L(y, y ∗ ) = −(θ0 |y| +

1
Z

1
= log Z −
Z

p(d) log p(d)
d∈D

p(d)r(d) = log Z −
d∈D

r
Z

def

provided that we deﬁne re = log pe (so that
r(d) = e∈d re = log p(d)). Of course, we can
compute Z, r as explained in Section 3.2.
Cross-Entropy and KL Divergence We may
be interested in computing the cross-entropy or
KL divergence between two distributions p and q.
For example, in variational decoding for machine
translation (Li et al., 2009b), p is a distribution
represented by a hypergraph, while q, represented
by a ﬁnite state automaton, is an approximation to
p. The cross entropy between p and q is deﬁned as
H(p, q) = −

(p(d)/Zp ) log(q(d)/Zq )

(6)

d∈D

= log Zq −
= log Zq −
14

1
Zp
1
Zp

p(d) log q(d)
d∈D

p(d)r(d) = log Zq −
d∈D

r
Zp

Unfortunately, it is intractable to compute the entropy of
the distribution over strings (each string’s probability is a sum
over several derivations). But Li et al. (2009b, section 5.4) do
estimate the gap between derivational and string entropies.

θw #w (y)δw (y∗)) (8)
w∈N

d∈D

= log Z −

(7)

where w is an n-gram type, N is a set of n-gram
types with n ∈ [1, 4], #w (y) is the number of occurrence of the n-gram w in y, δw (y ∗ ) is an indicator to check if y ∗ contains at least one occurrence
of w, and θn is the weight indicating the relative
importance of an n-gram match. If the hypergraph
is already annotated with n-gram (n ≥ 4) language model states, this loss function is additively
def
decomposable. Using re = Le where Le is the
loss for a hyperedge e, we compute the expected
loss,
R(p) =
6.2

d∈D

p(d)L(Y(d), y ∗ )
r
=
Z
Z

(9)

Second-Order Expectation Semirings

With second-order expectation semirings, we can
compute from a hypergraph the expectation and
variance of hypothesis length; the feature expectation vector and covariance matrix; the Hessian
(matrix of second derivatives) of Z; and the gradients of entropy and expected loss. The computations should be clear from earlier discussion. Below we compute gradient of entropy or Bayes risk.
Gradient of Entropy or Risk It is easy to see
that the gradient of entropy (5) is
H(p) =

Z
Z r−r Z
−
Z
Z2

(10)

We may compute Z, r, Z, r as explained in Case 3 of Section 5 by using
def
def
ke = pe , pe re , pe , ( pe )re + pe re =
pe , pe log pe , pe , (1 + log pe ) pe , where pe
depends on the particular parameterization of the
model (see Section 7.1 for an example).
Similarly, the gradient of risk of (9) is
R(p) =

Z r−r Z
Z2

(11)
def

We may compute Z, r, Z, r using ke =
pe , pe Le , pe , Le pe .

7

Minimum-Risk Training for MT

We now show how we improve the training of a
Hiero MT model by optimizing an objective function that includes entropy and risk. Our objective
function could be computed with a ﬁrst-order expectation semiring, but computing it along with its
gradient requires a second-order one.
7.1

The Model p

We assume a globally normalized linear model
for its simplicity. Each derivation d is scored by
def

score(d) = Φ(d) · θ =

Φi (d) θi

(12)

i

where Φ(d) ∈ Rm is a vector of features of d. We
then deﬁne the unnormalized distribution p(d) as
p(d) = exp(γ · score(d))

where the “temperature” T starts high and is explicitly decreased as optimization proceeds.
7.3

Minimum-Risk Training

Adjusting θ or γ changes the distribution p. Minimum error rate training (MERT) (Och, 2003) tries
to tune θ to minimize the BLEU loss of a decoder
that chooses the most probable output according
to p. (γ has no effect.) MERT’s specialized linesearch addresses the problem that this objective
function is piecewise constant, but it does not scale
to a large number of parameters.
Smith and Eisner (2006) instead propose a differentiable objective that can be optimized by gradient descent: the Bayes risk R(p) of (7). This is
the expected loss if one were (hypothetically) to
use a randomized decoder, which chooses a hypothesis d in proportion to its probability p(d). If
entropy H(p) is large (e.g., small γ), the Bayes risk

Gradient Descent Optimization

Solving (14) for a given T requires computing the
entropy H(p) and risk R(p) and their gradients
with respect to θ and γ. Smith and Eisner (2006)
followed MERT in constraining their decoder to
only an n-best list, so for them, computing these
quantities did not involve dynamic programming.
We compare those methods to training on a hypergraph containing exponentially many hypotheses. In this condition, we need our new secondorder semiring methods and must also approximate BLEU (during training only) by an additively
decomposable loss (Tromble et al., 2008).15
Our algorithms require that p(d) of (13) is multiplicatively decomposable. It sufﬁces to deﬁne
def
Φ(d) =
e∈d Φe , so that all features are local
to individual hyperedges; the vector Φe indicates
which features ﬁre on hyperedge e. Then score(d)
of (12) is additively decomposable:

(13)

where the scale factor γ adjusts how sharply the
distribution favors the highest-scoring hypotheses.
7.2

is smooth and has few local minima. Thus, Smith
and Eisner (2006) try to avoid local minima by
starting with large H(p) and decreasing it gradually during optimization. This is called deterministic annealing (Rose, 1998). As H(p) → 0 (e.g.,
large γ), the Bayes risk does approach the MERT
objective (i.e. minimizing 1-best error).The objective is
minimize R(p) − T · H(p)
(14)

score(d) =

Φe · θ

scoree =
e∈d

(15)

e∈d

We can then set pe = exp(γ · scoree ), and pe =
γpe Φ(e), and use the algorithms described in Section 6 to compute H(p) and R(p) and their gradients with respect to θ and γ.16
15

Pauls et al. (2009) concurrently developed a method to
maximize the expected n-gram counts on a hypergraph using
gradient descent. Their objective is similar to the minimum
risk objective (though without annealing), and their gradient
descent optimization involves in algorithms in computing expected feature/n-gram counts as well as expected products of
features and n-gram counts, which can be viewed as instances
of our general algorithms with ﬁrst- and second-order semirings. They focused on tuning only a small number (i.e. nine)
of features as in a regular MERT setting, while our experiments involve both a small and a large number of features.
16
It is easy to verify that the gradient of a function f (e.g.
entropy or risk) with respect to γ can be written as a weighted
sum of gradients with respect to the feature weights θi , i.e.
∂f
1
=
∂γ
γ

θi ×
i

∂f
∂θi

(16)

7.4
7.4.1

Experimental Results
Experimental Setup

We built a translation model on a corpus for
IWSLT 2005 Chinese-to-English translation task
(Eck and Hori, 2005), which consists of 40k pairs
of sentences. We used a 5-gram language model
with modiﬁed Kneser-Ney smoothing, trained on
the bitext’s English using SRILM (Stolcke, 2002).
7.4.2

Tuning a Small Number of Features

We ﬁrst investigate how minimum-risk training
(MR), with and without deterministic annealing
(DA), performs compared to regular MERT. MR
without DA just ﬁxes T = 0 and γ = 1 in (14).
All MR or MR+DA uses an approximated BLEU
(Tromble et al., 2008) (for training only), while
MERT uses the exact corpus BLEU in training.
The ﬁrst ﬁve rows in Table 5 present the results
by tuning the weights of ﬁve features (θ ∈ R5 ). We
observe that MR or MR+DA performs worse than
MERT on the dev set. This may be mainly because
MR or MR+DA uses an approximated BLEU while
MERT doesn’t. On the test set, MR or MR+DA
on an n-best list is comparable to MERT. But our
new approach, MR or MR+DA on a hypergraph,
does consistently better (statistically signiﬁcant)
than MERT, despite approximating BLEU.17
Did DA help? For both n-best and hypergraph,
MR+DA did obtain a better BLEU score than plain
MR on the dev set.18 This shows that DA helps
with the local minimum problem, as hoped. However, DA’s improvement on the dev set did not
transfer to the test set.
7.4.3

Tuning a Large Number of Features

MR (with or without DA) is scalable to tune a
large number of features, while MERT is not. To
achieve competitive performance, we adopt a forest reranking approach (Li and Khudanpur, 2009;
Huang, 2008). Speciﬁcally, our training has two
stages. In the ﬁrst stage, we train a baseline system
as usual. We also ﬁnd the optimal feature weights
for the ﬁve features mentioned before, using the
method of MR+DA operating on a hypergraph. In
the second stage, we generate a hypergraph for
each sentence in the training data (which consists
of about 40k sentence pairs), using the baseline
17

Pauls et al. (2009) concurrently observed a similar pattern (i.e., MR performs worse than MERT on the dev set, but
performs better on a test set).
18
We also veriﬁed that MR+DA found a better objective
value (i.e., expected loss on the dev set) than MR.

NEW !
NEW !
NEW !

Training scheme
MERT (Nbest, small)
MR (Nbest, small)
MR+DA (Nbest, small)
MR (hypergraph, small)
MR+DA (hypergraph, small)
MR (hypergraph, large)

dev
42.6
40.8
41.6
41.3
41.9
42.3

test
47.7
47.7
47.8
48.4
48.3
48.7

Table 5: BLEU scores on the Dev and test sets under different
training scenarios. In the “small” model, ﬁve features (i.e.,
one for the language model, three for the translation model,
and one for word penalty) are tuned. In the “large” model,
21k additional unigram and bigram features are used.

system. In this stage, we add 21k additional unigram and bigram target-side language model features (cf. Li and Khudanpur (2008)). For example,
a speciﬁc bigram “the cat” can be a feature. Note
that the total score by the baseline system is also
a feature in the second-stage model. With these
features and the 40k hypergraphs, we run the MR
training to obtain the optimal weights.
During test time, a similar procedure is followed. For a given test sentence, the baseline system ﬁrst generates a hypergraph, and then the hypergraph is reranked by the second-stage model.
The last row in Table 5 reports the BLEU scores.
Clearly, adding more features improves (statistically signiﬁcant) the case with only ﬁve features.
We plan to incorporate more informative features
described by Chiang et al. (2009).19

8

Conclusions

We presented ﬁrst-order expectation semirings
and inside-outside computation in more detail
than (Eisner, 2002), and developed extensions to
higher-order expectation semirings. This enables
efﬁcient computation of many interesting quantities over the exponentially many derivations encoded in a hypergraph: second derivatives (Hessians), expectations of products (covariances), and
expectations such as risk and entropy along with
their derivatives. To our knowledge, algorithms
for these problems have not been presented before.
Our approach is theoretically elegant, like other
work in this vein (Goodman, 1999; Lopez, 2009;
Gimpel and Smith, 2009). We used it practically to
enable a new form of minimum-risk training that
improved Chinese-English MT by 1.0 BLEU point.
Our implementation will be released within the
open-source MT toolkit Joshua (Li et al., 2009a).
19

Their MIRA training tries to favor a speciﬁc oracle
translation—indeed a speciﬁc tree—from the (pruned) hypergraph. MR does not commit to such an arbitrary choice.

References
J. K. Baker. 1979. Trainable grammars for speech
recognition. In Jared J. Wolf and Dennis H. Klatt,
editors, Speech Communication Papers Presented at
the 97th Meeting of the Acoustical Society of America, MIT, Cambridge, MA, June.
David Chiang, Kevin Knight, and Wei Wang. 2009.
11,001 new features for statistical machine translation. In NAACL, pages 218–226.
David Chiang. 2007. Hierarchical phrase-based translation. Computational Linguistics, 33(2):201–228.
W. K. Clifford. 1873. Preliminary sketch of biquaternions. Proceedings of the London Mathematical Society, 4:381–395.
Matthias Eck and Chiori Hori. 2005. Overview of the
IWSLT 2005 evaluation campaign. In In Proc. of the
International Workshop on Spoken Language Translation.
Jason Eisner, Eric Goldlust, and Noah A. Smith.
2005. Compiling comp ling: Practical weighted
dynamic programming and the Dyna language. In
HLT/EMNLP, pages 281–290.
Jason Eisner. 2002. Parameter estimation for probabilistic ﬁnite-state transducers. In ACL, pages 1–8.
Jason Eisner. 2003. Learning non-isomorphic tree
mappings for machine translation. In ACL, pages
205–208.
Michel Galley, Jonathan Graehl, Kevin Knight, Daniel
Marcu, Steve DeNeefe, Wei Wang, and Ignacio
Thayer. 2006. Scalable inference and training of
context-rich syntactic translation models. In ACL,
pages 961–968.
Giorgio Gallo, Giustino Longo, Stefano Pallottino, and
Sang Nguyen. 1993. Directed hypergraphs and applications. Discrete Appl. Math., 42(2-3):177–201.
Kevin Gimpel and Noah A. Smith. 2009. Cube
summing, approximate inference with non-local features, and dynamic programming without semirings.
In EACL, pages 318–326.
Joshua Goodman. 1999. Semiring parsing. Computational Linguistics, 25(4):573–605.
Y Grandvalet and Y Bengio. 2004. Semi-supervised
learning by entropy minimization. In NIPS, pages
529–536.
Liang Huang and David Chiang. 2005. Better k-best
parsing. In Proceedings of the 9th International
Workshop on Parsing Technologies (IWPT 2005),
Vancouver.
Liang Huang. 2008. Forest reranking: Discriminative
parsing with non-local features. In ACL, pages 586–
594.
Feng Jiao, Shaojun Wang, Chi-Hoon Lee, Russell
Greiner, and Dale Schuurmans. 2006. Semisupervised conditional random ﬁelds for improved
sequence segmentation and labeling. In ACL, pages
209–216.
Dan Klein and Christopher D. Manning. 2004. Parsing and hypergraphs. New Developments in Parsing
Technology, pages 351–372.

Raymond Lau, Ronald Rosenfeld, and Salim Roukos.
1993. Adaptive language modelling using the maximum entropy principle. In Proc. ARPA Human Language Technologies Workshop, pages 81–86.
Zhifei Li and Sanjeev Khudanpur. 2008. Large-scale
discriminative n-gram language models for statistical machine translation. In AMTA, pages 133–142.
Zhifei Li and Sanjeev Khudanpur. 2009. Forest
reranking for machine translation with the perceptron algorithm. In GALE: MT from Text. Book chapter.
Zhifei Li, Chris Callison-Burch, Chris Dyer, Juri
Ganitkevitch, Sanjeev Khudanpur, Lane Schwartz,
Wren Thornton, Jonathan Weese, and Omar. Zaidan.
2009a. Joshua: An open source toolkit for parsingbased machine translation. In WMT09, pages 26–30.
Zhifei Li, Jason Eisner, and Sanjeev Khudanpur.
2009b. Variational decoding for statistical machine
translation. In ACL.
Yang Liu, Qun Liu, and Shouxun Lin. 2006. Treeto-string alignment template for statistical machine
translation. In ACL, pages 609–616.
Adam Lopez. 2009. Translation as weighted deduction. In EACL, pages 532–540.
Franz Josef Och. 2003. Minimum error rate training in
statistical machine translation. In ACL, pages 160–
167.
Kishore Papineni, Salim Roukos, Todd Ward, and WeiJing Zhu. 2001. BLEU: A method for automatic
evaluation of machine translation. In ACL, pages
311–318.
Adam Pauls, John DeNero, and Dan Klein. 2009. Consensus training for consensus decoding in machine
translation. In EMNLP.
B. A. Pearlmutter and J. M. Siskind. 2007. Lazy multivariate higher-order forward-mode AD. In Proceedings of the 34th Annual Symposium on Principles of
Programming Languages (POPL), pages 155–160.
Fernando C. N. Pereira and David H. D. Warren. 1983.
Parsing as deduction. In ACL, pages 137–144.
Chris Quirk, Arul Menezes, and Colin Cherry. 2005.
Dependency treelet translation: Syntactically informed phrasal SMT. In ACL, pages 271–279.
Kenneth Rose. 1998. Deterministic annealing for clustering, compression, classiﬁcation, regression, and
related optimization problems. In Proceedings of
the IEEE, pages 2210–2239.
Stuart M. Shieber, Yves Schabes, and Fernando C. N.
Pereira. 1994. Principles and implementation of
deductive parsing. Journal of Logic Programming,
24:3–36.
David A. Smith and Jason Eisner. 2006. Minimum risk
annealing for training log-linear models. In ACL,
pages 787–794.
Andreas Stolcke. 2002. SRILM—an extensible language modeling toolkit. In Proceedings of the International Conference on Spoken Language Processing, pages 901–904.
Roy Tromble, Shankar Kumar, Franz Och, and Wolfgang Macherey. 2008. Lattice minimum-Bayesrisk decoding for statistical machine translation. In
EMNLP, pages 620–629.

