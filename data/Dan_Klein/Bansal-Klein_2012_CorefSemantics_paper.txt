Coreference Semantics from Web Features
Mohit Bansal and Dan Klein
Computer Science Division
University of California, Berkeley
{mbansal, klein}@cs.berkeley.edu

Abstract
To address semantic ambiguities in coreference resolution, we use Web n-gram features
that capture a range of world knowledge in a
diffuse but robust way. Speciﬁcally, we exploit short-distance cues to hypernymy, semantic compatibility, and semantic context, as
well as general lexical co-occurrence. When
added to a state-of-the-art coreference baseline, our Web features give signiﬁcant gains on
multiple datasets (ACE 2004 and ACE 2005)
and metrics (MUC and B3 ), resulting in the
best results reported to date for the end-to-end
task of coreference resolution.

1

Introduction

Many of the most difﬁcult ambiguities in coreference resolution are semantic in nature. For instance,
consider the following example:
When Obama met Jobs, the president discussed the economy, technology, and education. His election campaign is expected to [...]
For resolving coreference in this example, a system would beneﬁt from the world knowledge that
Obama is the president. Also, to resolve the pronoun his to the correct antecedent Obama, we can
use the knowledge that Obama has an election campaign while Jobs does not. Such ambiguities are
difﬁcult to resolve on purely syntactic or conﬁgurational grounds.
There have been multiple previous systems that
incorporate some form of world knowledge in coreference resolution tasks. Most work (Poesio et
al., 2004; Markert and Nissim, 2005; Yang et
al., 2005; Bergsma and Lin, 2006) addresses special cases and subtasks such as bridging anaphora,

other anaphora, deﬁnite NP reference, and pronoun
resolution, computing semantic compatibility via
Web-hits and counts from large corpora. There
is also work on end-to-end coreference resolution
that uses large noun-similarity lists (Daum´ III and
e
Marcu, 2005) or structured knowledge bases such as
Wikipedia (Yang and Su, 2007; Haghighi and Klein,
2009; Kobdani et al., 2011) and YAGO (Rahman
and Ng, 2011). However, such structured knowledge
bases are of limited scope, and, while Haghighi and
Klein (2010) self-acquires knowledge about coreference, it does so only via reference constructions and
on a limited scale.
In this paper, we look to the Web for broader if
shallower sources of semantics. In order to harness
the information on the Web without presupposing
a deep understanding of all Web text, we instead
turn to a diverse collection of Web n-gram counts
(Brants and Franz, 2006) which, in aggregate, contain diffuse and indirect, but often robust, cues to
reference. For example, we can collect the cooccurrence statistics of an anaphor with various candidate antecedents to judge relative surface afﬁnities
(i.e., (Obama, president) versus (Jobs, president)).
We can also count co-occurrence statistics of competing antecedents when placed in the context of an
anaphoric pronoun (i.e., Obama’s election campaign
versus Jobs’ election campaign).
All of our features begin with a pair of headwords from candidate mention pairs and compute
statistics derived from various potentially informative queries’ counts. We explore ﬁve major categories of semantically informative Web features,
based on (1) general lexical afﬁnities (via generic
co-occurrence statistics), (2) lexical relations (via
Hearst-style hypernymy patterns), (3) similarity of
entity-based context (e.g., common values of y for

which h is a y is attested), (4) matches of distributional soft cluster ids, and (5) attested substitutions
of candidate antecedents in the context of a pronominal anaphor.
We ﬁrst describe a strong baseline consisting of
the mention-pair model of the Reconcile system
(Stoyanov et al., 2009; Stoyanov et al., 2010) using a decision tree (DT) as its pairwise classiﬁer. To
this baseline system, we add our suite of features
in turn, each class of features providing substantial
gains. Altogether, our ﬁnal system produces the best
numbers reported to date on end-to-end coreference
resolution (with automatically detected system mentions) on multiple data sets (ACE 2004 and ACE
2005) and metrics (MUC and B3 ), achieving significant improvements over the Reconcile DT baseline
and over the state-of-the-art results of Haghighi and
Klein (2010).

2

Baseline System

Before describing our semantic Web features, we
ﬁrst describe our baseline. The core inference and
features come from the Reconcile package (Stoyanov et al., 2009; Stoyanov et al., 2010), with modiﬁcations described below. Our baseline differs most
substantially from Stoyanov et al. (2009) in using a
decision tree classiﬁer rather than an averaged linear
perceptron.
2.1

Reconcile

Reconcile is one of the best implementations of the
mention-pair model (Soon et al., 2001) of coreference resolution. The mention-pair model relies
on a pairwise function to determine whether or not
two mentions are coreferent. Pairwise predictions
are then consolidated by transitive closure (or some
other clustering method) to form the ﬁnal set of
coreference clusters (chains). While our Web features could be adapted to entity-mention systems,
their current form was most directly applicable to
the mention-pair approach, making Reconcile a particularly well-suited platform for this investigation.
The Reconcile system provides baseline features,
learning mechanisms, and resolution procedures that
already achieve near state-of-the-art results on multiple popular datasets using multiple standard metrics. It includes over 80 core features that exploit

various automatically generated annotations such as
named entity tags, syntactic parses, and WordNet
classes, inspired by Soon et al. (2001), Ng and
Cardie (2002), and Bengtson and Roth (2008). The
Reconcile system also facilitates standardized empirical evaluation to past work.1
In this paper, we develop a suite of simple semantic Web features based on pairs of mention headwords which stack with the default Reconcile features to surpass past state-of-the-art results.
2.2

Decision Tree Classiﬁer

Among the various learning algorithms that Reconcile supports, we chose the decision tree classiﬁer,
available in Weka (Hall et al., 2009) as J48, an open
source Java implementation of the C4.5 algorithm of
Quinlan (1993).
The C4.5 algorithm builds decision trees by incrementally maximizing information gain. The training data is a set of already classiﬁed samples, where
each sample is a vector of attributes or features. At
each node of the tree, C4.5 splits the data on an
attribute that most effectively splits its set of samples into more ordered subsets, and then recurses on
these smaller subsets. The decision tree can then be
used to classify a new sample by following a path
from the root downward based on the attribute values of the sample.
We ﬁnd the decision tree classiﬁer to work better
than the default averaged perceptron (used by Stoyanov et al. (2009)), on multiple datasets using multiple metrics (see Section 4.3). Many advantages have
been claimed for decision tree classiﬁers, including
interpretability and robustness. However, we suspect that the aspect most relevant to our case is that
decision trees can capture non-linear interactions between features. For example, recency is very important for pronoun reference but much less so for
nominal reference.

3

Semantics via Web Features

Our Web features for coreference resolution are simple and capture a range of diffuse world knowledge.
Given a mention pair, we use the head ﬁnder in Reconcile to ﬁnd the lexical heads of both mentions (for
1

We use the default conﬁguration settings of Reconcile
(Stoyanov et al., 2010) unless mentioned otherwise.

example, the head of the Palestinian territories is the
word territories). Next, we take each headword pair
(h1 , h2 ) and compute various Web-count functions
on it that can signal whether or not this mention pair
is coreferent.
As the source of Web information, we use the
Google n-grams corpus (Brants and Franz, 2006)
which contains English n-grams (n = 1 to 5) and
their Web frequency counts, derived from nearly 1
trillion word tokens and 95 billion sentences. Because we have many queries that must be run against
this corpus, we apply the trie-based hashing algorithm of Bansal and Klein (2011) to efﬁciently answer all of them in one pass over it. The features
that require word clusters (Section 3.4) use the output of Lin et al. (2010).2
We describe our ﬁve types of features in turn. The
ﬁrst four types are most intuitive for mention pairs
where both members are non-pronominal, but, aside
from the general co-occurrence group, helped for all
mention pair types. The ﬁfth feature group applies
only to pairs in which the anaphor is a pronoun but
the antecedent is a non-pronoun. Related work for
each feature category is discussed inline.

3.1

General co-occurrence

These features capture co-occurrence statistics of
the two headwords, i.e., how often h1 and h2 are
seen adjacent or nearly adjacent on the Web. This
count can be a useful coreference signal because,
in general, mentions referring to the same entity
will co-occur more frequently (in large corpora) than
those that do not. Using the n-grams corpus (for n
= 1 to 5), we collect co-occurrence Web-counts by
allowing a varying number of wildcards between h1
and h2 in the query. The co-occurrence value is:

bin log10

c12
c1 · c2

where
c12 = count(“h1
+ count(“h1

h2 ”)
h2 ”)

+ count(“h1

h2 ”),

c1 = count(“h1 ”), and
c2 = count(“h2 ”).
We normalize the overall co-occurrence count of the
headword pair c12 by the unigram counts of the individual headwords c1 and c2 , so that high-frequency
headwords do not unfairly get a high feature value
(this is similar to computing scaled mutual information MI (Church and Hanks, 1989)).3 This normalized value is quantized by taking its log10 and
binning. The actual feature that ﬁres is an indicator of which quantized bin the query produced. As
a real example from our development set, the cooccurrence count c12 for the headword pair (leader,
president) is 11383, while it is only 95 for the headword pair (voter, president); after normalization and
log10 , the values are -10.9 and -12.0, respectively.
These kinds of general Web co-occurrence statistics have been used previously for other supervised
NLP tasks such as spelling correction and syntactic parsing (Bergsma et al., 2010; Bansal and Klein,
2011). In coreference, similar word-association
scores were used by Kobdani et al. (2011), but from
Wikipedia and for self-training.
3.2

Hearst co-occurrence

These features capture templated co-occurrence of
the two headwords h1 and h2 in the Web-corpus.
Here, we only collect statistics of the headwords cooccurring with a generalized Hearst pattern (Hearst,
1992) in between. Hearst patterns capture various
lexical semantic relations between items. For example, seeing X is a Y or X and other Y indicates
hypernymy and also tends to cue coreference. The
speciﬁc patterns we use are:
• h1 {is | are | was | were} {a | an | the}? h2
• h1 {and | or} {other | the other | another} h2

2

These clusters are derived form the V2 Google n-grams
corpus. The V2 corpus itself is not publicly available, but
the clusters are available at http://www.clsp.jhu.edu/
˜sbergsma/PhrasalClusters

• h1 other than {a | an | the}? h2
3

We also tried adding count(“h1 h2”) to c12 but this
decreases performance, perhaps because truly adjacent occurrences are often not grammatical.

• h1 such as {a | an | the}? h2
• h1 , including {a | an | the}? h2
• h1 , especially {a | an | the}? h2
• h1 of {the| all}? h2
For this feature, we again use a quantized normalized count as in Section 3.1, but c12 here is restricted to n-grams where one of the above patterns
occurs in between the headwords. We did not allow wildcards in between the headwords and the
Hearst-patterns because this introduced a signiﬁcant
amount of noise. Also, we do not constrain the order of h1 and h2 because these patterns can hold
for either direction of coreference.4 As a real example from our development set, the c12 count for
the headword pair (leader, president) is 752, while
for (voter, president), it is 0.
Hypernymic semantic compatibility for coreference is intuitive and has been explored in varying
forms by previous work. Poesio et al. (2004) and
Markert and Nissim (2005) employ a subset of our
Hearst patterns and Web-hits for the subtasks of
bridging anaphora, other-anaphora, and deﬁnite NP
resolution. Others (Haghighi and Klein, 2009; Rahman and Ng, 2011; Daum´ III and Marcu, 2005)
e
use similar relations to extract compatibility statistics from Wikipedia, YAGO, and noun-similarity
lists. Yang and Su (2007) use Wikipedia to automatically extract semantic patterns, which are then
used as features in a learning setup. Instead of extracting patterns from the training data, we use all
the above patterns, which helps us generalize to new
datasets for end-to-end coreference resolution (see
Section 4.3).
3.3

Entity-based context

For each headword h, we ﬁrst collect context seeds
y using the pattern
h {is | are | was | were} {a | an | the}? y
taking seeds y in order of decreasing Web count.
The corresponding ordered seed list Y = {y} gives
us useful information about the headword’s entity
type. For example, for h = president, the top
4

Two minor variants not listed above are h1 including h2
and h1 especially h2 .

30 seeds (and their parts of speech) include important cues such as president is elected (verb), president is authorized (verb), president is responsible
(adjective), president is the chief (adjective), president is above (preposition), and president is the head
(noun).
Matches in the seed lists of two headwords can
be a strong signal that they are coreferent. For example, in the top 30 seed lists for the headword
pair (leader, president), we get matches including
elected, responsible, and expected. To capture this
effect, we create a feature that indicates whether
there is a match in the top k seeds of the two headwords (where k is a hyperparameter to tune).
We create another feature that indicates whether
the dominant parts of speech in the seed lists
matches for the headword pair. We ﬁrst collect the
POS tags (using length 2 character preﬁxes to indicate coarse parts of speech) of the seeds matched in
the top k seed lists of the two headwords, where
k is another hyperparameter to tune. If the dominant tags match and are in a small list of important
tags ({JJ, NN, RB, VB}), we ﬁre an indicator feature
specifying the matched tag, otherwise we ﬁre a nomatch indicator. To obtain POS tags for the seeds,
we use a unigram-based POS tagger trained on the
WSJ treebank training set.
3.4

Cluster information

The distributional hypothesis of Harris (1954) says
that words that occur in similar contexts tend to have
a similar linguistic behavior. Here, we design features with the idea that this hypothesis extends to
reference: mentions occurring in similar contexts
in large document sets such as the Web tend to be
compatible for coreference. Instead of collecting the
contexts of each mention and creating sparse features from them, we use Web-scale distributional
clustering to summarize compatibility.
Speciﬁcally, we begin with the phrase-based clusters from Lin et al. (2010), which were created using the Google n-grams V2 corpus. These clusters
come from distributional K-Means clustering (with
K = 1000) on phrases, using the n-gram context as
features. The cluster data contains almost 10 million phrases and their soft cluster memberships. Up
to twenty cluster ids with the highest centroid similarities are included for each phrase in this dataset

(Lin et al., 2010).
Our cluster-based features assume that if the
headwords of the two mentions have matches in
their cluster id lists, then they are more compatible
for coreference. We check the match of not just the
top 1 cluster ids, but also farther down in the 20 sized
lists because, as discussed in Lin and Wu (2009),
the soft cluster assignments often reveal different
senses of a word. However, we also assume that
higher-ranked matches tend to imply closer meanings. To this end, we ﬁre a feature indicating the
value bin(i+j), where i and j are the earliest match
positions in the cluster id lists of h1 and h2 . Binning
here means that match positions in a close range
generally trigger the same feature.
Recent previous work has used clustering information to improve the performance of supervised
NLP tasks such as NER and dependency parsing
(Koo et al., 2008; Lin and Wu, 2009). However, in
coreference, the only related work to our knowledge
is from Daum´ III and Marcu (2005), who use word
e
class features derived from a Web-scale corpus via a
process described in Ravichandran et al. (2005).
3.5

Pronoun context

Our last feature category speciﬁcally addresses pronoun reference, for cases when the anaphoric mention N P2 (and hence its headword h2 ) is a pronoun,
while the candidate antecedent mention N P1 (and
hence its headword h1 ) is not. For such a headword pair (h1 , h2 ), the idea is to substitute the nonpronoun h1 into h2 ’s position and see whether the
result is attested on the Web.
If the anaphoric pronominal mention is h2 and its
sentential context is l’ l h2 r r’, then the substituted
phrase will be l’ l h1 r r’.5 High Web counts of substituted phrases tend to indicate semantic compatibility. Perhaps unsurprisingly for English, only the
right context was useful in this capacity. We chose
the following three context types, based on performance on a development set:
5
Possessive pronouns are replaced with an additional apostrophe, i.e., h1 ’s. We also use features (see R1Gap) that allow
wildcards ( ) in between the headword and the context when
collecting Web-counts, in order to allow for determiners and
other ﬁller words.

• h1 r

(R1)

• h1 r r’

(R2)

• h1

r

(R1Gap)

As an example of the R1Gap feature, if the
anaphor h2 + context is his victory and one candidate
antecedent h1 is Bush, then we compute the normalized value
count(“Bush s victory”)
count(“ s victory”)count(“Bush”)
In general, we compute
count(“h1 s r”)
count(“ s r”)count(“h1 ”)
The ﬁnal feature value is again a normalized count
converted to log10 and then binned.6 We have three
separate features for the R1, R2, and R1Gap context
types. We tune a separate bin-size hyperparameter
for each of these three features.
These pronoun resolution features are similar to
selectional preference work by Yang et al. (2005)
and Bergsma and Lin (2006), who compute semantic compatibility for pronouns in speciﬁc syntactic
relationships such as possessive-noun, subject-verb,
etc. In our case, we directly use the general context
of any pronominal anaphor to ﬁnd its most compatible antecedent.
Note that all our above features are designed to be
non-sparse by ﬁring indicators of the quantized Web
statistics and not the lexical- or class-based identities
of the mention pair. This keeps the total number of
features small, which is important for the relatively
small datasets used for coreference resolution. We
go from around 100 features in the Reconcile baseline to around 165 features after adding all our Web
features.
6

Normalization helps us with two kinds of balancing. First,
we divide by the count of the antecedent so that when choosing the best antecedent for a ﬁxed anaphor, we are not biased
towards more frequently occurring antecedents. Second, we divide by the count of the context so that across anaphora, an
anaphor with rarer context does not get smaller values (for all its
candidate antecedents) than another anaphor with a more common context.

Dataset
ACE04
ACE05
ACE05-ALL

docs
128
81
599

dev
63/27
40/17
337/145

test
90/38
57/24
482/117

ment
3037
1991
9217

chn
1332
775
3050

Table 1: Dataset characteristics – docs: the total number of documents; dev: the train/test split during development; test: the
train/test split during testing; ment: the number of gold mentions in the test split; chn: the number of coreference chains in
the test split.

4
4.1

Experiments
Data

We show results on three popular and comparatively
larger coreference resolution data sets – the ACE04,
ACE05, and ACE05-ALL datasets from the ACE
Program (NIST, 2004). In ACE04 and ACE05, we
have only the newswire portion (of the original ACE
2004 and 2005 training sets) and use the standard
train/test splits reported in Stoyanov et al. (2009)
and Haghighi and Klein (2010). In ACE05-ALL,
we have the full ACE 2005 training set and use the
standard train/test splits reported in Rahman and Ng
(2009) and Haghighi and Klein (2010). Note that
most previous work does not report (or need) a standard development set; hence, for tuning our features and its hyper-parameters, we randomly split
the original training data into a training and development set with a 70/30 ratio (and then use the full
original training set during testing). Details of the
corpora are shown in Table 1.7
Details of the Web-scale corpora used for extracting features are discussed in Section 3.
4.2

Evaluation Metrics

We evaluated our work on both MUC (Vilain et al.,
1995) and B3 (Bagga and Baldwin, 1998). Both
scorers are available in the Reconcile infrastructure.8 MUC measures how many predicted clusters
need to be merged to cover the true gold clusters.
B3 computes precision and recall for each mention
by computing the intersection of its predicted and
gold cluster and dividing by the size of the predicted
7
Note that the development set is used only for ACE04, because for ACE05, and ACE05-ALL, we directly test using the
features tuned on ACE04.
8
Note that B3 has two versions which handle twinless (spurious) mentions in different ways (see Stoyanov et al. (2009) for
details). We use the B3 All version, unless mentioned otherwise.

Feature
AvgPerc
DecTree
+ Co-occ
+ Hearst
+ Entity
+ Cluster
+ Pronoun

P
69.0
80.9
79.8
80.0
79.4
79.5
79.9

MUC
R
63.1
61.0
62.1
62.3
63.2
63.6
64.3

F1
65.9
69.5
69.8
70.0
70.4
70.7
71.3

P
82.2
89.5
88.7
89.1
88.1
87.9
88.0

B3
R
69.9
69.0
69.8
70.1
70.9
71.2
71.6

F1
75.5
77.9
78.1
78.5
78.6
78.6
79.0

Table 2: Incremental results for the Web features on the ACE04
development set. AvgPerc is the averaged perceptron baseline,
DecTree is the decision tree baseline, and the +Feature rows
show the effect of adding a particular feature incrementally (not
in isolation) to the DecTree baseline. The feature categories
correspond to those described in Section 3.

and gold cluster, respectively. It is well known
(Recasens and Hovy, 2010; Ng, 2010; Kobdani et
al., 2011) that MUC is biased towards large clusters (chains) whereas B3 is biased towards singleton
clusters. Therefore, for a more balanced evaluation,
we show improvements on both metrics simultaneously.
4.3

Results

We start with the Reconcile baseline but employ the
decision tree (DT) classiﬁer, because it has signiﬁcantly better performance than the default averaged
perceptron classiﬁer used in Stoyanov et al. (2009).9
Table 2 compares the baseline perceptron results to
the DT results and then shows the incremental addition of the Web features to the DT baseline (on the
ACE04 development set).
The DT classiﬁer, in general, is precision-biased.
The Web features somewhat balance this by increasing the recall and decreasing precision to a lesser extent, improving overall F1. Each feature type incrementally increases both MUC and B3 F1-measures,
showing that they are not taking advantage of any
bias of either metric. The incremental improvements also show that each Web feature type brings
in some additional beneﬁt over the information already present in the Reconcile baseline, which includes alias, animacy, named entity, and WordNet
9

Moreover, a DT classiﬁer takes roughly the same amount of
time and memory as a perceptron on our ACE04 development
experiments. It is, however, slower and more memory-intensive
(∼3x) on the bigger ACE05-ALL dataset.

MUC
System
P
R
F1
ACE04-TEST-RESULTS
Stoyanov et al. (2009)
62.0
Haghighi and Klein (2009)
67.5
61.6
64.4
Haghighi and Klein (2010)
67.4
66.6
67.0
This Work: Perceptron Baseline
65.5
61.9
63.7
This Work: DT Baseline
76.0
60.7
67.5
This Work: DT + Web Features
74.8
64.2
69.1
This Work: ∆ of DT+Web over DT
(p < 0.05)
1.7
ACE05-TEST-RESULTS
Stoyanov et al. (2009)
67.4
Haghighi and Klein (2009)
73.1
58.8
65.2
Haghighi and Klein (2010)
74.6
62.7
68.1
This Work: Perceptron Baseline
72.2
61.6
66.5
This Work: DT Baseline
79.6
59.7
68.2
This Work: DT + Web Features
75.0
64.7
69.5
This Work: ∆ of DT+Web over DT
(p < 0.12)
1.3
ACE05-ALL-TEST-RESULTS
Rahman and Ng (2009)
75.4
64.1
69.3
Haghighi and Klein (2009)
72.9
60.2
67.0
Haghighi and Klein (2010)
77.0
66.9
71.6
This Work: Perceptron Baseline
68.9
60.4
64.4
This Work: DT Baseline
78.0
60.4
68.1
This Work: DT + Web Features
77.6
64.0
70.2
This Work: ∆ of DT+Web over DT
(p < 0.001)
2.1

P

B3
R

F1

77.4
69.4
81.2
73.3
84.1
70.9
89.6
70.3
87.5
73.7
(p < 0.005)

76.5
73.2
77.0
77.0
78.8
80.0
1.3

82.1
63.9
83.2
68.4
85.0
65.5
89.4
64.2
81.1
70.8
(p < 0.1)

73.7
71.8
75.1
73.9
74.7
75.6
0.9

54.4
70.5
53.2
73.1
55.4
74.8
80.6
60.5
85.1
60.4
80.7
65.9
(p < 0.001)

61.4
61.6
63.8
69.1
70.6
72.5
1.9

Table 3: Primary test results on the ACE04, ACE05, and ACE05-ALL datasets. All systems reported here use automatically
extracted system mentions. B3 here is the B3 All version of Stoyanov et al. (2009). We also report statistical signiﬁcance of the
improvements from the Web features on the DT baseline, using the bootstrap test (Noreen, 1989; Efron and Tibshirani, 1993). The
perceptron baseline in this work (Reconcile settings: 15 iterations, threshold = 0.45, SIG for ACE04 and AP for ACE05, ACE05ALL) has different results from Stoyanov et al. (2009) because their current publicly available code is different from that used in
their paper (p.c.). Also, the B3 variant used by Rahman and Ng (2009) is slightly different from other systems (they remove all and
only the singleton twinless system mentions, so it is neither B3 All nor B3 None). For completeness, our (untuned) B3 None results
(DT + Web) on the ACE05-ALL dataset are P=69.9|R=65.9|F1=67.8.

class / sense information.10
Table 3 shows our primary test results on the
ACE04, ACE05, and ACE05-ALL datasets, for the
MUC and B3 metrics. All systems reported use automatically detected mentions. We report our results (the 3 rows marked ‘This Work’) on the perceptron baseline, the DT baseline, and the Web features
added to the DT baseline. We also report statistical
signiﬁcance of the improvements from the Web fea10

We also initially experimented with smaller datasets
(MUC6 and MUC7) and an averaged perceptron baseline, and
we did see similar improvements, arguing that these features are
useful independently of the learning algorithm and dataset.

tures on the DT baseline.11 For signiﬁcance testing,
we use the bootstrap test (Noreen, 1989; Efron and
Tibshirani, 1993).
Our main comparison is against Haghighi and
Klein (2010), a mostly-unsupervised generative approach that models latent entity types, which generate speciﬁc entities that in turn render individual
mentions. They learn on large datasets including
11
All improvements are signiﬁcant, except on the small
ACE05 dataset with the MUC metric (where it is weak, at
p < 0.12). However, on the larger version of this dataset,
ACE05-ALL, we get improvements which are both larger and
more signiﬁcant (at p < 0.001).

Wikipedia, and their results are state-of-the-art in
coreference resolution. We outperform their system
on most datasets and metrics (except on ACE05ALL for the MUC metric). The other systems we
compare to and outperform are the perceptron-based
Reconcile system of Stoyanov et al. (2009), the
strong deterministic system of Haghighi and Klein
(2009), and the cluster-ranking model of Rahman
and Ng (2009).
We develop our features and tune their hyperparameter values on the ACE04 development set and
then use these on the ACE04 test set.12 On the
ACE05 and ACE05-ALL datasets, we directly transfer our Web features and their hyper-parameter values from the ACE04 dev-set, without any retuning.
The test improvements we get on all the datasets (see
Table 3) suggest that our features are generally useful across datasets and metrics.13

5

Analysis

In this section, we brieﬂy discuss errors (in the DT
baseline) corrected by our Web features, and analyze the decision tree classiﬁer built during training
(based on the ACE04 development experiments).
To study error correction, we begin with the mention pairs that are coreferent according to the goldstandard annotation (after matching the system mentions to the gold ones). We consider the pairs that are
wrongly predicted to be non-coreferent by the baseline DT system but correctly predicted to be coreferent when we add our Web features. Some examples
of such pairs include:
Iran ; the country
the EPA ; the agency
athletic director ; Mulcahy
Democrat Al Gore ; the vice president
12
Note that for the ACE04 dataset only, we use the ‘SmartInstanceGenerator’ (SIG) ﬁlter of Reconcile that uses only a ﬁltered set of mention-pairs (based on distance and other properties of the pair) instead of the ‘AllPairs’ (AP) setting that uses
all pairs of mentions, and makes training and tuning very slow.
13
For the ACE05 and ACE05-ALL datasets, we revert to the
‘AllPairs’ (AP) setting of Reconcile because this gives us baselines competitive with Haghighi and Klein (2010). Since we did
not need to retune on these datasets, training and tuning speed
were not a bottleneck. Moreover, the improvements from our
Web features are similar even when tried over the SIG baseline;
hence, the ﬁlter choice doesn’t affect the performance gain from
the Web features.

Barry Bonds ; the best baseball player
Vojislav Kostunica ; the pro-democracy leader
its closest rival ; the German magazine Das Motorrad
One of those difﬁcult-to-dislodge judges ; John Marshall

These pairs are cases where our features
on Hearst-style co-occurrence and entity-based
context-match are informative and help discriminate
in favor of the correct antecedents. One advantage of using Web-based features is that the Web
has a surprising amount of information on even rare
entities such as proper names. Our features also
correct coreference for various cases of pronominal
anaphora, but these corrections are harder to convey
out of context.
Next, we analyze the decision tree built after
training the classiﬁer (with all our Web features included). Around 30% of the decision nodes (both
non-terminals and leaves) correspond to Web features, and the average error in classiﬁcation at the
Web-feature leaves is only around 2.5%, suggesting that our features are strongly discriminative for
pairwise coreference decisions. Some of the most
discriminative nodes correspond to the general cooccurrence feature for most (binned) log-count values, the Hearst-style co-occurrence feature for its
zero-count value, the cluster-match feature for its
zero-match value, and the R2 pronoun context feature for certain (binned) log-count values.

6

Conclusion

We have presented a collection of simple Web-count
features for coreference resolution that capture a
range of world knowledge via statistics of general
lexical co-occurrence, hypernymy, semantic compatibility, and semantic context. When added to a
strong decision tree baseline, these features give signiﬁcant improvements and achieve the best results
reported to date, across multiple datasets and metrics.

Acknowledgments
We would like to thank Nathan Gilbert, Adam Pauls,
and the anonymous reviewers for their helpful suggestions. This research is supported by Qualcomm
via an Innovation Fellowship to the ﬁrst author
and by BBN under DARPA contract HR0011-12-C0014.

References
Amit Bagga and Breck Baldwin. 1998. Algorithms for
scoring coreference chains. In Proceedings of MUC-7
and LREC Workshop.
Mohit Bansal and Dan Klein. 2011. Web-scale features
for full-scale parsing. In Proceedings of ACL.
Eric Bengtson and Dan Roth. 2008. Understanding the
value of features for coreference resolution. In Proceedings of EMNLP.
Shane Bergsma and Dekang Lin. 2006. Bootstrapping path-based pronoun resolution. In Proceedings
of COLING-ACL.
Shane Bergsma, Emily Pitler, and Dekang Lin. 2010.
Creating robust supervised classiﬁers via web-scale ngram data. In Proceedings of ACL.
Thorsten Brants and Alex Franz. 2006. The Google Web
1T 5-gram corpus version 1.1. LDC2006T13.
Kenneth Ward Church and Patrick Hanks. 1989. Word
association norms, mutual information, and lexicography. In Proceedings of ACL.
Hal Daum´ III and Daniel Marcu. 2005. A large-scale
e
exploration of effective global features for a joint entity detection and tracking model. In Proceedings of
EMNLP.
B. Efron and R. Tibshirani. 1993. An introduction to the
bootstrap. Chapman & Hall CRC.
Aria Haghighi and Dan Klein. 2009. Simple coreference
resolution with rich syntactic and semantic features. In
Proceedings of EMNLP.
Aria Haghighi and Dan Klein. 2010. Coreference resolution in a modular, entity-centered model. In Proceedings of NAACL-HLT.
Mark Hall, Eibe Frank, Geoffrey Holmes, Bernhard
Pfahringer, Peter Reutemann, and Ian H. Witten.
2009. The WEKA data mining software: An update.
SIGKDD Explorations, 11(1).
Zellig Harris. 1954. Distributional structure. Word,
10(23):146162.
Marti Hearst. 1992. Automatic acquisition of hyponyms
from large text corpora. In Proceedings of COLING.
Hamidreza Kobdani, Hinrich Schutze, Michael
Schiehlen, and Hans Kamp. 2011. Bootstrapping coreference resolution using word associations.
In Proceedings of ACL.
Terry Koo, Xavier Carreras, and Michael Collins. 2008.
Simple semi-supervised dependency parsing. In Proceedings of ACL.
Dekang Lin and Xiaoyun Wu. 2009. Phrase clustering
for discriminative learning. In Proceedings of ACL.
Dekang Lin, Kenneth Church, Heng Ji, Satoshi Sekine,
David Yarowsky, Shane Bergsma, Kailash Patil, Emily
Pitler, Rachel Lathbury, Vikram Rao, Kapil Dalwani,

and Sushant Narsale. 2010. New tools for web-scale
n-grams. In Proceedings of LREC.
Katja Markert and Malvina Nissim. 2005. Comparing
knowledge sources for nominal anaphora resolution.
Computational Linguistics, 31(3):367–402.
Vincent Ng and Claire Cardie. 2002. Improving machine
learning approaches to coreference resolution. In Proceedings of ACL.
Vincent Ng. 2010. Supervised noun phrase coreference
research: The ﬁrst ﬁfteen years. In Proceedings of
ACL.
NIST. 2004. The ACE evaluation plan. In NIST.
E.W. Noreen. 1989. Computer intensive methods for
hypothesis testing: An introduction. Wiley, New York.
Massimo Poesio, Rahul Mehta, Axel Maroudas, and
Janet Hitzeman. 2004. Learning to resolve bridging
references. In Proceedings of ACL.
J. R. Quinlan. 1993. C4.5: Programs for machine learning. Morgan Kaufmann Publishers Inc., San Francisco, CA, USA.
Altaf Rahman and Vincent Ng. 2009. Supervised models
for coreference resolution. In Proceedings of EMNLP.
Altaf Rahman and Vincent Ng. 2011. Coreference resolution with world knowledge. In Proceedings of ACL.
Deepak Ravichandran, Patrick Pantel, and Eduard Hovy.
2005. Randomized algorithms and NLP: Using locality sensitive hash functions for high speed noun clustering. In Proceedings of ACL.
Marta Recasens and Eduard Hovy. 2010. Coreference resolution across corpora: Languages, coding
schemes, and preprocessing information. In Proceedings of ACL.
Wee Meng Soon, Hwee Tou Ng, and Daniel Chung Yong
Lim. 2001. A machine learning approach to coreference resolution of noun phrases. Computational Linguistics, 27(4):521–544.
Veselin Stoyanov, Nathan Gilbert, Claire Cardie, and
Ellen Riloff. 2009. Conundrums in noun phrase coreference resolution: Making sense of the state-of-the-art.
In Proceedings of ACL/IJCNLP.
Veselin Stoyanov, Claire Cardie, Nathan Gilbert, Ellen
Riloff, David Buttler, and David Hysom. 2010. Reconcile: A coreference resolution research platform. In
Technical report, Cornell University.
Marc Vilain, John Burger, John Aberdeen, Dennis Connolly, and Lynette Hirschman. 1995. A modeltheoretic coreference scoring scheme. In Proceedings
of MUC-6.
Xiaofeng Yang and Jian Su. 2007. Coreference resolution using semantic relatedness information from automatically discovered patterns. In Proceedings of ACL.

Xiaofeng Yang, Jian Su, and Chew Lim Tan. 2005. Improving pronoun resolution using statistics-based semantic compatibility information. In Proceedings of
ACL.

