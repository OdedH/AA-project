Simple, Accurate Parsing with an All-Fragments Grammar
Mohit Bansal and Dan Klein
Computer Science Division
University of California, Berkeley
{mbansal, klein}@cs.berkeley.edu

Abstract
We present a simple but accurate parser
which exploits both large tree fragments
and symbol reﬁnement. We parse with
all fragments of the training set, in contrast to much recent work on tree selection in data-oriented parsing and treesubstitution grammar learning. We require only simple, deterministic grammar
symbol reﬁnement, in contrast to recent
work on latent symbol reﬁnement. Moreover, our parser requires no explicit lexicon machinery, instead parsing input sentences as character streams. Despite its
simplicity, our parser achieves accuracies
of over 88% F1 on the standard English
WSJ task, which is competitive with substantially more complicated state-of-theart lexicalized and latent-variable parsers.
Additional speciﬁc contributions center on
making implicit all-fragments parsing efﬁcient, including a coarse-to-ﬁne inference
scheme and a new graph encoding.

1

Introduction

Modern NLP systems have increasingly used dataintensive models that capture many or even all
substructures from the training data. In the domain of syntactic parsing, the idea that all training fragments1 might be relevant to parsing has a
long history, including tree-substitution grammar
(data-oriented parsing) approaches (Scha, 1990;
Bod, 1993; Goodman, 1996a; Chiang, 2003) and
tree kernel approaches (Collins and Duffy, 2002).
For machine translation, the key modern advancement has been the ability to represent and memorize large training substructures, be it in contiguous phrases (Koehn et al., 2003) or syntactic trees
1

In this paper, a fragment means an elementary tree in a
tree-substitution grammar, while a subtree means a fragment
that bottoms out in terminals.

(Galley et al., 2004; Chiang, 2005; Deneefe and
Knight, 2009). In all such systems, a central challenge is efﬁciency: there are generally a combinatorial number of substructures in the training data,
and it is impractical to explicitly extract them all.
On both efﬁciency and statistical grounds, much
recent TSG work has focused on fragment selection (Zuidema, 2007; Cohn et al., 2009; Post and
Gildea, 2009).
At the same time, many high-performance
parsers have focused on symbol reﬁnement approaches, wherein PCFG independence assumptions are weakened not by increasing rule sizes
but by subdividing coarse treebank symbols into
many subcategories either using structural annotation (Johnson, 1998; Klein and Manning, 2003)
or lexicalization (Collins, 1999; Charniak, 2000).
Indeed, a recent trend has shown high accuracies from models which are dedicated to inducing
such subcategories (Henderson, 2004; Matsuzaki
et al., 2005; Petrov et al., 2006). In this paper,
we present a simpliﬁed parser which combines the
two basic ideas, using both large fragments and
symbol reﬁnement, to provide non-local and local context respectively. The two approaches turn
out to be highly complementary; even the simplest
(deterministic) symbol reﬁnement and a basic use
of an all-fragments grammar combine to give accuracies substantially above recent work on treesubstitution grammar based parsers and approaching top reﬁnement-based parsers. For example,
our best result on the English WSJ task is an F1
of over 88%, where recent TSG parsers2 achieve
82-84% and top reﬁnement-based parsers3 achieve
88-90% (e.g., Table 5).
Rather than select fragments, we use a simpliﬁcation of the PCFG-reduction of DOP (Goodman,
2

Zuidema (2007), Cohn et al. (2009), Post and Gildea
(2009). Zuidema (2007) incorporates deterministic reﬁnements inspired by Klein and Manning (2003).
3
Including Collins (1999), Charniak and Johnson (2005),
Petrov and Klein (2007).

1098
Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1098–1107,
Uppsala, Sweden, 11-16 July 2010. c 2010 Association for Computational Linguistics

1996a) to work with all fragments. This reduction
is a ﬂexible, implicit representation of the fragments that, rather than extracting an intractably
large grammar over fragment types, indexes all
nodes in the training treebank and uses a compact grammar over indexed node tokens. This indexed grammar, when appropriately marginalized,
is equivalent to one in which all fragments are explicitly extracted. Our work is the ﬁrst to apply
this reduction to full-scale parsing. In this direction, we present a coarse-to-ﬁne inference scheme
and a compact graph encoding of the training set,
which, together, make parsing manageable. This
tractability allows us to avoid selection of fragments, and work with all fragments.
Of course, having a grammar that includes all
training substructures is only desirable to the extent that those structures can be appropriately
weighted. Implicit representations like those
used here do not allow arbitrary weightings of
fragments. However, we use a simple weighting scheme which does decompose appropriately
over the implicit encoding, and which is ﬂexible
enough to allow weights to depend not only on frequency but also on fragment size, node patterns,
and certain lexical properties. Similar ideas have
been explored in Bod (2001), Collins and Duffy
(2002), and Goodman (2003). Our model empirically afﬁrms the effectiveness of such a ﬂexible
weighting scheme in full-scale experiments.
We also investigate parsing without an explicit
lexicon. The all-fragments approach has the advantage that parsing down to the character level
requires no special treatment; we show that an explicit lexicon is not needed when sentences are
considered as strings of characters rather than
words. This avoids the need for complex unknown word models and other specialized lexical
resources.
The main contribution of this work is to show
practical, tractable methods for working with an
all-fragments model, without an explicit lexicon.
In the parsing case, the central result is that accuracies in the range of state-of-the-art parsers
(i.e., over 88% F1 on English WSJ) can be obtained with no sampling, no latent-variable modeling, no smoothing, and even no explicit lexicon
(hence negligible training overall). These techniques, however, are not limited to the case of
monolingual parsing, offering extensions to models of machine translation, semantic interpretation,

and other areas in which a similar tension exists
between the desire to extract many large structures
and the computational cost of doing so.

2

Representation of Implicit Grammars

2.1

All-Fragments Grammars

We consider an all-fragments grammar G (see
Figure 1(a)) derived from a binarized treebank
B. G is formally a tree-substitution grammar
(Resnik, 1992; Bod, 1993) wherein each subgraph
of each training tree in B is an elementary tree,
or fragment f , in G. In G, each derivation d is
a tree (multiset) of fragments (Figure 1(c)), and
the weight of the derivation is the product of the
weights of the fragments: ω(d) = f ∈d ω(f ). In
the following, the derivation weights, when normalized over a given sentence s, are interpretable
as conditional probabilities, so G induces distributions of the form P (d|s).
In models like G, many derivations will generally correspond to the same unsegmented tree,
and the parsing task is to ﬁnd the tree whose
sum of derivation weights is highest: tmax =
arg maxt d∈t ω(d). This ﬁnal optimization is intractable in a way that is orthogonal to this paper (Sima’an, 1996); we describe minimum Bayes
risk approximations in Section 4.
2.2

Implicit Representation of G

Explicitly extracting all fragment-rules of a grammar G is memory and space intensive, and impractical for full-size treebanks. As a tractable alternative, we consider an implicit grammar GI (see
Figure 1(b)) that has the same posterior probabilities as G. To construct GI , we use a simpliﬁcation of the PCFG-reduction of DOP by Goodman (1996a).4 GI has base symbols, which are
the symbol types from the original treebank, as
well as indexed symbols, which are obtained by
assigning a unique index to each node token in
the training treebank. The vast majority of symbols in GI are therefore indexed symbols. While
it may seem that such grammars will be overly
large, they are in fact reasonably compact, being
linear in the treebank size B, while G is exponential in the length of a sentence. In particular, we
found that GI was smaller than explicit extraction
of all depth 1 and 2 unbinarized fragments for our
4

The difference is that Goodman (1996a) collapses our
and END rules into the binary productions, giving a
larger grammar which is less convenient for weighting.
BEGIN

1099

(a)

DERIVATIONS

!
EXPLICIT

GRAMMAR

X

SYMBOLS: X, for all types in treebank "
RULES:

X

A

B

#, for all fragments in "

FRAGMENTS
X
Y

C

A

words

Z

B

%

C

#

MAP

(b)

IMPLICIT

!$

X
BEGIN

SYMBOLS:
Base:
X for all types in treebank "
Indexed: Xi for all tokens of X in "
RULES:
Begin:
Continue: Xi
End:
Xi

CONTINUE

Yj
A

i

Xi

X

B

Zk

C
Al

Bm

Cn

A

for all Xi in "
j Zk for all rule-tokens in "
i in "

B

C

words

END

#$

%$

Figure 1: Grammar deﬁnition and sample derivations and fragments in the grammar for (a) the explicitly extracted all-fragments
grammar G, and (b) its implicit representation GI .

treebanks – in practice, even just the raw treebank
grammar grows almost linearly in the size of B.5
There are 3 kinds of rules in GI , which are illustrated in Figure 1(d). The BEGIN rules transition
from a base symbol to an indexed symbol and represent the beginning of a fragment from G. The
CONTINUE rules use only indexed symbols and
correspond to speciﬁc depth-1 binary fragment tokens from training trees, representing the internal
continuation of a fragment in G. Finally, END
rules transition from an indexed symbol to a base
symbol, representing the frontier of a fragment.
By construction, all derivations in GI will segment, as shown in Figure 1(d), into regions corresponding to tokens of fragments from the training
treebank B. Let π be the map which takes appropriate fragments in GI (those that begin and end
with base symbols and otherwise contain only indexed symbols), and maps them to the corresponding f in G. We can consider any derivation dI in
GI to be a tree of fragments f I , each fragment a
token of a fragment type f = π(f I ) in the original grammar G. By extension, we can therefore
map any derivation dI in GI to the corresponding
derivation d = π(dI ) in G.
The mapping π is an onto mapping from GI to
5
Just half the training set (19916 trees) itself had 1.7 million depth 1 and 2 unbinarized rules compared to the 0.9 million indexed symbols in GI (after graph packing). Even extracting binarized fragments (depth 1 and 2, with one order
of parent annotation) gives us 0.75 million rules, and, practically, we would need fragments of greater depth.

G. In particular, each derivation d in G has a nonempty set of corresponding derivations {dI } =
π −1 (d) in GI , because fragments f in d correspond to multiple fragments f I in GI that differ
only in their indexed symbols (one f I per occurrence of f in B). Therefore, the set of derivations
in G is preserved in GI . We now discuss how
weights can be preserved under π.
2.3

Equivalence for Weighted Grammars

In general, arbitrary weight functions ω on fragments in G do not decompose along the increased
locality of GI . However, we now consider a usefully broad class of weighting schemes for which
the posterior probabilities under G of derivations
d are preserved in GI . In particular, assume that
we have a weighting ω on rules in GI which does
not depend on the speciﬁc indices used. Therefore, any fragment f I will have a weight in GI of
the form:
ωI (f I ) = ωBEGIN (b)

ωCONT (r)
r∈C

ωEND (e)
e∈E

where b is the BEGIN rule, r are CONTINUE rules,
and e are END rules in the fragment f I (see Figure 1(d)). Because ω is assumed to not depend on
the speciﬁc indices, all f I which correspond to the
same f under π will have the same weight ωI (f )
in GI .
In this case, we can deﬁne an induced weight

1100

RULE TYPES

WEIGHTS
MIN-FRAGMENTS

DOP1

!

!

"%#$%!

" #$ !

!

OUR MODEL

!

X
BEGIN

Xi
CONTINUE

Yj

Zk

Al
END

A
Bm
CONTINUE

word

Figure 2: Rules deﬁned for grammar GI and weight schema
for the DOP1 model, the Min-Fragments model (Goodman
(2003)) and our model. Here s(X) denotes the total number
of fragments rooted at base symbol X.

for fragments f in G by

in the parameter schema we have deﬁned. The
END rule weight is 0 or 1 depending on whether
A is an intermediate symbol or not.6 The local
fragments in DOP1 were ﬂat (non-binary) so this
weight choice simulates that property by not allowing switching between fragments at intermediate symbols.
The original DOP1 model weights a fragment f
in G as ωG (f ) = n(f )/s(X), i.e., the frequency
of fragment f divided by the number of fragments
rooted at base symbol X. This is simulated by our
weight choices (Figure 2) where each fragment f I
in GI has weight ωI (f I ) = 1/s(X) and therefore,
I
ωG (f ) =
f I ∈π −1 (f ) ωI (f ) = n(f )/s(X).
Given the weights used for DOP1, the recursive
formula for the number of fragments s(Xi ) rooted
at indexed symbol Xi (and for the CONTINUE rule
Xi → Yj Zk ) is

ωI (f I ) = n(f )ωI (f )

ωG (f ) =

s(Xi ) = (1 + s(Yj ))(1 + s(Zk )),

f I ∈π −1 (f )

= n(f )ωBEGIN (b )

ωCONT (r )
r ∈C

ωEND (e )
e ∈E

where now b , r and e are non-indexed type abstractions of f ’s member productions in GI and
n(f ) = |π −1 (f )| is the number of tokens of f in
B.
Under the weight function ωG (f ), any derivation d in G will have weight which obeys
ωG (d) =

ωG (f ) =
f ∈d

n(f )ωI (f )

3.2

ωI (dI )
dI ∈d

and so the posterior P (d|s) of a derivation d for
a sentence s will be the same whether computed
in G or GI . Therefore, provided our weighting
function on fragments f in G decomposes over
the derivational representation of f in GI , we can
equivalently compute the quantities we need for
inference (see Section 4) using GI instead.

3.1

where s(Yj ) and s(Zk ) are the number of fragments rooted at indexed symbols Yj and Zk (nonintermediate) respectively. The number of fragments s(X) rooted at base symbol X is then
s(X) = Xi s(Xi ).
Implicitly parsing with the full DOP1 model (no
sampling of fragments) using the weights in Figure 2 gives a 68% parsing accuracy on the WSJ
dev-set.7 This result indicates that the weight of a
fragment should depend on more than just its frequency.

f ∈d

=

3

(1)

Parameterization of Implicit
Grammars
Classical DOP1

The original data-oriented parsing model ‘DOP1’
(Bod, 1993) is a particular instance of the general
weighting scheme which decomposes appropriately over the implicit encoding, described in Section 2.3. Figure 2 shows rule weights for DOP1

Better Parameterization

As has been pointed out in the literature, largefragment grammars can beneﬁt from weights of
fragments depending not only on their frequency
but also on other properties. For example, Bod
(2001) restricts the size and number of words
in the frontier of the fragments, and Collins and
Duffy (2002) and Goodman (2003) both give
larger fragments smaller weights. Our model can
incorporate both size and lexical properties. In
particular, we set ωCONT (r) for each binary CON TINUE rule r to a learned constant ωBODY , and we
set the weight for each rule with a POS parent to a
6
Intermediate symbols are those created during binarization.
7
For DOP1 experiments, we use no symbol reﬁnement.
We annotate with full left binarization history to imitate the
ﬂat nature of fragments in DOP1. We use mild coarse-pass
pruning (Section 4.1) without which the basic all-fragments
chart does not ﬁt in memory. Standard WSJ treebank splits
used: sec 2-21 training, 22 dev, 23 test.

1101

O(Ax , i, j)ω(Ax → By Cz )I(By , i, k)I(Cz , k, j)

Rule score: r(A → B C, i, k, j) =
x y

Max-Constituent:
Max-Rule-Sum:
Max-Variational:

q(A, i, j) =

x

z

O(Ax ,i,j)I(Ax ,i,j)
r I(rootr ,0,n)

q(A → B C, i, k, j) =
q(A → B C, i, k, j) =

tmax = argmax
t

r(A→B C,i,k,j)
r I(rootr ,0,n)

x

r(A→B C,i,k,j)
O(Ax ,i,j)I(Ax ,i,j)

tmax = argmax
t

tmax = argmax
t

q(c)
c∈t

q(e)
e∈t

q(e)
e∈t

Figure 3: Inference: Different objectives for parsing with posteriors. A, B, C are base symbols, Ax , By , Cz are indexed
symbols and i,j,k are between-word indices. Hence, (Ax , i, j) represents a constituent labeled with Ax spanning words i
to j. I(Ax , i, j) and O(Ax , i, j) denote the inside and outside scores of this constituent, respectively. For brevity, we write
c ≡ (A, i, j) and e ≡ (A → B C, i, k, j). Also, tmax is the highest scoring parse. Adapted from Petrov and Klein (2007).

constant ωLEX (see Figure 2). Fractional values of
these parameters allow the weight of a fragment to
depend on its size and lexical properties.
Another parameter we introduce is a
‘switching-penalty’ csp for the END rules
(Figure 2). The DOP1 model uses binary values
(0 if symbol is intermediate, 1 otherwise) as
the END rule weight, which is equivalent to
prohibiting fragment switching at intermediate
symbols. We learn a fractional constant asp
that allows (but penalizes) switching between
fragments at annotated symbols through the
formulation csp (Xintermediate ) = 1 − asp and
csp (Xnon−intermediate ) = 1 + asp . This feature
allows fragments to be assigned weights based on
the binarization status of their nodes.
With the above weights, the recursive formula
for s(Xi ), the total weighted number of fragments
rooted at indexed symbol Xi , is different from
DOP1 (Equation 1). For rule Xi → Yj Zk , it is

Model
Constituent
Rule-Sum
Variational

dev (≤ 40)
F1
EX
88.4 33.7
88.2 34.6
87.7 34.4

test (≤ 40)
F1
EX
88.5 33.0
88.3 33.8
87.7 33.9

test (all)
F1
EX
87.6 30.8
87.4 31.6
86.9 31.6

Table 1: All-fragments WSJ results (accuracy F1 and exact
match EX) for the constituent, rule-sum and variational objectives, using parent annotation and one level of markovization.

4

Efﬁcient Inference

The previously described implicit grammar GI deﬁnes a posterior distribution P (dI |s) over a sentence s via a large, indexed PCFG. This distribution has the property that, when marginalized,
it is equivalent to a posterior distribution P (d|s)
over derivations in the correspondingly-weighted
all-fragments grammar G. However, even with
an explicit representation of G, we would not be
able to tractably compute the parse that maximizes P (t|s) = d∈t P (d|s) = dI ∈t P (dI |s)
s(Xi ) = ωBODY .(csp (Yj )+s(Yj ))(csp (Zk )+s(Zk )). (Sima’an, 1996). We therefore approximately
maximize over trees by computing various existing approximations to P (t|s) (Figure 3). GoodThe formula uses ωLEX in place of ωBODY if r is a
man (1996b), Petrov and Klein (2007), and Matlexical rule (Figure 2).
suzaki et al. (2005) describe the details of conThe resulting grammar is primarily parameterstituent, rule-sum and variational objectives reized by the training treebank B. However, each
spectively. Note that all inference methods depend
setting of the hyperparameters (ωBODY , ωLEX , asp )
on the posterior P (t|s) only through marginal exdeﬁnes a different conditional distribution on
pectations of labeled constituent counts and antrees. We choose amongst these distributions by
chored local binary tree counts, which are easily
directly optimizing parsing F1 on our developcomputed from P (dI |s) and equivalent to those
ment set. Because this objective is not easily diffrom P (d|s). Therefore, no additional approximaferentiated, we simply perform a grid search on
tions are made in GI over G.
the three hyperparameters. The tuned values are
As shown in Table 1, our model (an allωBODY = 0.35, ωLEX = 0.25 and asp = 0.018.
fragments grammar with the weighting scheme
For generalization to a larger parameter space, we
would of course need to switch to a learning aptent by Johnson (2002). Later, Zollmann and Sima’an (2005)
proach that scales more gracefully in the number
presented a statistically consistent estimator, with the basic
of tunable hyperparameters.8
insight of optimizing on a held-out set. Our estimator is not
8

Note that there has been a long history of DOP estimators. The generative DOP1 model was shown to be inconsis-

intended to be viewed as a generative model of trees at all,
but simply a loss-minimizing conditional distribution within
our parametric family.

1102

88.2

88.0

87.8

Coarse-to-Fine Inference

-4.0

Coarse-to-ﬁne inference is a well-established way
to accelerate parsing. Charniak et al. (2006) introduced multi-level coarse-to-ﬁne parsing, which
extends the basic pre-parsing idea by adding more
rounds of pruning. Their pruning grammars
were coarse versions of the raw treebank grammar. Petrov and Klein (2007) propose a multistage coarse-to-ﬁne method in which they construct a sequence of increasingly reﬁned grammars, reparsing with each reﬁnement. In particular, in their approach, which we adopt here,
coarse-to-ﬁne pruning is used to quickly compute approximate marginals, which are then used
to prune subsequent search. The key challenge
in coarse-to-ﬁne inference is the construction of
coarse models which are much smaller than the
target model, yet whose posterior marginals are
close enough to prune with safely.
Our grammar GI has a very large number of indexed symbols, so we use a coarse pass to prune
away their unindexed abstractions. The simple,
intuitive, and effective choice for such a coarse
grammar GC is a minimal PCFG grammar composed of the base treebank symbols X and the
minimal depth-1 binary rules X → Y Z (and
with the same level of annotation as in the full
grammar). If a particular base symbol X is pruned
by the coarse pass for a particular span (i, j) (i.e.,
the posterior marginal P (X, i, j|s) is less than a
certain threshold), then in the full grammar GI ,
we do not allow building any indexed symbol
Xl of type X for that span. Hence, the projection map for the coarse-to-ﬁne model is π C :
Xl (indexed symbol) → X (base symbol).
We achieve a substantial improvement in speed
and memory-usage from the coarse-pass pruning.
Speed increases by a factor of 40 and memoryusage decreases by a factor of 10 when we go
9
All our experiments use the constituent objective except when we report results for max-rule-sum and maxvariational parsing (where we use the parameters tuned for
max-constituent, therefore they unsurprisingly do not perform as well as max-constituent). Evaluations use EVALB,
see http://nlp.cs.nyu.edu/evalb/.

-6.2
-4.5
-5.0
-5.5
-6.0
-6.5
-7.0
Coarse-pass Log Posterior Threshold (PT)

-7.5

Figure 4: Effect of coarse-pass pruning on parsing accuracy
(for WSJ dev-set, ≤ 40 words). Pruning increases to the left
as log posterior threshold (PT) increases.
90.0

89.8
89.6

89.5
89.0

No Pruning
(PT = -inf)

88.5
F1

4.1

88.4

F1

shown in Figure 2) achieves an accuracy of
88.5% (using simple parent annotation) which is
4-5% (absolute) better than the recent TSG work
(Zuidema, 2007; Cohn et al., 2009; Post and
Gildea, 2009) and also approaches state-of-theart reﬁnement-based parsers (e.g., Charniak and
Johnson (2005), Petrov and Klein (2007)).9

88.0
87.5
87.0
86.5
86.0
-1

-6
-3
-5
-7
-9
-11
Coarse-pass Log Posterior Threshold (PT)

-13

Figure 5: Effect of coarse-pass pruning on parsing accuracy
(WSJ, training ≤ 20 words, tested on dev-set ≤ 20 words).
This graph shows that the fortuitous improvement due to
pruning is very small and that the peak accuracy is almost
equal to the accuracy without pruning (the dotted line).

from no pruning to pruning with a −6.2 log posterior threshold.10 Figure 4 depicts the variation
in parsing accuracies in response to the amount
of pruning done by the coarse-pass. Higher posterior pruning thresholds induce more aggressive
pruning. Here, we observe an effect seen in previous work (Charniak et al. (1998), Petrov and Klein
(2007), Petrov et al. (2008)), that a certain amount
of pruning helps accuracy, perhaps by promoting
agreement between the coarse and full grammars
(model intersection). However, these ‘fortuitous’
search errors give only a small improvement and
the peak accuracy is almost equal to the parsing accuracy without any pruning (as seen in Figure 5).11 This outcome suggests that the coarsepass pruning is critical for tractability but not for
performance.
10
Unpruned experiments could not be run for 40-word test
sentences even with 50GB of memory, therefore we calculated the improvement factors using a smaller experiment
with full training and sixty 30-word test sentences.
11
To run experiments without pruning, we used training
and dev sentences of length ≤ 20 for the graph in Figure 5.

1103

Parsing Model
Word-level Trees
Word-level Graph
Character-level Trees
Character-level Graph

Table 2: Number of indexed symbols for word-level and
character-level parsing and their graph versions (for allfragments grammar with parent annotation and one level of
markovization).

tree-to-graph encoding

Figure 6: Collapsing the duplicate training subtrees converts
them to a graph and reduces the number of indexed symbols
signiﬁcantly.

4.2

No. of Indexed Symbols
1,900,056
903,056
12,280,848
1,109,399

Packed Graph Encoding

The implicit all-fragments approach (Section 2.2)
avoids explicit extraction of all rule fragments.
However, the number of indexed symbols in our
implicit grammar GI is still large, because every node in each training tree (i.e., every symbol
token) has a unique indexed symbol. We have
around 1.9 million indexed symbol tokens in the
word-level parsing model (this number increases
further to almost 12.3 million when we parse character strings in Section 5.1). This large symbol
space makes parsing slow and memory-intensive.
We reduce the number of symbols in our implicit grammar GI by applying a compact, packed
graph encoding to the treebank training trees. We
collapse the duplicate subtrees (fragments that
bottom out in terminals) over all training trees.
This keeps the grammar unchanged because in an
tree-substitution grammar, a node is deﬁned (identiﬁed) by the subtree below it. We maintain a
hashmap on the subtrees which allows us to easily discover the duplicates and bin them together.
The collapsing converts all the training trees in the
treebank to a graph with multiple parents for some
nodes as shown in Figure 6. This technique reduces the number of indexed symbols signiﬁcantly
as shown in Table 2 (1.9 million goes down to 0.9
million, reduction by a factor of 2.1). This reduction increases parsing speed by a factor of 1.4 (and
by a factor of 20 for character-level parsing, see
Section 5.1) and reduces memory usage to under
4GB.
We store the duplicate-subtree counts for each
indexed symbol of the collapsed graph (using a
hashmap). When calculating the number of frag-

Figure 7: Character-level parsing: treating the sentence as a
string of characters instead of words.

ments s(Xi ) parented by an indexed symbol Xi
(see Section 3.2), and when calculating the inside
and outside scores during inference, we account
for the collapsed subtree tokens by expanding the
counts and scores using the corresponding multiplicities. Therefore, we achieve the compaction
with negligible overhead in computation.

5
5.1

Improved Treebank Representations
Character-Level Parsing

The all-fragments approach to parsing has the
added advantage that parsing below the word level
requires no special treatment, i.e., we do not need
an explicit lexicon when sentences are considered
as strings of characters rather than words.
Unknown words in test sentences (unseen in
training) are a major issue in parsing systems for
which we need to train a complex lexicon, with
various unknown classes or sufﬁx tries. Smoothing factors need to be accounted for and tuned.
With our implicit approach, we can avoid training
a lexicon by building up the parse tree from characters instead of words. As depicted in Figure 7,
each word in the training trees is split into its corresponding characters with start and stop boundary tags (and then binarized in a standard rightbranching style). A test sentence’s words are split
up similarly and the test-parse is built from training fragments using the same model and inference
procedure as deﬁned for word-level parsing (see
Sections 2, 3 and 4). The lexical items (alphabets,
digits etc.) are now all known, so unlike word-level
parsing, no sophisticated lexicon is needed.
We choose a slightly richer weighting scheme

1104

Model
Constituent
Rule-Sum
Variational

dev (≤ 40)
F1
EX
88.2 33.6
88.0 33.9
87.6 34.4

test (≤ 40)
F1
EX
88.0 31.9
87.8 33.1
87.2 32.3

test (all)
F1
EX
87.1 29.8
87.0 30.9
86.4 30.2

Parsing Model
No Reﬁnement (P=0, H=0)
Basic Reﬁnement (P=1, H=1)
All-Fragments + No Reﬁnement (P=0, H=0)
All-Fragments + Basic Reﬁnement (P=1, H=1)

Table 3: All-fragments WSJ results for the character-level
parsing model, using parent annotation and one level of
markovization.

for this representation by extending the twoweight schema for CONTINUE rules (ωLEX and
ωBODY ) to a three-weight one: ωLEX , ωWORD , and
ωSENT for CONTINUE rules in the lexical layer, in
the portion of the parse that builds words from
characters, and in the portion of the parse that
builds the sentence from words, respectively. The
tuned values are ωSENT = 0.35, ωWORD = 0.15,
ωLEX = 0.95 and asp = 0. The character-level
model achieves a parsing accuracy of 88.0% (see
Table 3), despite lacking an explicit lexicon.12
Character-level parsing expands the training
trees (see Figure 7) and the already large indexed
symbol space size explodes (1.9 million increases
to 12.3 million, see Table 2). Fortunately, this
is where the packed graph encoding (Section 4.2)
is most effective because duplication of character
strings is high (e.g., sufﬁxes). The packing shrinks
the symbol space size from 12.3 million to 1.1 million, a reduction by a factor of 11. This reduction
increases parsing speed by almost a factor of 20
and brings down memory-usage to under 8GB.13
5.2

Basic Reﬁnement: Parent Annotation
and Horizontal Markovization

In a pure all-fragments approach, compositions
of units which would have been independent in
a basic PCFG are given joint scores, allowing
the representation of certain non-local phenomena, such as lexical selection or agreement, which
in fully local models require rich state-splitting
or lexicalization. However, at substitution sites,
the coarseness of raw unreﬁned treebank symbols still creates unrealistic factorization assumptions. A standard solution is symbol reﬁnement;
Johnson (1998) presents the particularly simple
case of parent annotation, in which each node is
12
Note that the word-level model yields a higher accuracy
of 88.5%, but uses 50 complex unknown word categories
based on lexical, morphological and position features (Petrov
et al., 2006). Cohn et al. (2009) also uses this lexicon.
13
Full char-level experiments (w/o packed graph encoding)
could not be run even with 50GB of memory. We calculate the improvement factors using a smaller experiment with
70% training and ﬁfty 20-word test sentences.

F1
71.3
80.0
85.7
88.4

Table 4: F1 for a basic PCFG, and incorporation of basic
reﬁnement, all-fragments and both, for WSJ dev-set (≤ 40
words). P = 1 means parent annotation of all non-terminals,
including the preterminal tags. H = 1 means one level of
markovization. Results from Klein and Manning (2003).

marked with its parent in the underlying treebank.
It is reasonable to hope that the gains from using large fragments and the gains from symbol reﬁnement will be complementary. Indeed, previous
work has shown or suggested this complementarity. Sima’an (2000) showed modest gains from enriching structural relations with semi-lexical (prehead) information. Charniak and Johnson (2005)
showed accuracy improvements from composed
local tree features on top of a lexicalized base
parser. Zuidema (2007) showed a slight improvement in parsing accuracy when enough fragments
were added to learn enrichments beyond manual
reﬁnements. Our work reinforces this intuition by
demonstrating how complementary they are in our
model (∼20% error reduction on adding reﬁnement to an all-fragments grammar, as shown in the
last two rows of Table 4).
Table 4 shows results for a basic PCFG, and its
augmentation with either basic reﬁnement (parent
annotation and one level of markovization), with
all-fragments rules (as in previous sections), or
both. The basic incorporation of large fragments
alone does not yield particularly strong performance, nor does basic symbol reﬁnement. However, the two approaches are quite additive in our
model and combine to give nearly state-of-the-art
parsing accuracies.
5.3

Additional Deterministic Reﬁnement

Basic symbol reﬁnement (parent annotation), in
combination with all-fragments, gives test-set accuracies of 88.5% (≤ 40 words) and 87.6% (all),
shown as the Basic Reﬁnement model in Table 5.
Klein and Manning (2003) describe a broad set
of simple, deterministic symbol reﬁnements beyond parent annotation. We included ten of their
simplest annotation features, namely: UNARY-DT,
UNARY-RB, SPLIT-IN, SPLIT-AUX, SPLIT-CC, SPLIT-%,

and DOMINATES-V.
None of these annotation schemes use any head
information. This additional annotation (see AdGAPPED-S, POSS-NP, BASE-NP

1105

89

test (≤ 40)
test (all)
Parsing Model
F1 EX
F1
EX
FRAGMENT-BASED PARSERS
Zuidema (2007)
–
–
83.8
26.9
Cohn et al. (2009)
–
–
84.0
–
Post and Gildea (2009)
82.6
–
–
–
THIS PAPER
All-Fragments
+ Basic Reﬁnement
88.5 33.0 87.6
30.8
+ Additional Reﬁnement 88.7 33.8 88.1
31.7
REFINEMENT-BASED PARSERS
Collins (1999)
88.6
–
88.2
–
Petrov and Klein (2007) 90.6 39.1 90.1
37.1

88

F1

87
86
85

84
83
0

20
40
60
80
100
Percentage of WSJ sections 2-21 used for training

Figure 8: Parsing accuracy F1 on the WSJ dev-set (≤ 40
words) increases with increasing percentage of training data.

ditional Reﬁnement, Table 5) improves the testset accuracies to 88.7% (≤ 40 words) and 88.1%
(all), which is equal to a strong lexicalized parser
(Collins, 1999), even though our model does not
use lexicalization or latent symbol-split induction.

6
6.1

Other Results
Parsing Speed and Memory Usage

The word-level parsing model using the whole
training set (39832 trees, all-fragments) takes approximately 3 hours on the WSJ test set (2245
trees of ≤40 words), which is equivalent to
roughly 5 seconds of parsing time per sentence; and runs in under 4GB of memory. The
character-level version takes about twice the time
and memory. This novel tractability of an allfragments grammar is achieved using both coarsepass pruning and packed graph encoding. Microoptimization may further improve speed and memory usage.
6.2

Training Size Variation

Figure 8 shows how WSJ parsing accuracy increases with increasing amount of training data
(i.e., percentage of WSJ sections 2-21). Even if we
train on only 10% of the WSJ training data (3983
sentences), we still achieve a reasonable parsing
accuracy of nearly 84% (on the development set,
≤ 40 words), which is comparable to the fullsystem results obtained by Zuidema (2007), Cohn
et al. (2009) and Post and Gildea (2009).
6.3

Other Language Treebanks

Table 5: Our WSJ test set parsing accuracies, compared
to recent fragment-based parsers and top reﬁnement-based
parsers. Basic Reﬁnement is our all-fragments grammar with
parent annotation. Additional Reﬁnement adds deterministic reﬁnement of Klein and Manning (2003) (Section 5.3).
Results on the dev-set (≤ 100).

Klein (2008)), our simple all-fragments parser
achieves accuracies in the range of top reﬁnementbased parsers, even though the model parameters
were tuned out of domain on WSJ. For German,
our parser achieves an F1 of 79.8% compared
to 81.5% by the state-of-the-art and substantially
more complex Petrov and Klein (2008) work. For
French, our approach yields an F1 of 78.0% vs.
80.1% by Petrov and Klein (2008).14

7

Conclusion

Our approach of using all fragments, in combination with basic symbol reﬁnement, and even
without an explicit lexicon, achieves results in the
range of state-of-the-art parsers on full scale treebanks, across multiple languages. The main takeaway is that we can achieve such results in a very
knowledge-light way with (1) no latent-variable
training, (2) no sampling, (3) no smoothing beyond the existence of small fragments, and (4) no
explicit unknown word model at all. While these
methods offer a simple new way to construct an
accurate parser, we believe that this general approach can also extend to other large-fragment
tasks, such as machine translation.

Acknowledgments
This project is funded in part by BBN under
DARPA contract HR0011-06-C-0022 and the NSF
under grant 0643742.

On the French and German treebanks (using the
standard dataset splits mentioned in Petrov and
1106

14

All results on the test set (≤ 40 words).

References
Rens Bod. 1993. Using an Annotated Corpus as a
Stochastic Grammar. In Proceedings of EACL.
Rens Bod. 2001. What is the Minimal Set of Fragments that Achieves Maximum Parse Accuracy? In
Proceedings of ACL.
Eugene Charniak and Mark Johnson. 2005. Coarseto-ﬁne n-best parsing and MaxEnt discriminative
reranking. In Proceedings of ACL.
Eugene Charniak, Sharon Goldwater, and Mark Johnson. 1998. Edge-Based Best-First Chart Parsing.
In Proceedings of the 6th Workshop on Very Large
Corpora.
Eugene Charniak, Mark Johnson, et al. 2006. Multilevel Coarse-to-ﬁne PCFG Parsing. In Proceedings
of HLT-NAACL.
Eugene Charniak. 2000. A Maximum-EntropyInspired Parser. In Proceedings of NAACL.
David Chiang. 2003. Statistical parsing with an
automatically-extracted tree adjoining grammar. In
Data-Oriented Parsing.

Mark Johnson. 1998. PCFG Models of Linguistic
Tree Representations. Computational Linguistics,
24:613–632.
Mark Johnson. 2002. The DOP Estimation Method Is
Biased and Inconsistent. In Computational Linguistics 28(1).
Dan Klein and Christopher Manning. 2003. Accurate
Unlexicalized Parsing. In Proceedings of ACL.
Philipp Koehn, Franz Och, and Daniel Marcu. 2003.
Statistical Phrase-Based Translation. In Proceedings of HLT-NAACL.
Takuya Matsuzaki, Yusuke Miyao, and Jun’ichi Tsujii.
2005. Probabilistic CFG with latent annotations. In
Proceedings of ACL.
Slav Petrov and Dan Klein. 2007. Improved Inference for Unlexicalized Parsing. In Proceedings of
NAACL-HLT.
Slav Petrov and Dan Klein. 2008. Sparse Multi-Scale
Grammars for Discriminative Latent Variable Parsing. In Proceedings of EMNLP.

David Chiang. 2005. A Hierarchical Phrase-Based
Model for Statistical Machine Translation. In Proceedings of ACL.

Slav Petrov, Leon Barrett, Romain Thibaux, and Dan
Klein. 2006. Learning Accurate, Compact, and
Interpretable Tree Annotation. In Proceedings of
COLING-ACL.

Trevor Cohn, Sharon Goldwater, and Phil Blunsom.
2009.
Inducing Compact but Accurate TreeSubstitution Grammars. In Proceedings of NAACL.

Slav Petrov, Aria Haghighi, and Dan Klein. 2008.
Coarse-to-Fine Syntactic Machine Translation using
Language Projections. In Proceedings of EMNLP.

Michael Collins and Nigel Duffy. 2002. New Ranking
Algorithms for Parsing and Tagging: Kernels over
Discrete Structures, and the Voted Perceptron. In
Proceedings of ACL.

Matt Post and Daniel Gildea. 2009. Bayesian Learning
of a Tree Substitution Grammar. In Proceedings of
ACL-IJCNLP.

Michael Collins. 1999. Head-Driven Statistical Models for Natural Language Parsing. Ph.D. thesis, University of Pennsylvania, Philadelphia.

Philip Resnik. 1992. Probabilistic Tree-Adjoining
Grammar as a Framework for Statistical Natural
Language Processing. In Proceedings of COLING.

Steve Deneefe and Kevin Knight. 2009. Synchronous
Tree Adjoining Machine Translation. In Proceedings of EMNLP.

Remko Scha. 1990. Taaltheorie en taaltechnologie;
competence en performance. In R. de Kort and
G.L.J. Leerdam (eds.): Computertoepassingen in de
Neerlandistiek.

Michel Galley, Mark Hopkins, Kevin Knight, and
Daniel Marcu. 2004. What’s in a translation rule?
In Proceedings of HLT-NAACL.

Khalil Sima’an. 1996. Computational Complexity
of Probabilistic Disambiguation by means of TreeGrammars. In Proceedings of COLING.

Joshua Goodman. 1996a. Efﬁcient Algorithms for
Parsing the DOP Model. In Proceedings of EMNLP.

Khalil Sima’an. 2000. Tree-gram Parsing: Lexical Dependencies and Structural Relations. In Proceedings
of ACL.

Joshua Goodman. 1996b. Parsing Algorithms and
Metrics. In Proceedings of ACL.
Joshua Goodman. 2003. Efﬁcient parsing of DOP with
PCFG-reductions. In Bod R, Scha R, Sima’an K
(eds.) Data-Oriented Parsing. University of Chicago
Press, Chicago, IL.
James Henderson. 2004. Discriminative Training of
a Neural Network Statistical Parser. In Proceedings
of ACL.

Andreas Zollmann and Khalil Sima’an. 2005. A
Consistent and Efﬁcient Estimator for Data-Oriented
Parsing. Journal of Automata, Languages and Combinatorics (JALC), 10(2/3):367–388.
Willem Zuidema. 2007. Parsimonious Data-Oriented
Parsing. In Proceedings of EMNLP-CoNLL.

1107

