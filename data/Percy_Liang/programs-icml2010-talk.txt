Learning Programs:
A Hierarchical Bayesian Approach
ICML - Haifa, Israel

Percy Liang

June 24, 2010

Michael I. Jordan

Dan Klein

Motivating Application: Repetitive Text Editing
I like programs, but I wish programs
would just program themselves since
I don’t like programming.

=⇒

I like <i>programs</i>, but I wish <i>programs</i>
would just <i>program</i> themselves since
I don’t like <i>programming</i>.

2

Motivating Application: Repetitive Text Editing
I like programs, but I wish programs
would just program themselves since
I don’t like programming.

=⇒

I like <i>programs</i>, but I wish <i>programs</i>
would just <i>program</i> themselves since
I don’t like <i>programming</i>.

Goal: Programming by Demonstration
If the user demonstrates italicizing the ﬁrst occurrence,
can we generalize to the remaining?

2

Motivating Application: Repetitive Text Editing
I like programs, but I wish programs
would just program themselves since
I don’t like programming.

=⇒

I like <i>programs</i>, but I wish <i>programs</i>
would just <i>program</i> themselves since
I don’t like <i>programming</i>.

Goal: Programming by Demonstration
If the user demonstrates italicizing the ﬁrst occurrence,
can we generalize to the remaining?
Solution: represent task by a program to be learned
1. Move to next occurrence of word with preﬁx program
2. Insert <i>
3. Move to end of word
4. Insert </i>

2

Motivating Application: Repetitive Text Editing
I like programs, but I wish programs
would just program themselves since
I don’t like programming.

=⇒

I like <i>programs</i>, but I wish <i>programs</i>
would just <i>program</i> themselves since
I don’t like <i>programming</i>.

Goal: Programming by Demonstration
If the user demonstrates italicizing the ﬁrst occurrence,
can we generalize to the remaining?
Solution: represent task by a program to be learned
1. Move to next occurrence of word with preﬁx program
2. Insert <i>
3. Move to end of word
4. Insert </i>
Challenge: learn from very few examples
2

General Setup
Goal:
(X1, Y1)
···
(Xn, Yn)
Training data

3

General Setup
Goal:
(X1, Y1)
···
(Xn, Yn)
Training data

=⇒

Z such that (Z Xj ) = Yj
Consistent program

3

General Setup
Goal:
(X1, Y1)
···
(Xn, Yn)

=⇒

Training data

Z such that (Z Xj ) = Yj
Consistent program

Challenge:
When n small, many programs consistent with training data.
I like <i>programs</i>, but I wish programs
would just program themselves since
I don’t like programming.

Move
Move
Move
Move
···

to beginning of third word, ...
to beginning of word after like, ...
7 spaces to the right, ...
to word with preﬁx program, ...

3

General Setup
Goal:
(X1, Y1)
···
(Xn, Yn)

=⇒

Z such that (Z Xj ) = Yj

Training data

Consistent program

Challenge:
When n small, many programs consistent with training data.
I like <i>programs</i>, but I wish programs
would just program themselves since
I don’t like programming.

Move
Move
Move
Move
···

to beginning of third word, ...
to beginning of word after like, ...
7 spaces to the right, ...
to word with preﬁx program, ...

Which program to choose?
3

Key Intuition
One task:
Want to choose a program which is simple (Occam’s razor).
Examples

=⇒

Z

4

Key Intuition
One task:
Want to choose a program which is simple (Occam’s razor).
Examples

=⇒

Z

What’s the right complexity metric (prior)?

4

Key Intuition
One task:
Want to choose a program which is simple (Occam’s razor).
Examples

=⇒

Z

What’s the right complexity metric (prior)? No general answer.

4

Key Intuition
One task:
Want to choose a program which is simple (Occam’s razor).
Examples

=⇒

Z

What’s the right complexity metric (prior)? No general answer.
Multiple tasks:
Task 1 examples
···
Task K examples

=⇒
=⇒

Z1
···
ZK

4

Key Intuition
One task:
Want to choose a program which is simple (Occam’s razor).
Examples

=⇒

Z

What’s the right complexity metric (prior)? No general answer.
Multiple tasks:
Task 1 examples
···
Task K examples

=⇒
=⇒

Z1
···
ZK

Find programs that share common subprograms.

4

Key Intuition
One task:
Want to choose a program which is simple (Occam’s razor).
Examples

=⇒

Z

What’s the right complexity metric (prior)? No general answer.
Multiple tasks:
Task 1 examples
···
Task K examples

=⇒
=⇒

Z1
···
ZK

Find programs that share common subprograms.
• Programs do tend to share common components.
4

Key Intuition
One task:
Want to choose a program which is simple (Occam’s razor).
Examples

=⇒

Z

What’s the right complexity metric (prior)? No general answer.
Multiple tasks:
Task 1 examples
···
Task K examples

=⇒
=⇒

Z1
···
ZK

Find programs that share common subprograms.
• Programs do tend to share common components.
• Penalize joint complexity of all K programs.
4

Outline of Proposed Solution
Program representation: What are subprograms?
C

Combinatory logic

1

B
+

S
I

B
∗

I

5

Outline of Proposed Solution
Program representation: What are subprograms?
C

Combinatory logic

1

B
+

S
I

B
∗

I

Probabilistic model: Which programs are favorable?
α0

Nonparametric Bayes

{Gt}
p0

Zi

Yij

Xij
n
K

5

Outline of Proposed Solution
Program representation: What are subprograms?
C
1

B

Combinatory logic

+

S
I

B
∗

I

Probabilistic model: Which programs are favorable?
α0

Nonparametric Bayes

{Gt}
p0

Zi

Yij

Xij
n
K

Statistical inference: How do we search for good programs?
r0

MCMC

r1Br
x y

r0 r
z

⇒

x

r1
y

z

5

Outline of Proposed Solution
Program representation: What are subprograms?
C
1

B

Combinatory logic

+

S
I

B
∗

I

Probabilistic model: Which programs are favorable?
α0

Nonparametric Bayes

{Gt}
p0

Zi

Yij

Xij
n
K

Statistical inference: How do we search for good programs?
r0

MCMC

r1Br
x y

r0 r
z

⇒

x

r1
y

z

6

Representation: What Language?
Goal: allow sharing of subprograms

7

Representation: What Language?
Goal: allow sharing of subprograms
Our language:
Combinatory logic [Sch¨nﬁnkel, 1924]
o

7

Representation: What Language?
Goal: allow sharing of subprograms
Our language:
Combinatory logic [Sch¨nﬁnkel, 1924]
o
+ higher-order combinators (new)
+ routing intuition, visual representation (new)

7

Representation: What Language?
Goal: allow sharing of subprograms
Our language:
Combinatory logic [Sch¨nﬁnkel, 1924]
o
+ higher-order combinators (new)
+ routing intuition, visual representation (new)
Properties: no mutation, no variables ⇒ simple semantics

7

Representation: What Language?
Goal: allow sharing of subprograms
Our language:
Combinatory logic [Sch¨nﬁnkel, 1924]
o
+ higher-order combinators (new)
+ routing intuition, visual representation (new)
Properties: no mutation, no variables ⇒ simple semantics
Result:
• Programs are trees
• Subprograms are subtrees
7

Programs with No Arguments
Example: compute min(3, 4)

8

Programs with No Arguments
Example: compute min(3, 4)
(if (< 3 4) 3 4)

8

Programs with No Arguments
Example: compute min(3, 4)
(if (< 3 4) 3 4)
4
3
if
4
<

3

8

Programs with No Arguments
Example: compute min(3, 4)
(if (< 3 4) 3 4)
4
3
if
4
<

3

General:
⇒ result of applying function x to argument y
x

y

8

Programs with No Arguments
Example: compute min(3, 4)
(if (< 3 4) 3 4)
4
3
if
4
<

3

General:
⇒ result of applying function x to argument y
x

y

Arguments are curried
8

Programs with No Arguments
Example: compute min(3, 4)
(if (< 3 4) 3 4)

(if true 3 4)
4

3
if
4
<

4

⇒

3
if

true

3

General:
⇒ result of applying function x to argument y
x

y

Arguments are curried
8

Programs with No Arguments
Example: compute min(3, 4)
(if (< 3 4) 3 4)

(if true 3 4)
4

3
if
4
<

4

⇒

3
if

⇒

3

true

3

General:
⇒ result of applying function x to argument y
x

y

Arguments are curried
8

Programs with One Argument
Example: x → x2 + 1

9

Programs with One Argument
Example: x → x2 + 1
1
λx . +
x
∗

x

Lambda calculus

9

Programs with One Argument
Example: x → x2 + 1
C
1
x
∗

x

Lambda calculus

1

B

λx . +
+

S
B

I

∗ I
Combinatory logic

9

Programs with One Argument
Example: x → x2 + 1
C
1
x
∗

x

Lambda calculus

1

B

λx . +
+

S
B

I

∗ I
Combinatory logic

Intuition:
Combinators {B, C, S, I} encode placement of arguments

9

Programs with One Argument
Example: x → x2 + 1
C
1
x
∗

x

Lambda calculus

1

B

λx . +
+

S
B

I

∗ I
Combinatory logic

Intuition:
Combinators {B, C, S, I} encode placement of arguments
Semantics:
r
⇔ (r x y)
x y
r ∈ {B, C, S, I}

9

Programs with One Argument
Example: x → x2 + 1
C
1
x
∗

x

Lambda calculus

1

B

λx . +
+

S
B

I

∗ I
Combinatory logic

Intuition:
Combinators {B, C, S, I} encode placement of arguments
Semantics:
r
Rules:
⇔ (r x y)
(B f g x) = (f (g x))
x y
...
r ∈ {B, C, S, I}

9

Programs with One Argument
Example: Apply x → x2 + 1 to 5

10

Programs with One Argument
Example: Apply x → x2 + 1 to 5
5

C
1

B
+

S
B
∗

I
I

10

Programs with One Argument
Example: Apply x → x2 + 1 to 5
C
1

B
+
∗

x

y

y
x

z

route left

S
B

z ⇔

C

5

I
I

10

Programs with One Argument
Example: Apply x → x2 + 1 to 5
1
5

B
+
∗

x

y

y
x

z

route left

S
B

z ⇔

C

I
I

10

Programs with One Argument
Example: Apply x → x2 + 1 to 5
1
5

B
+

z ⇔

C
x

y

∗

I
I

x

z

route left

S
B

y

z ⇔ x

B
x

y

y

z

route right

10

Programs with One Argument
Example: Apply x → x2 + 1 to 5
z ⇔

C

1

x

y

+
B
∗

I
I

x

z

route left

5

S

y

z ⇔ x

B
x

y

y

z

route right

10

Programs with One Argument
Example: Apply x → x2 + 1 to 5
z ⇔

C

1

x

y

+
B
∗

x

z

route left

5

S

y

I

z ⇔ x

B

I

x

y

y

z

route right
z ⇔

S
x

y

x

z

y

z

route left and right
10

Programs with One Argument
Example: Apply x → x2 + 1 to 5
z ⇔

C

1

x

y

+

y
x

z

route left

5

B
∗

5

I

z ⇔ x

B

I

x

y

y

z

route right
z ⇔

S
x

y

x

z

y

z

route left and right
10

Programs with One Argument
Example: Apply x → x2 + 1 to 5
z ⇔

C

1

x

y
x

y

+

z

route left

5

B
∗

5

I

z ⇔ x

B

I

x

y

y

z

route right
z ⇔

S
x

y

x

z

route left and right

y

z

I

x ⇔ x
stop
10

Programs with One Argument
Example: Apply x → x2 + 1 to 5
z ⇔

C
x

1

y
x

y

+

z

route left

5
5

B
∗

z ⇔ x

B

I

x

y

y

z

route right
z ⇔

S
x

y

x

z

route left and right

y

z

I

x ⇔ x
stop
10

Programs with One Argument
Example: Apply x → x2 + 1 to 5
z ⇔

C
x

y
x

y

z

route left

1
+
5

∗

z ⇔ x

B

5

x

y

y

z

route right
z ⇔

S
x

y

x

z

route left and right

y

z

I

x ⇔ x
stop
10

Programs with Multiple Arguments
Example: (x, y) → min(x, y)

11

Programs with Multiple Arguments
Example: (x, y) → min(x, y)
Classical: ﬁrst-order combinators {B, C, S, I}
Complete basis, so can implement min, but cumbersome

11

Programs with Multiple Arguments
Example: (x, y) → min(x, y)
Classical: ﬁrst-order combinators {B, C, S, I}
Complete basis, so can implement min, but cumbersome
New: higher-order combinators {B, C, S, I}∗
Inﬁnite basis, but resulting programs are more intuitive
e.g., CS routes 1st arg. left, 2nd arg. left and right

11

Programs with Multiple Arguments
Example: (x, y) → min(x, y)
Classical: ﬁrst-order combinators {B, C, S, I}
Complete basis, so can implement min, but cumbersome
New: higher-order combinators {B, C, S, I}∗
Inﬁnite basis, but resulting programs are more intuitive
e.g., CS routes 1st arg. left, 2nd arg. left and right

CS
SC
BB
if <

I
I
11

Programs with Multiple Arguments
Example: (x, y) → min(x, y)
Classical: ﬁrst-order combinators {B, C, S, I}
Complete basis, so can implement min, but cumbersome
New: higher-order combinators {B, C, S, I}∗
Inﬁnite basis, but resulting programs are more intuitive
e.g., CS routes 1st arg. left, 2nd arg. left and right
4
3

CS
SC
BB
if <

I
I
11

Programs with Multiple Arguments
Example: (x, y) → min(x, y)
Classical: ﬁrst-order combinators {B, C, S, I}
Complete basis, so can implement min, but cumbersome
New: higher-order combinators {B, C, S, I}∗
Inﬁnite basis, but resulting programs are more intuitive
e.g., CS routes 1st arg. left, 2nd arg. left and right
4
3

CS
SC
BB
if <

I
I
11

Programs with Multiple Arguments
Example: (x, y) → min(x, y)
Classical: ﬁrst-order combinators {B, C, S, I}
Complete basis, so can implement min, but cumbersome
New: higher-order combinators {B, C, S, I}∗
Inﬁnite basis, but resulting programs are more intuitive
e.g., CS routes 1st arg. left, 2nd arg. left and right
4

S
C

I
3

B
if
<

3
11

Programs with Multiple Arguments
Example: (x, y) → min(x, y)
Classical: ﬁrst-order combinators {B, C, S, I}
Complete basis, so can implement min, but cumbersome
New: higher-order combinators {B, C, S, I}∗
Inﬁnite basis, but resulting programs are more intuitive
e.g., CS routes 1st arg. left, 2nd arg. left and right
4

S
C

I
3

B
if
<

3
11

Programs with Multiple Arguments
Example: (x, y) → min(x, y)
Classical: ﬁrst-order combinators {B, C, S, I}
Complete basis, so can implement min, but cumbersome
New: higher-order combinators {B, C, S, I}∗
Inﬁnite basis, but resulting programs are more intuitive
e.g., CS routes 1st arg. left, 2nd arg. left and right

4
3
if
4
<

3
11

Using Combinators for Refactoring
min

max

CS
SC
BB
if <

CS
I

I

SC
BB
if >

I
I

12

Using Combinators for Refactoring
min

max

CS
SC
BB
if <

CS
I

I

SC
BB
if >

I
I

No signiﬁcant sharing of subtrees (subprograms)

12

Using Combinators for Refactoring
min

max

CS
SC
BB
if <

CS
SC

I
I

I

BB
if >

I

No signiﬁcant sharing of subtrees (subprograms)
Refactored:
<

CCS
CSC
BBB
if

I

I

>

CCS

I

CSC
BBB
if

I

I

I
12

Using Combinators for Refactoring
min

max

CS
SC
BB
if <

CS
I

I

SC

I

BB
if >

I

No signiﬁcant sharing of subtrees (subprograms)
Refactored:
<

CCS
CSC
BBB

I

I

>

CCS
CSC
BBB

if I
if I
Fruitful sharing of subtrees (subprograms)

I

I

12

Summary
Introduced new combinatory logic basis (intuition: routing)

13

Summary
Introduced new combinatory logic basis (intuition: routing)

Purpose of these combinators:
• Represent multi-argument functions
• Allow refactoring to expose common substructures

13

Summary
Introduced new combinatory logic basis (intuition: routing)

Purpose of these combinators:
• Represent multi-argument functions
• Allow refactoring to expose common substructures

Achieved uniformity: Every subtree is a subprogram

13

Outline of Proposed Solution
Program representation: What are subprograms?
C
1

B

Combinatory logic

+

S
I

B
∗

I

Probabilistic model: Which programs are favorable?
α0

Nonparametric Bayes

{Gt}
p0

Zi

Yij

Xij
n
K

Statistical inference: How do we search for good programs?
r0

MCMC

r1Br
x y

r0 r
z

⇒

x

r1
y

z

14

Probabilistic Context-Free Grammars
GenIndep(t): [returns a combinator of type t]

15

Probabilistic Context-Free Grammars
GenIndep(t): [returns a combinator of type t]
With probability λ0:

15

Probabilistic Context-Free Grammars
GenIndep(t): [returns a combinator of type t]
With probability λ0:
Return a random primitive combinator (e.g., +, 3, I)

15

Probabilistic Context-Free Grammars
GenIndep(t): [returns a combinator of type t]
With probability λ0:
Return a random primitive combinator (e.g., +, 3, I)
Else:
Choose a type s
x ← GenIndep(s → t)

15

Probabilistic Context-Free Grammars
GenIndep(t): [returns a combinator of type t]
With probability λ0:
Return a random primitive combinator (e.g., +, 3, I)
Else:
Choose a type s
x ← GenIndep(s → t)
y ← GenIndep(s)

15

Probabilistic Context-Free Grammars
GenIndep(t): [returns a combinator of type t]
With probability λ0:
Return a random primitive combinator (e.g., +, 3, I)
Else:
Choose a type s
x ← GenIndep(s → t)
y ← GenIndep(s)
return (x, y)

15

Probabilistic Context-Free Grammars
GenIndep(t): [returns a combinator of type t]
With probability λ0:
Return a random primitive combinator (e.g., +, 3, I)
Else:
Choose a type s
x ← GenIndep(s → t)
y ← GenIndep(s)
return (x, y)

Example:
GenIndep(int → int)

=⇒

+

1

15

Probabilistic Context-Free Grammars
GenIndep(t): [returns a combinator of type t]
With probability λ0:
Return a random primitive combinator (e.g., +, 3, I)
Else:
Choose a type s
x ← GenIndep(s → t)
y ← GenIndep(s)
return (x, y)

Example:
GenIndep(int → int)

=⇒

∗
1
−

3

15

Probabilistic Context-Free Grammars
GenIndep(t): [returns a combinator of type t]
With probability λ0:
Return a random primitive combinator (e.g., +, 3, I)
Else:
Choose a type s
x ← GenIndep(s → t)
y ← GenIndep(s)
return (x, y)

Example:
GenIndep(int → int)

=⇒

∗
1
−

3

Problem: No encouragement to share subprograms
15

Adaptor Grammars [Johnson, 2007]
Ct ← [ ] for each type t [cached list of combinators]

16

Adaptor Grammars [Johnson, 2007]
Ct ← [ ] for each type t [cached list of combinators]
(notation: return∗ c adds c to Ct and returns c)

16

Adaptor Grammars [Johnson, 2007]
Ct ← [ ] for each type t [cached list of combinators]
(notation: return∗ c adds c to Ct and returns c)
GenCache(t): [returns a combinator of type t]
With probability α0+Nttd :
α0 +|C |

16

Adaptor Grammars [Johnson, 2007]
Ct ← [ ] for each type t [cached list of combinators]
(notation: return∗ c adds c to Ct and returns c)
GenCache(t): [returns a combinator of type t]
With probability α0+Nttd :
α0 +|C |
With probability λ0:
Return∗ a random primitive combinator (e.g., +, 3, I)
Else:
Choose a type s
x ← GenCache(s → t)
y ← GenCache(s)
Return∗ (x, y)
Else:

16

Adaptor Grammars [Johnson, 2007]
Ct ← [ ] for each type t [cached list of combinators]
(notation: return∗ c adds c to Ct and returns c)
GenCache(t): [returns a combinator of type t]
With probability α0+Nttd :
α0 +|C |
With probability λ0:
Return∗ a random primitive combinator (e.g., +, 3, I)
Else:
Choose a type s
x ← GenCache(s → t)
y ← GenCache(s)
Return∗ (x, y)
Else:
Mz −d
Return∗ z ∈ Ct with probability |Ct|−Ntd

16

Adaptor Grammars [Johnson, 2007]
Ct ← [ ] for each type t [cached list of combinators]
(notation: return∗ c adds c to Ct and returns c)
GenCache(t): [returns a combinator of type t]
With probability α0+Nttd :
α0 +|C |
With probability λ0:
Return∗ a random primitive combinator (e.g., +, 3, I)
Else:
Choose a type s
x ← GenCache(s → t)
y ← GenCache(s)
Return∗ (x, y)
Else:
Mz −d
Return∗ z ∈ Ct with probability |Ct|−Ntd

Interpretation of cache Ct: library of generally useful
(unnamed) subroutines which are reused.
16

Outline of Proposed Solution
Program representation: What are subprograms?
C
1

B

Combinatory logic

+

S
I

B
∗

I

Probabilistic model: Which programs are favorable?
α0

Nonparametric Bayes

{Gt}
p0

Zi

Yij

Xij
n
K

Statistical inference: How do we search for good programs?
r0

MCMC

r1Br
x y

r0 r
z

⇒

x

r1
y

z

17

Inference via MCMC
User provides tree structure that encodes set of programs U
Objective: sample from posterior given program in U

18

Inference via MCMC
User provides tree structure that encodes set of programs U
Objective: sample from posterior given program in U
Use Metropolis-Hastings
Proposal: sample a random program transformation

18

Inference via MCMC
User provides tree structure that encodes set of programs U
Objective: sample from posterior given program in U
Use Metropolis-Hastings
Proposal: sample a random program transformation
Program transformations maintain invariant that
program is correct (likelihood is 1)

18

Inference via MCMC
User provides tree structure that encodes set of programs U
Objective: sample from posterior given program in U
Use Metropolis-Hastings
Proposal: sample a random program transformation
Program transformations maintain invariant that
program is correct (likelihood is 1)
Two types of transformations:
1. Switching
2. Refactoring

18

Program transformations (MCMC moves)
Switching: Change content, preserve empirical semantics

19

Program transformations (MCMC moves)
Switching: Change content, preserve empirical semantics

Data: {(2, 8)}

19

Program transformations (MCMC moves)
Switching: Change content, preserve empirical semantics
S
Data: {(2, 8)}

∗
+ 2
[x → x(x + 2)]

19

Program transformations (MCMC moves)
Switching: Change content, preserve empirical semantics
S

S
Data: {(2, 8)}

∗
+ 2
[x → x(x + 2)]

⇔

∗

S
∗

I
[x → x3]

19

Program transformations (MCMC moves)
Switching: Change content, preserve empirical semantics
S

S
Data: {(2, 8)}

∗
+ 2
[x → x(x + 2)]

⇔

∗

S
∗

I
[x → x3]

Purpose: change generalization

19

Program transformations (MCMC moves)
Switching: Change content, preserve empirical semantics
S

S
Data: {(2, 8)}

∗
+ 2
[x → x(x + 2)]

⇔

∗

S
∗

I
[x → x3]

Purpose: change generalization
Refactoring: Change form, preserve total semantics

19

Program transformations (MCMC moves)
Switching: Change content, preserve empirical semantics
S

S
Data: {(2, 8)}

∗
+ 2
[x → x(x + 2)]

⇔

∗

S
∗

I
[x → x3]

Purpose: change generalization
Refactoring: Change form, preserve total semantics
S
∗
+ 2
[x → x(x + 2)]
19

Program transformations (MCMC moves)
Switching: Change content, preserve empirical semantics
S

S
Data: {(2, 8)}

∗
+ 2
[x → x(x + 2)]

⇔

∗

S
∗

I
[x → x3]

Purpose: change generalization
Refactoring: Change form, preserve total semantics
S
∗
+ 2
[x → x(x + 2)]

⇔

2
BS
∗ +
[x → x(x + 2)]
19

Program transformations (MCMC moves)
Switching: Change content, preserve empirical semantics
S

S
Data: {(2, 8)}

∗
+ 2
[x → x(x + 2)]

⇔

∗

S
∗

I
[x → x3]

Purpose: change generalization
Refactoring: Change form, preserve total semantics
S
2
BS
⇔
∗ +
+ 2
[x → x(x + 2)]
[x → x(x + 2)]
Purpose: expose diﬀerent subprograms for sharing
∗

19

Text Editing Experiments
Setup:
Dataset of [Lau et al., 2003]
K = 24 tasks
Each task: train on 2–5 examples, test on
10 random trials

13 examples

20

Text Editing Experiments
Setup:
Dataset of [Lau et al., 2003]
K = 24 tasks
Each task: train on 2–5 examples, test on
10 random trials

13 examples

Example task:
Cardinals 5, Pirates 2.
⇒
GameScore[ winner ’Cardinals’; loser ’Pirates’; scores [5, 2]].

20

Experimental Results

Uniform prior
Independent prior
Joint prior

21

Experimental Results
25

Uniform prior
Independent prior
Joint prior

error

20

15

10

5

2

3

4

5

21

Experimental Results
25

Uniform prior
Independent prior
Joint prior

error

20

15

10

5

2

3

4

5

Observations:
• Independent prior is even worse than uniform prior
21

Experimental Results
25

Uniform prior
Independent prior
Joint prior

error

20

15

10

5

2

3

4

5

Observations:
• Independent prior is even worse than uniform prior
• Joint prior (multi-task learning) is eﬀective
21

Summary
X ⇒

⇒ Y

22

Summary
X ⇒

program

⇒ Y

22

Summary
X ⇒

program

⇒ Y

Key challenge: learn programs from few examples

22

Summary
X ⇒

program

⇒ Y

Key challenge: learn programs from few examples
Main idea: share subprograms across multiple tasks

22

Summary
X ⇒

program

⇒ Y

Key challenge: learn programs from few examples
Main idea: share subprograms across multiple tasks
Tools:
• Combinatory logic: expose subprograms to be shared
• Adaptor grammars: encourage sharing of subprograms
• Metropolis-Hastings: proposals are program transformations
22

