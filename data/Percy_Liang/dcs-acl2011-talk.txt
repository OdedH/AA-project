Learning Dependency-Based Compositional Semantics
ACL 2011 – Portland, OR

Percy Liang

Michael I. Jordan

Berkeley
N L P

Dan Klein

The Big Picture
What is the most populous city in California?
System
Los Angeles

2

The Big Picture
What is the most populous city in California?
Database

System
Los Angeles

2

The Big Picture
What is the most populous city in California?
Database

System
Los Angeles

Expensive: logical forms
[Zelle & Mooney, 1996; Zettlemoyer & Collins, 2005]
[Wong & Mooney, 2007; Kwiatkowski et al., 2010]

What is the most populous city in California?
⇒ argmax(λx.city(x) ∧ loc(x, CA), λx.pop.(x))
How many states border Oregon?
⇒ count(λx.state(x) ∧ border(x, OR)
···

2

The Big Picture
What is the most populous city in California?
Database

System
Los Angeles

Expensive: logical forms

Cheap: answers

[Zelle & Mooney, 1996; Zettlemoyer & Collins, 2005]
[Wong & Mooney, 2007; Kwiatkowski et al., 2010]

[Clarke et al., 2010]
[this work]

What is the most populous city in California?
⇒ argmax(λx.city(x) ∧ loc(x, CA), λx.pop.(x))
How many states border Oregon?
⇒ count(λx.state(x) ∧ border(x, OR)
···

What is the most populous city in California?
⇒ Los Angeles
How many states border Oregon?
⇒3
···

2

Challenges
Computational: how to eﬃciently search exponential space?

3

Challenges
Computational: how to eﬃciently search exponential space?
What is the most populous city in California?

Los Angeles

3

Challenges
Computational: how to eﬃciently search exponential space?
What is the most populous city in California?
λx.state(x)
Los Angeles

3

Challenges
Computational: how to eﬃciently search exponential space?
What is the most populous city in California?
λx.city(x)
Los Angeles

3

Challenges
Computational: how to eﬃciently search exponential space?
What is the most populous city in California?
λx.city(x) ∧ loc(x, CA)
Los Angeles

3

Challenges
Computational: how to eﬃciently search exponential space?
What is the most populous city in California?
λx.state(x) ∧ border(x, CA)
Los Angeles

3

Challenges
Computational: how to eﬃciently search exponential space?
What is the most populous city in California?
population(CA)

Los Angeles

3

Challenges
Computational: how to eﬃciently search exponential space?
What is the most populous city in California?
argmax(λx.city(x) ∧ loc(x, CA), λx.population(x))

Los Angeles

3

Challenges
Computational: how to eﬃciently search exponential space?
What is the most populous city in California?
· · · LF LF LF LF LF LF LF LF LF LF LF LF LF LF LF LF LF · · ·
Los Angeles

3

Challenges
Computational: how to eﬃciently search exponential space?
What is the most populous city in California?
· · · LF LF LF LF LF LF LF LF LF LF LF LF LF LF LF LF LF · · ·
Los Angeles
Statistical: how to parametrize mapping from sentence to logical form?
What is the most populous city in California?

argmax(λx.city(x) ∧ loc(x, CA), λx.population(x))
3

New: Dependency-Based Compositional Semantics (DCS)
most populous city in California

4

New: Dependency-Based Compositional Semantics (DCS)
most populous city in California

city

populous

in

most

California

4

New: Dependency-Based Compositional Semantics (DCS)
most populous city in California

city

population

loc

argmax

CA

4

New: Dependency-Based Compositional Semantics (DCS)
most populous city in California

city
1
1

population

1
1

loc
2

c

argmax

1

CA

4

New: Dependency-Based Compositional Semantics (DCS)
most populous city in California

city
1
1

population

1
1

loc
2

c

argmax

1

CA

Los Angeles

4

New: Dependency-Based Compositional Semantics (DCS)
most populous city in California

city
1
1

population

1
1

loc
2

c

argmax

1

CA

Los Angeles
Advantages of DCS: nice computational, statistical, linguistic properties
4

Outline
city
1

1

1

2

loc
2

Representation

traverse
1

1

1

state

river

1

1

1

1

1

border

major

1

traverse

2

2

1

1

CA

AZ

x

Learning

θ

z

w

y

Experiments
5

Basic DCS Trees
DCS tree

Database

city
1
1

loc
2
1

CA

6

Basic DCS Trees
DCS tree

Constraints

Database

city
1
1

loc
2
1

CA

A DCS tree encodes a constraint satisfaction problem (CSP)
6

Basic DCS Trees
DCS tree
city
1
1

Constraints
c ∈ city

Database
city

San Francisco
Chicago
Boston
···

loc
2
1

CA

A DCS tree encodes a constraint satisfaction problem (CSP)
6

Basic DCS Trees
DCS tree
city

Constraints
c ∈ city

1
1

loc
2
1

CA

∈ loc

Database
city

San Francisco
Chicago
Boston
···
loc

Mount Shasta
San Francisco
Boston
···

California
California
Massachusetts
···

A DCS tree encodes a constraint satisfaction problem (CSP)
6

Basic DCS Trees
DCS tree
city

Constraints
c ∈ city

1
1

loc

∈ loc

2

city

San Francisco
Chicago
Boston
···
loc

1

CA

Database

s ∈ CA

Mount Shasta
San Francisco
Boston
···

California
California
Massachusetts
···

CA

California

A DCS tree encodes a constraint satisfaction problem (CSP)
6

Basic DCS Trees
DCS tree
city

Constraints
c ∈ city

1

c1 =

1

1

loc

∈ loc

2

city

San Francisco
Chicago
Boston
···
loc

1

CA

Database

s ∈ CA

Mount Shasta
San Francisco
Boston
···

California
California
Massachusetts
···

CA

California

A DCS tree encodes a constraint satisfaction problem (CSP)
6

Basic DCS Trees
DCS tree
city

Constraints
c ∈ city

1

c1 =

1

1

loc

∈ loc

2
2

= s1

1

CA

s ∈ CA

Database
city

San Francisco
Chicago
Boston
···
loc

Mount Shasta
San Francisco
Boston
···

California
California
Massachusetts
···

CA

California

A DCS tree encodes a constraint satisfaction problem (CSP)
6

Basic DCS Trees
DCS tree
city

Constraints
c ∈ city

1

c1 =

1

1

loc

∈ loc

2
2

= s1

1

CA

s ∈ CA

Database
city

San Francisco
Chicago
Boston
···
loc

Mount Shasta
San Francisco
Boston
···

California
California
Massachusetts
···

CA

California

A DCS tree encodes a constraint satisfaction problem (CSP)
6

Basic DCS Trees
DCS tree
city

Constraints
c ∈ city

1

c1 =

1

1

loc

∈ loc

2
2

= s1

1

CA

s ∈ CA

Database
city

San Francisco
Chicago
Boston
···
loc

Mount Shasta
San Francisco
Boston
···

California
California
Massachusetts
···

CA

California

A DCS tree encodes a constraint satisfaction problem (CSP)
6

Basic DCS Trees
DCS tree
city

Constraints
c ∈ city

1

c1 =

1

1

loc

∈ loc

2
2

= s1

1

CA

s ∈ CA

Database
city

San Francisco
Chicago
Boston
···
loc

Mount Shasta
San Francisco
Boston
···

California
California
Massachusetts
···

CA

California

A DCS tree encodes a constraint satisfaction problem (CSP)
6

Basic DCS Trees
DCS tree
city

Constraints
c ∈ city

1

c1 =

1

1

loc

∈ loc

2
2

= s1

1

CA

s ∈ CA

Database
city

San Francisco
Chicago
Boston
···
loc

Mount Shasta
San Francisco
Boston
···

California
California
Massachusetts
···

CA

California

A DCS tree encodes a constraint satisfaction problem (CSP)
Computation: dynamic programming ⇒ time = O(# nodes)
6

Properties of DCS Trees
city
1

1

1

2

loc

traverse

2

1

1

1

state

river

1
1

border

1
1

major

1
1

traverse

2

2

1

1

CA

AZ

7

Properties of DCS Trees
city
1

1

1

2

loc

traverse

2

1

1

1

state

river

1
1

border

1
1

major

1
1

traverse

2

2

1

1

CA

AZ

Trees

7

Properties of DCS Trees
city
1

1

1

2

loc

traverse

2

1

1

1

state

river

1
1

border

1
1

major

1
1

traverse

2
1

1

CA

Linguistics

2

AZ

Trees

syntactic locality

7

Properties of DCS Trees
city
1

1

1

2

loc

traverse

2

1

1

1

state

river

1
1

border

1
1

major

1
1

traverse

2
1

syntactic locality

1

CA

Linguistics

2

AZ

Trees

Computation
eﬃcient interpretation

7

Divergence between Syntactic and Semantic Scope
most populous city in California

8

Divergence between Syntactic and Semantic Scope
most populous city in California
Syntax
city

populous

in

most

California

8

Divergence between Syntactic and Semantic Scope
most populous city in California
Syntax

Semantics

city

populous

in

most

argmax(λx.city(x) ∧ loc(x, CA), λx.population(x))

California

8

Divergence between Syntactic and Semantic Scope
most populous city in California
Syntax

Semantics

city

populous

in

most

argmax(λx.city(x) ∧ loc(x, CA), λx.population(x))

California

8

Divergence between Syntactic and Semantic Scope
most populous city in California
Syntax

Semantics

city

populous

in

most

argmax(λx.city(x) ∧ loc(x, CA), λx.population(x))

California

Problem: syntactic scope is lower than semantic scope

8

Divergence between Syntactic and Semantic Scope
most populous city in California
Syntax

Semantics

city

populous

in

most

argmax(λx.city(x) ∧ loc(x, CA), λx.population(x))

California

Problem: syntactic scope is lower than semantic scope
If DCS trees look like syntax, how do we get correct semantics?

8

Solution: Mark-Execute
most populous city in California
Superlatives
∗∗
x1

city
1
1

population

1
1

loc
2

c

argmax

1

CA

9

Solution: Mark-Execute
most populous city in California
Superlatives
∗∗
x1

city
1
1

population

Mark at syntactic scope

1
1

loc
2

c

argmax

1

CA

9

Solution: Mark-Execute
most populous city in California
Superlatives
∗∗
Execute at semantic scope

x1

city
1
1

population

Mark at syntactic scope

1
1

loc
2

c

argmax

1

CA

9

Solution: Mark-Execute
Alaska borders no states.
Negation
∗∗
Execute at semantic scope

x1

border
1 2
1

AK

1

state

Mark at syntactic scope
q

no

9

Solution: Mark-Execute
Some river traverses every city.
Quantiﬁcation (narrow)
∗∗
Execute at semantic scope

x12

traverse
1 2
1

1

river

city

q

q

some

every

Mark at syntactic scope

9

Solution: Mark-Execute
Some river traverses every city.
Quantiﬁcation (wide)
∗∗
Execute at semantic scope

x21

traverse
1 2
1

1

river

city

q

q

some

every

Mark at syntactic scope

9

Solution: Mark-Execute
Some river traverses every city.
Quantiﬁcation (wide)
∗∗
Execute at semantic scope

x21

traverse
1 2
1

1

river

city

q

q

some

every

Mark at syntactic scope

Analogy: Montague’s quantifying in, Carpenter’s scoping constructor
9

Outline
city
1

1

1

2

loc
2

Representation

traverse
1

1

1

state

river

1

1

1

1

1

border

major

1

traverse

2

2

1

1

CA

AZ

x

Learning

θ

z

w

y

Experiments
10

Graphical Model

∗∗
1
2

z

capital
1
1

CA

database
w

11

Graphical Model

∗∗
1
2

z

capital
1
1

CA

database
w

y Sacramento

11

Graphical Model

∗∗
1
2

z

capital
1
1

CA

Interpretation:

p(y | z, w)

(deterministic)
database
w

y Sacramento

11

Graphical Model
x

capital of
California?

∗∗
1
2

z

capital
1
1

CA

Interpretation:

p(y | z, w)

(deterministic)
database
w

y Sacramento

11

Graphical Model
x

capital of
California?

∗∗
1

parameters

2

θ

z

capital
1
1

CA

Interpretation:

p(y | z, w)

(deterministic)
database
w

y Sacramento

11

Graphical Model
x

capital of
California?
Semantic Parsing:
∗∗

p(z | x, θ)

(probabilistic)

1

parameters

2

θ

z

capital
1
1

CA

Interpretation:

p(y | z, w)

(deterministic)
database
w

y Sacramento

11

Plan
x

capital of
California?

∗∗
1

parameters

2

θ

• What’s possible? z ∈ ?

z

capital

• What’s probable? p(z | x, θ)

1
1

CA

• Learning θ to data

database
w

y Sacramento

12

Words to Predicates (Lexical Semantics)

What is the

most

populous

city

in CA ?

13

Words to Predicates (Lexical Semantics)

CA

What is the

most

populous

city

in CA ?

Lexical Triggers:
1. String match

CA

⇒ CA

13

Words to Predicates (Lexical Semantics)

argmax

What is the

most

CA

populous

city

in CA ?

Lexical Triggers:
1. String match

CA

⇒ CA

2. Function words (20 words) most ⇒ argmax

13

Words to Predicates (Lexical Semantics)

argmax

What is the

city
state
river
population

city
state
river
population

CA

most

populous

city

in CA ?

Lexical Triggers:
1. String match

CA

⇒ CA

2. Function words (20 words) most ⇒ argmax
3. Nouns/adjectives

city ⇒ city state river population

13

Predicates to DCS Trees (Compositional Semantics)
Ci,j = set of DCS trees for span [i, j]

i

most populous

city in California

j
14

Predicates to DCS Trees (Compositional Semantics)
Ci,j = set of DCS trees for span [i, j]

i

most populous

k

city in California

j
14

Predicates to DCS Trees (Compositional Semantics)
Ci,j = set of DCS trees for span [i, j]

Ci,k

i

most populous

Ck,j

k

city in California

j
14

Predicates to DCS Trees (Compositional Semantics)
Ci,j = set of DCS trees for span [i, j]

population

city
1

c

1

argmax

loc
2
1

CA

Ci,k

i

most populous

Ck,j

k

city in California

j
14

Predicates to DCS Trees (Compositional Semantics)
Ci,j = set of DCS trees for span [i, j]
city
1
1

1

population
population
c

1

loc
2

argmax

argmax

city

1

c

1

CA

1

loc
2
1

CA

Ci,k

i

most populous

Ck,j

k

city in California

j
14

Predicates to DCS Trees (Compositional Semantics)
Ci,j = set of DCS trees for span [i, j]
city
1
2

1

population
population
c

1

loc
2

argmax

argmax

city

1

c

1

CA

1

loc
2
1

CA

Ci,k

i

most populous

Ck,j

k

city in California

j
14

Predicates to DCS Trees (Compositional Semantics)
Ci,j = set of DCS trees for span [i, j]
city
1
1

1
1

loc

c

argmax

2

2

city

1

population

loc
1

1

population

CA

1

loc

c

2

argmax

1

CA

Ci,k

i

most populous

Ck,j

k

city in California

j
14

Predicates to DCS Trees (Compositional Semantics)
Ci,j = set of DCS trees for span [i, j]
city
1
2

1
1

loc

c

argmax

1

2

city

1

population

loc
1

1

population

CA

1

loc

c

2

argmax

1

CA

Ci,k

i

most populous

Ck,j

k

city in California

j
14

Predicates to DCS Trees (Compositional Semantics)
Ci,j = set of DCS trees for span [i, j]
city
1
2

1
1

border

c

argmax

1

2

city

1

population

loc
1

1

population

CA

1

loc

c

2

argmax

1

CA

Ci,k

i

most populous

Ck,j

k

city in California

j
14

Predicates to DCS Trees (Compositional Semantics)
Ci,j = set of DCS trees for span [i, j]
population
1
c

1

argmax

city
1

1

2

loc

1

2

CA

argmax

1

loc

c

city

1

population

1

CA

Ci,k

i

most populous

Ck,j

k

city in California

j
14

Comparison
Montague semantics

DCS

15

Comparison
Montague semantics
Logical form

DCS

lambda calculus formulae

DCS trees

λx.city(x) ∧ loc(x, CA)

city 1 1 loc 2 1 CA

15

Comparison
Montague semantics

DCS

lambda calculus formulae

DCS trees

λx.city(x) ∧ loc(x, CA)

city 1 1 loc 2 1 CA

Lexicon

categories + lambda calculus

predicates

major

np/np : λp.λx.p(x) ∧ major(x)

major

Logical form

15

Comparison
Montague semantics

DCS

lambda calculus formulae

DCS trees

λx.city(x) ∧ loc(x, CA)

city 1 1 loc 2 1 CA

Lexicon

categories + lambda calculus

predicates

major

np/np : λp.λx.p(x) ∧ major(x)

major

Construction

combinator rules

dependency parsing

f:a/b g:b
f(g):a

f i

Logical form

j g

15

Comparison
Montague semantics

DCS

lambda calculus formulae

DCS trees

λx.city(x) ∧ loc(x, CA)

city 1 1 loc 2 1 CA

Lexicon

categories + lambda calculus

predicates

major

np/np : λp.λx.p(x) ∧ major(x)

major

Construction

combinator rules

dependency parsing

f:a/b g:b
f(g):a

f i

generate exact set

generate overapproximation

Logical form

Goal

j g

15

Comparison
Montague semantics

DCS

lambda calculus formulae

DCS trees

λx.city(x) ∧ loc(x, CA)

city 1 1 loc 2 1 CA

Lexicon

categories + lambda calculus

predicates

major

np/np : λp.λx.p(x) ∧ major(x)

major

Construction

combinator rules

dependency parsing

f:a/b g:b
f(g):a

f i

generate exact set

generate overapproximation

Logical form

Goal

j g

DCS allows more ﬂexibility ⇒ simpler
15

Plan
x

capital of
California?

∗∗
1

parameters

2

θ

• What’s possible? z ∈ ?

z

capital

• What’s probable? p(z | x, θ)

1
1

CA

• Learning θ to data

database
w

y Sacramento

16

Log-linear Model
1

1

2

1

z:

city

loc

CA

x:

city

in

California

17

Log-linear Model
1

1

2

1

z:

city

loc

CA

x:

city

in

California

features(x, z) =

(

)
17

Log-linear Model
1

1

2

1

z:

city

loc

CA

x:

city

in

California

features(x, z) =

(

in

loc

)
17

Log-linear Model
1

1

2

1

z:

city

loc

CA

x:

city

in

California

features(x, z) =

(

in

loc

city 1 1 loc

)
17

Log-linear Model
1

1

2

1

z:

city

loc

CA

x:

city

in

California

features(x, z) =

(

in

loc

city 1 1 loc

···

)
17

Log-linear Model
1

1

2

1

z:

city

loc

CA

x:

city

in

California

features(x, z) =

(

in

loc

city 1 1 loc

···

)

score(x, z) = features(x, z) · θ

17

Log-linear Model
1

1

2

1

z:

city

loc

CA

x:

city

in

California

features(x, z) =

(

in

loc

city 1 1 loc

···

)

score(x, z) = features(x, z) · θ
p(z | x, θ) ∝ escore(x,z)

17

Plan
x

capital of
California?

∗∗
1

parameters

2

θ

• What’s possible? z ∈ ?

z

capital

• What’s probable? p(z | x, θ)

1
1

CA

• Learning θ to data

database
w

y Sacramento

18

Learning
Objective:

p(y | z, w) p(z | x, θ)
Interpretation

Semantic parsing

19

Learning
Objective:

maxθ

p(y | z, w) p(z | x, θ)
Interpretation

Semantic parsing

19

Learning
Objective:

maxθ

z

p(y | z, w) p(z | x, θ)
Interpretation

Semantic parsing

19

Learning
Objective:

maxθ

z

p(y | z, w) p(z | x, θ)
Interpretation

Semantic parsing

EM-like Algorithm:
parameters θ

(0, 0, . . . , 0)

19

Learning
Objective:

maxθ

z

p(y | z, w) p(z | x, θ)
Interpretation

Semantic parsing

EM-like Algorithm:
parameters θ
enumerate/score DCS trees
(0, 0, . . . , 0)

19

Learning
Objective:

maxθ

z

p(y | z, w) p(z | x, θ)
Interpretation

Semantic parsing

EM-like Algorithm:
parameters θ

k-best list

(0, 0, . . . , 0)

tree1
tree2
tree3
tree4
tree5

enumerate/score DCS trees

19

Learning
Objective:

maxθ

z

p(y | z, w) p(z | x, θ)
Interpretation

Semantic parsing

EM-like Algorithm:
parameters θ

k-best list
enumerate/score DCS trees

(0.2, −1.3, . . . , 0.7)
numerical optimization (L-BFGS)

tree1
tree2
tree3
tree4
tree5

19

Learning
Objective:

maxθ

z

p(y | z, w) p(z | x, θ)
Interpretation

Semantic parsing

EM-like Algorithm:
parameters θ

k-best list
enumerate/score DCS trees

(0.2, −1.3, . . . , 0.7)
numerical optimization (L-BFGS)

tree3
tree8
tree6
tree2
tree4

19

Learning
Objective:

maxθ

z

p(y | z, w) p(z | x, θ)
Interpretation

Semantic parsing

EM-like Algorithm:
parameters θ

k-best list
enumerate/score DCS trees

(0.3, −1.4, . . . , 0.6)
numerical optimization (L-BFGS)

tree3
tree8
tree6
tree2
tree4

19

Learning
Objective:

maxθ

z

p(y | z, w) p(z | x, θ)
Interpretation

Semantic parsing

EM-like Algorithm:
parameters θ

k-best list
enumerate/score DCS trees

(0.3, −1.4, . . . , 0.6)
numerical optimization (L-BFGS)

tree3
tree8
tree2
tree4
tree9

19

Outline
city
1

1

1

2

loc
2

Representation

traverse
1

1

1

state

river

1

1

1

1

1

border

major

1

traverse

2

2

1

1

CA

AZ

x

Learning

θ

z

w

y

Experiments
20

Experimental Setup
Benchmarks:
US Geography (Geo): What is the capital of California? ⇒ Sacramento
Job Search (Jobs): Show me jobs that require C++ ⇒ Job1, Job5, Job9

21

Experimental Setup
Benchmarks:
US Geography (Geo): What is the capital of California? ⇒ Sacramento
Job Search (Jobs): Show me jobs that require C++ ⇒ Job1, Job5, Job9
Evaluation: answer accuracy

21

Experimental Setup
Benchmarks:
US Geography (Geo): What is the capital of California? ⇒ Sacramento
Job Search (Jobs): Show me jobs that require C++ ⇒ Job1, Job5, Job9
Evaluation: answer accuracy
Possible types of supervision:
Answers: Los Angeles

21

Experimental Setup
Benchmarks:
US Geography (Geo): What is the capital of California? ⇒ Sacramento
Job Search (Jobs): Show me jobs that require C++ ⇒ Job1, Job5, Job9
Evaluation: answer accuracy
Possible types of supervision:
Answers: Los Angeles
General lexicon (domain-independent): no ⇒ not
Speciﬁc lexicon (domain-dependent): city ⇒ city

21

Experimental Setup
Benchmarks:
US Geography (Geo): What is the capital of California? ⇒ Sacramento
Job Search (Jobs): Show me jobs that require C++ ⇒ Job1, Job5, Job9
Evaluation: answer accuracy
Possible types of supervision:
Answers: Los Angeles
General lexicon (domain-independent): no ⇒ not
Speciﬁc lexicon (domain-dependent): city ⇒ city
Logical forms: argmax(λx.city(x) ∧ loc(x, CA), λx.population(x))

21

Experiment 1
On Geo, 250 training examples, 250 test examples

100

test accuracy

95
90
85
80
75

22

Experiment 1
On Geo, 250 training examples, 250 test examples
System Description
Lexicon (gen./spec.) Logical forms
cgcr10 FunQL [Clarke et al., 2010]

100

test accuracy

95
90
85
80
75

73.2%
cgcr10

22

Experiment 1
On Geo, 250 training examples, 250 test examples
System Description
Lexicon (gen./spec.) Logical forms
cgcr10 FunQL [Clarke et al., 2010]
dcs
our system

100

test accuracy

95
90
85

78.9%

80
75

73.2%
cgcr10

dcs

22

Experiment 1
On Geo, 250 training examples, 250 test examples
Description
Lexicon (gen./spec.) Logical forms
FunQL [Clarke et al., 2010]
our system
our system
100
95

test accuracy

System
cgcr10
dcs
dcs+

87.2%

90
85

78.9%

80
75

73.2%
cgcr10

dcs

dcs+

22

Experiment 2
On Geo, 600 training examples, 280 test examples

23

Experiment 2
On Geo, 600 training examples, 280 test examples
System Description

Lexicon Logical forms

100

test accuracy

95
90
85
80
75

23

Experiment 2
On Geo, 600 training examples, 280 test examples
System Description
zc05
CCG [Zettlemoyer & Collins, 2005]

Lexicon Logical forms

100

test accuracy

95
90
85
80

79.3%

75

zc05
23

Experiment 2
On Geo, 600 training examples, 280 test examples
System Description
zc05
CCG [Zettlemoyer & Collins, 2005]
zc07
relaxed CCG [Zettlemoyer & Collins, 2007]

Lexicon Logical forms

100

test accuracy

95
90

86.1%

85
80

79.3%

75

zc05

zc07
23

Experiment 2
On Geo, 600 training examples, 280 test examples
Description
Lexicon Logical forms
CCG [Zettlemoyer & Collins, 2005]
relaxed CCG [Zettlemoyer & Collins, 2007]
CCG w/uniﬁcation [Kwiatkowski et al., 2010]

100
95

test accuracy

System
zc05
zc07
kzgs10

88.9%

90

86.1%

85
80

79.3%

75

zc05

zc07

kzgs10
23

Experiment 2
On Geo, 600 training examples, 280 test examples
Description
Lexicon Logical forms
CCG [Zettlemoyer & Collins, 2005]
relaxed CCG [Zettlemoyer & Collins, 2007]
CCG w/uniﬁcation [Kwiatkowski et al., 2010]
our system
100
95

test accuracy

System
zc05
zc07
kzgs10
dcs

90

86.1%

88.9% 88.6%

85
80

79.3%

75

zc05

zc07

kzgs10

dcs
23

Experiment 2
On Geo, 600 training examples, 280 test examples
Description
Lexicon Logical forms
CCG [Zettlemoyer & Collins, 2005]
relaxed CCG [Zettlemoyer & Collins, 2007]
CCG w/uniﬁcation [Kwiatkowski et al., 2010]
our system
our system
100
95

test accuracy

System
zc05
zc07
kzgs10
dcs
dcs+

90

86.1%

88.9% 88.6%

91.1%

85
80

79.3%

75

zc05

zc07

kzgs10

dcs

dcs+
23

Some Intuition on Learning

24

Some Intuition on Learning
(1) search DCS trees (hard!)
parameters θ

k-best lists
(2) numerical optimization

24

Some Intuition on Learning
(1) search DCS trees (hard!)
parameters θ

k-best lists
(2) numerical optimization

If no DCS tree on k-best list is correct, skip example in (2)

24

Some Intuition on Learning
(1) search DCS trees (hard!)
parameters θ

k-best lists
(2) numerical optimization

% examples trained on

If no DCS tree on k-best list is correct, skip example in (2)
100
80
60
40
20

1

2

3

4

iteration

24

Some Intuition on Learning
(1) search DCS trees (hard!)
parameters θ

k-best lists
(2) numerical optimization

% examples trained on

If no DCS tree on k-best list is correct, skip example in (2)
100
80
60
40
20

1

2

3

4

iteration

Eﬀect: natural bootstrapping, learning improves search
24

Conclusion
Goal: learn to answer questions from question/answer pairs

25

Conclusion
Goal: learn to answer questions from question/answer pairs

Empirical result:
DCS (no logical forms) > existing systems (with logical forms)

25

Conclusion
Goal: learn to answer questions from question/answer pairs

Empirical result:
DCS (no logical forms) > existing systems (with logical forms)

Conceptual contribution: DCS trees
• Trees: connects dependency syntax with eﬃcient evaluation

25

Conclusion
Goal: learn to answer questions from question/answer pairs

Empirical result:
DCS (no logical forms) > existing systems (with logical forms)

Conceptual contribution: DCS trees
• Trees: connects dependency syntax with eﬃcient evaluation
• Mark-Execute: unifying framework for handling scope

25

thank
2
1

you

26

