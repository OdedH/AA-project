Filtering with Abstract Particles

A. Pruning a hierarchical decomposition
To provide further intuition for how our method behaves,
we have included the hierarchical decomposition for one
of the test examples from our experiments:
0.022

w

i

For a hierarchical decomposition A and a subset B of A,
let αB (a) denote the smallest b ∈ B such that a ⊆ b. By
equation (4), we have
ˆ
KL fθA

ˆ
fθB =

ˆ
KLa◦ fθA

t

h

w

t

h

e

o

w

t

h

i

n

o

w

t

h

a

0.06

n

o

w

o

0.022

n

n

0.026

n

o

0.038

n

0.059

0.016

t

h

w

i

t

i

t

a

ˆ
fθαB (a)

(20)

a∈A

e
s
t
u
h
m

=

0

Ka◦ (a αB (a)),

(21)

a∈A

h

w

(19)

ˆ
KLa◦ fθa

=

0.055

ˆ
fθB

a∈A

h

where Kc (a b)
0

0.05

w

i

t

h

t

0.023

w

i

t

h

h

0.035

n

w

i

t

h

n

w

i

t

h

m

Input: ? ? ? n ? w ? t h ? ? ?
This is the hierarchical decomposition used to infer the
missing characters for the phrase ...???n?w?th???.... The
decomposition doesn’t waste resources representing the
ﬁrst 3 unknown characters, and maintains plausible hypotheses for the hidden characters such as ...with a..., ...now
thee..., and ...now this.... Each blue decimal number indicates a region in the decomposition together with the local
probability mass assigned to that region.

B. Pruning a hierarchical decomposition
In our inference algorithm for choosing a good hierarchical decomposition B, we had two major steps: reﬁning the
decomposition, and pruning it back down to a given size
k. In this appendix, we will provide a dynamic programming algorithm for computing an optimal pruning B of A,
assuming that Fit(a, CB (a)) depends only on a. Let pθA
ˆ
be the approximating distribution corresponding to A, and
pθB be the approximating distribution corresponding to B.
ˆ
Our goal is to minimize KL (p∗ pθB ); we will make the
ˆ
assumption that A and θA are chosen well enough that pθA
ˆ
∗
ˆ
ˆ
is already close to p , and thus that KL fθ
fθ
is a
A

B

good surrogate for KL (p∗ pθB ). We will also ignore norˆ
malization constants and instead consider the divergence
ˆ
ˆ
KL fθA fθB between the unnormalized distributions
ˆ
ˆ
fθA and fθB . Formally, we will solve the following problem:
Given a hierarchical decomposition A, and assuming that
Fit(a, CB (a)) depends only on a, ﬁnd the subset B ⊆ A of
ˆ
ˆ
vertices of size k such that KL fθ
fθ is minimized.
A

B

=

x∈c

ˆ
fθa (x) log

ˆ
fθa (x)
ˆ
fθb (x)

.

It

is here that we make use of the assumption that
Fit(αB (a), CB (αB (a))) depends only on a; otherwise,
Ka◦ (a αB (a)) would depend on the particular value of
CB (αB (a)).

y

0.018

0.376

e
h
i
o
y

def

In the remainder of this appendix, we will write
out a succession of recursive formulas for computing
ˆ
ˆ
KL fθA fθB , expanding the state space each time
until we eventually have a recursion for optimizing
ˆ
ˆ
KL fθA fθB over all subsets B ⊆ A of size k.
ˆ
ˆ
Computing KL fθA fθB for ﬁxed B. To make the
expresion in (21) more amenable to dynamic programming,
we will write it out recursively. For a ⊆ p, deﬁne D(a, p)
to be the contribution of the descendants of a (including
ˆ
ˆ
a) to KL fθA fθB assuming that αB (a) = p. More
formally, we deﬁne D(a, p) recursively as
def

D(a, p) =

Ka◦ (a a) +

b∈CA (a)

: a∈B

D(b, a)

: a∈B
(22)
(Note that Ka◦ (a a) is equal to 0; we have left it in the
recursion to expose the symmetry in the two cases.)
Ka◦ (a p) +

b∈CA (a)

D(b, p)

With this deﬁnition, one can verify that D(X, X) expands
ˆ
ˆ
out to (21) and hence is equal to KL fθ
fθ . (Recall
A

B

that X is the entire state space and is always an element of
A.)
Optimizing over B. Equation (22) gives us a recursive
ˆ
ˆ
formula for KL fθA fθB when B is ﬁxed. However,
the only dependence on B is in deciding between the two
cases in the recursion, so it is easy to extend the recursion
to simultaneously choose B. In particular, deﬁne the threevariable function D(a, p, m) to be the minimum value of
D(a, p) if there are m elements in B that are contained in

.

Filtering with Abstract Particles

a (including, possibly, a itself). We then have the recursion
D(a, p, m)

 Ka◦ (a a) +

def
= min
 Ka◦ (a p) +


(23)
min
mb =m−1

min
mb =m

b∈CA (a)
b∈CA (a)

D(b, a, mb ) ,

D(b, p, mb ) .

The ﬁrst case corresponds to including a in B, in which
case we have m − 1 remaining elements of B to distribute
among the descendants of a. The second case corresponds
to excluding a from B, in which case we have m elements
of B to distribute. Now D(X, X, k) is the minimum value
of D(X, X) across all subsets B of size k, which is the
quantity we are after.
Computing the minimum tractably. We are almost
done, but we need an efﬁcient way to compute the minimum over all mj that sum to m. To do this, number the
children of a as b1 , b2 , . . ., and deﬁne the four-variable
function D(a, p, m, j), which, intuitively, tracks the minimum value of D(a, p) if there are m elements in B left to
be distributed among children bj , bj+1 , . . . and their subtrees. More formally, deﬁne D(a, p, m, j) via
D(a, p, m, j)
(24)

 min {D(a, a, m − 1, 0), D(a, p, m, 0)} : j = −1




min {D(bj , p, m , −1)
def
0≤m ≤m
=
: 0 ≤ j < |CA (a)|


+D(a, p, m − m , j + 1)}



Ka◦ (a p)
: j = |CA (a)|.

The three cases can be thought of as follows:
• D(a, p, m, −1) decides whether or not to include a in
B
• D(a, p, m, j) decides how many elements of B to include among the descendants of bj
• D(a, p, m, |CA (a)|) computes the local contribution
ˆ
ˆ
of a to KL fθ
fθ .
A

B

Overall, then, D(X, X, k, −1) is equal to the minimum
ˆ
ˆ
value of KL fθ
fθ over all B ⊆ A with |B| = k.
A

B

Runtime. Suppose that the decomposition A has depth d.
Then there are O(|A|d) triples (p, a, j), so the size of the
state space is O(|A|dk). Furthermore, the ﬁrst case of the
recursion can be computed in O(1) time, the second case
in O(k) time, and the ﬁnal case in O(1) time (on average
across all a). Therefore, the runtime is O(|A|dk 2 ).

