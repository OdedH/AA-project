Semantic Role Labeling Via Generalized Inference Over Classiﬁers

Vasin Punyakanok, Dan Roth, Wen-tau Yih, Dav Zimak
Yuancheng Tu
Department of Computer Science
Department of Linguistics
University of Illinois at Urbana-Champaign
{punyakan,danr,yih,davzimak,ytu}@uiuc.edu

Abstract
We present a system submitted to the CoNLL2004 shared task for semantic role labeling.
The system is composed of a set of classiﬁers
and an inference procedure used both to clean
the classiﬁcation results and to ensure structural integrity of the ﬁnal role labeling. Linguistic information is used to generate features
during classiﬁcation and constraints for the inference process.

1 Introduction
Semantic role labeling is a complex task to discover patterns within sentences corresponding to semantic meaning. We believe it is hopeless to expect high levels of performance from either purely manual classiﬁers or purely
learned classiﬁers. Rather, supplemental linguistic information must be used to support and correct a learning
system. The system we present here is composed of two
phases.
First, a set of phrase candidates is produced using two
learned classiﬁers—one to discover beginning positions
and one to discover end positions for each argument type.
Hopefully, this phase discovers a small superset of all
phrases in the sentence (for each verb).
In the second phase, the ﬁnal prediction is made. First,
candidate phrases from the ﬁrst phase are re-scored using
a classiﬁer designed to determine argument type, given
a candidate phrase. Because phrases are considered as a
whole, global properties of the candidates can be used to
discover how likely it is that a phrase is of a given argument type. However, the set of possible role-labelings
is restricted by structural and linguistic constraints. We
encode these constraints using linear functions and use
integer programming to ensure the ﬁnal prediction is consistent (see Section 4).

2 SNoW Learning Architecture
The learning algorithm used is a variation of the Winnow
update rule incorporated in SNoW (Roth, 1998; Roth and
Yih, 2002), a multi-class classiﬁer that is speciﬁcally tailored for large scale learning tasks. SNoW learns a sparse
network of linear functions, in which the targets (phrase
border predictions or argument type predictions, in this
case) are represented as linear functions over a common
feature space. It incorporates several improvements over
the basic Winnow update rule. In particular, a regularization term is added, which has the affect of trying to
separate the data with a think separator (Grove and Roth,
2001; Hang et al., 2002). In the work presented here we
use this regularization with a ﬁxed parameter.
Experimental evidence has shown that SNoW activations are monotonic with the conﬁdence in the prediction
Therefore, it can provide a good source of probability estimation. We use softmax (Bishop, 1995) over the raw activation values as conditional probabilities. Speciﬁcally,
suppose the number of classes is n, and the raw activation values of class i is acti . The posterior estimation for
class i is derived by the following equation.
score(i) = pi =

eacti
1≤j≤n

eactj

3 First Phase: Find Argument Candidates
The ﬁrst phase is to predict the phrases of a given sentence that correspond to some argument (given the verb).
Unfortunately, it turns out that it is difﬁcult to predict the
exact phrases accurately. Therefore, the goal of the ﬁrst
phase is to output a superset of the correct phrases by ﬁltering out unlikely candidates.
Speciﬁcally, we learn two classiﬁers, one to detect
beginning phrase locations and a second to detect end
phrase locations. Each multi-class classiﬁer makes predictions over forty-three classes – thirty-two argument
types, ten continuous argument types, one class to detect

not begging and one class to detect not end. The following features are used:
• Word feature includes the current word, two words
before and two words after.
• Part-of-speech tag (POS) feature includes the POS
tags of the current word, two words before and after.
• Chunk feature includes the BIO tags for chunks of
the current word, two words before and after.
• Predicate lemma & POS tag show the lemma form
and POS tag of the active predicate.
• Voice feature indicates the voice (active/passive) of
the current predicate. This is extracted with a simple
rule: a verb is identiﬁed as passive if it follows a tobe verb in the same phrase chuck and its POS tag
is VBN(past participle) or it immediately follows a
noun phrase.
• Position feature describes if the current word is before of after the predicate.
• Chunk pattern feature encodes the sequence of
chunks from the current words to the predicate.
• Clause tag indicates the boundary of clauses.
• Clause path feature is a path formed from a semiparsed tree containing only clauses and chunks.
Each clause is named with the chunk immediately
preceding it. The clause path is the path from predicate to target word in the semi-parsed tree.
• Clause position feature is the position of the target word relative to the predicate in the semi-parsed
tree containing only clauses. Speciﬁcally, there
are four conﬁgurations—target word and predicate
share same parent, parent of target word is ancestor
of predicate, parent of predicate is ancestor of target
word, or otherwise.
Because each phrase consists of a single beginning and
a single ending, these classiﬁers can be used to construct
a set of potential phrases (by combining each predicted
begin with each predicted end after it of the same type).
Although the outputs of this phase are potential argument candidates, along with their types, the second
phase re-scores the arguments using all possible types.
After eliminating the types from consideration, the ﬁrst
phase achieves 98.96% and 88.65% recall (overall, without verb) on the training and the development set, respectively. Because these are the only candidates that are
passed to the second phase, 88.65% is an upper bound
of the recall for our overall system.

4 Second Phase: Phrase Classiﬁcation
The second phase of our system assigns the ﬁnal argument classes to (a subset) of the phrases supplied from the

ﬁrst phase. This task is accomplished in two steps. First,
a multi-class classiﬁer is used to supply conﬁdence scores
corresponding to how likely individual phrases are to
have speciﬁc argument types. Then we look for the most
likely solution over the whole sentence, given the matrix
of conﬁdences and linguistic information that serves as a
set of global constraints over the solution space.
Again, the SNoW learning architecture is used to train
a multi-class classiﬁer to label each phrase to one of
the argument types, plus a special class – no argument.
Training examples are created from the phrase candidates
supplied from the ﬁrst phase using the following features:
• Predicate lemma & POS tag, voice, position,
clause Path, clause position, chunk pattern Same
features as the ﬁrst phase.
• Word & POS tag from the phrase, including the
ﬁrst/last word and tag, and the head word1 .
• Named entity feature tells if the target phrase is,
embeds, overlaps, or is embedded in a named entity.
• Chunk features are the same as named entity (but
with chunks, e.g. noun phrases).
• Length of the target phrase, in the numbers of words
and chunks.
• Verb class feature is the class of the active predicate
described in the frame ﬁles.
• Phrase type uses simple heuristics to identify the
target phrase like VP, PP, or NP.
• Sub-categorization describes the phrase structure
around the predicate. We separate the clause where
the predicate is in into three part – the predicate
chunk, segments before and after the predicate. The
sequence of the phrase types of these three segments
is our feature.
• Baseline follows the rule of identifying AM-NEG
and AM-MOD and uses them as features.
• Clause coverage describes how much of local
clause (from the predicate) is covered by the target
phrase.
• Chunk pattern length feature counts the number of
patterns in the phrase.
• Conjunctions join every pair of the above features
as new features.
• Boundary words & POS tags include one or two
words/tags before and after the target phrase.
1

We use simple rules to ﬁrst decide if a candidate phrase
type is VP, NP, or PP. The headword of an NP phrase is the
right-most noun. Similarly, the left-most verb/proposition of a
VP/PP phrase is extracted as the headword

• Bigrams are pairs of words/tags in the window from
two words before the target to the ﬁrst word of the
target, and also from the last word to two words after
the phrase.
• Sparse colocation picks one word/tag from the two
words before the phrase, the ﬁrst word/tag, the last
word/tag of the phrase, and one word/tag from the
two words after the phrase to join as features.
Alternately, we could have derived a scoring function
from the ﬁrst phase conﬁdences of the open and closed
predictors for each argument type. This method has
proved useful in the literature for shallow parsing (Punyakanok and Roth, 2001). However, it is hoped that additional global features of the phrase would be necessary
due to the variety and complexity of the argument types.
See Table 1 for a comparison.
Formally (but very brieﬂy), the phrase classiﬁer is attempting to assign labels to a set of phrases, S 1:M , indexed from 1 to M . Each phrase S i can take any label
from a set of phrase labels, P, and the indexed set of
phrases can take a set of labels, s1:M ∈ P M . If we assume that the classiﬁer returns a score, score(S i = si ),
corresponding to the likelihood of seeing label si for
phrase S i , then, given a sentence, the unaltered inference
task that is solved by our system maximizes the score of
the phrase, score(S 1:M = s1:M ),
s1:M = argmax score(S 1:M = s1:M )
ˆ
s1:M ∈P M

(1)

M

score(S i = si ).

= argmax
s1:M ∈P M i=1

The second step for phrase identiﬁcation is eliminating
labelings using global constraints derived from linguistic
information and structural considerations. Speciﬁcally,
we limit the solution space through the used of a ﬁlter
function, F, that eliminates many phrase labelings from
consideration. It is interesting to contrast this with previous work that ﬁlters individual phrases (see (Carreras and
M` rquez, 2003)). Here, we are concerned with global
a
constraints as well as constraints on the phrases. Therefore, the ﬁnal labeling becomes
M

s1:M =
ˆ

argmax

score(S i = si )

(2)

s1:M ∈F (P M ) i=1

The ﬁlter function used considers the following constraints:
1. Arguments cannot cover the predicate except those
that contain only the verb or the verb and the following word.
2. Arguments cannot overlap with the clauses (they can
be embedded in one another).

3. If a predicate is outside a clause, its arguments cannot be embedded in that clause.
4. No overlapping or embedding phrases.
5. No duplicate argument classes for A0-A5,V.
6. Exactly one V argument per sentence.
7. If there is C-V, then there has to be a V-A1-CV pattern.
8. If there is a R-XXX argument, then there has to be a
XXX argument.
9. If there is a C-XXX argument, then there has to be
a XXX argument; in addition, the C-XXX argument
must occur after XXX.
10. Given the predicate, some argument classes are illegal (e.g. predicate ’stalk’ can take only A0 or A1).
Constraint 1 is valid because all the arguments of a predicate must lie outside the predicate. The exception is for
the boundary of the predicate itself. Constraint 1 through
constraint 3 are actually constraints that can be evaluated
on a per-phrase basis and thus can be applied to the individual phrases at any time. For efﬁciency sake, we eliminate these even before the second phase scoring is begun.
Constraints 5, 8, and 9 are valid for only a subset of the
arguments.
These constraints are easy to transform into linear constraints (for example, for each class c, constraint 5 becomes M [S i = c] ≤ 1) 2 . Then the optimum solution
i=1
of the cost function given in Equation 2 can be found by
integer linear programming3. A similar method was used
for entity/relation recognition (Roth and Yih, 2004).
Almost all previous work on shallow parsing and
phrase classiﬁcation has used Constraint 4 to ensure that
there are no overlapping phrases. By considering additional constraints, we show improved performance (see
Table 1).

5 Results
In this section, we present results. For the second phase,
we evaluate the quality of the phrase predictor. The result ﬁrst evaluates the phrase classiﬁer, given the perfect
phrase locations without using inference (i.e. F(P M ) =
P M ). The second, adds inference to the phrase classiﬁcation over the perfect classiﬁers (see Table 2). We evaluate
the overall performance of our system (without assuming perfect phrases) by training and evaluating the phrase
classiﬁer on the output from the ﬁrst phase (see Table 3).
Finally,since this is a tagging task, we compare this
system with the basic tagger that we have, the CLCL
2

where [x] is 1 if x is true and 0 otherwise
(Xpress-MP, 2003) was used in all experiments to solve integer linear programming.
3

1st Phase, non-Overlap
1st Phase, All Const.
2nd Phase, non-Overlap
2nd Phase, All Const.

Precision
70.54%
70.97%
69.69%
71.96%

Recall
61.50%
60.74%
64.75%
64.93%

F1
65.71
65.46
67.13
68.26

Table 1:

Summary of experiments on the development set.
The phrase scoring is choosen from either the ﬁrst phase or the
second phase and each is evaluated by considering simply nonoverlapping constraints or the full set of linguistic constraints.
To make a fair comparison, parameters were set seperately to
optimize performance when using the ﬁrst phase results. All
results are for overall performance.

Without Inference
With Inference

Precision
86.95%
88.03%

Recall
87.24%
88.23%

F1
87.10
88.13

Table 2: Results of second phase phrase prediction and inference assuming perfect boundary detection in the ﬁrst phase.
Inference improves performance by restricting label sequences
rather than restricting structural properties since the correct
boundaries are given. All results are for overall performance
on the development set.
shallow parser from (Punyakanok and Roth, 2001), which
is equivalent to using the scoring function from the ﬁrst
phase with only the non-overlapping constraints. Table 1
shows how how additional constraints over the standard
non-overlapping constraints improve performance on the
development set4 .

6 Conclusion
We show that linguistic information is useful for semantic
role labeling used both to derive features and to derive
hard constraints on the output. We show that it is possible
to use integer linear programming to perform inference
that incorporates a wide variety of hard constraints that
would be difﬁcult to incorporate using existing methods.
In addition, we provide further evidence supporting the
use of scoring phrases over scoring phrase boundaries for
complex tasks.
Acknowledgments This research is supported by
NSF grants ITR-IIS-0085836, ITR-IIS-0085980 and IIS9984168, EIA-0224453 and an ONR MURI Award. We
also thank AMD for their equipment donation and Dash
Optimization for free academic use of their Xpress-MP
software.

References
C. Bishop, 1995. Neural Networks for Pattern Recognition,
chapter 6.4: Modelling conditional distributions, page 215.
Oxford University Press.
4

The test set was not publicly available to evaluate these results.

Overall
A0
A1
A2
A3
A4
A5
AM-ADV
AM-CAU
AM-DIR
AM-DIS
AM-EXT
AM-LOC
AM-MNR
AM-MOD
AM-NEG
AM-PNC
AM-PRD
AM-TMP
R-A0
R-A1
R-A2
R-A3
R-AM-LOC
R-AM-MNR
R-AM-PNC
R-AM-TMP
V

Precision
70.07%
81.13%
74.21%
54.16%
47.06%
71.43%
0.00%
39.36%
45.95%
42.50%
52.00%
46.67%
33.47%
45.19%
92.49%
85.92%
32.79%
0.00%
59.77%
81.33%
58.82%
100.00%
0.00%
0.00%
0.00%
0.00%
54.55%
98.37%

Recall
63.07%
77.70%
63.02%
41.04%
26.67%
60.00%
0.00%
36.16%
34.69%
34.00%
67.14%
50.00%
34.65%
36.86%
94.96%
96.06%
23.53%
0.00%
56.89%
76.73%
57.14%
22.22%
0.00%
0.00%
0.00%
0.00%
42.86%
98.37%

Fβ=1
66.39
79.38
68.16
46.69
34.04
65.22
0.00
37.69
39.53
37.78
58.61
48.28
34.05
40.60
93.70
90.71
27.40
0.00
58.30
78.96
57.97
36.36
0.00
0.00
0.00
0.00
48.00
98.37

Table 3: Results on the test set.
X. Carreras and L. M` rquez. 2003. Phrase recognition by ﬁltera
ing and ranking with perceptrons. In Proceedings of RANLP2003.
A. Grove and D. Roth. 2001. Linear concepts and hidden variables. Machine Learning, 42(1/2):123–141.
T. Hang, F. Damerau, , and D. Johnson. 2002. Text chunking
based on a generalization of winnow. Journal of Machine
Learning Research, 2:615–637.
V. Punyakanok and D. Roth. 2001. The use of classiﬁers in
sequential inference. In NIPS-13; The 2000 Conference on
Advances in Neural Information Processing Systems, pages
995–1001. MIT Press.
D. Roth and W. Yih. 2002. Probabilistic reasoning for entity
& relation recognition. In COLING 2002, The 19th International Conference on Computational Linguistics, pages 835–
841.
D. Roth and W. Yih. 2004. A linear programming formulation
for global inference in natural language tasks. In Proc. of
CoNLL-2004.
D. Roth. 1998. Learning to resolve natural language ambiguities: A uniﬁed approach. In Proc. of AAAI, pages 806–813.
Xpress-MP.
2003.
Dash Optimization. Xpress-MP.
http://www.dashoptimization.com/products.html.

