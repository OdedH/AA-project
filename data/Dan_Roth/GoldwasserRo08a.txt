EMNLP’08

Transliteration as Constrained Optimization
Dan Goldwasser
Dan Roth
Department of Computer Science
University of Illinois
Urbana, IL 61801
{goldwas1,danr}@uiuc.edu

Abstract
This paper introduces a new method for identifying named-entity (NE) transliterations in
bilingual corpora. Recent works have shown
the advantage of discriminative approaches to
transliteration: given two strings (ws , wt ) in
the source and target language, a classiﬁer is
trained to determine if wt is the transliteration of ws . This paper shows that the transliteration problem can be formulated as a constrained optimization problem and thus take
into account contextual dependencies and constraints among character bi-grams in the two
strings. We further explore several methods
for learning the objective function of the optimization problem and show the advantage of
learning it discriminately. Our experiments
show that the new framework results in over
50% improvement in translating English NEs
to Hebrew.

1

Introduction

Named entity (NE) transliteration is the process of
transcribing a NE from a source language to some
target language based on phonetic similarity between the entities. Identifying transliteration pairs
is an important component in many linguistic applications which require identifying out-of-vocabulary
words, such as machine translation and multilingual
information retrieval (Klementiev and Roth, 2006b;
Hermjakob et al., 2008).
It may appear at ﬁrst glance that identifying the
phonetic correlation between names based on an
orthographic analysis is a simple, straight-forward

Figure 1: Named entities transliteration pairs in English
and Hebrew and the character level mapping between the
two names. The Hebrew names can be romanized as eeta-l-ya and a-ya

task; however in many cases a consistent deterministic mapping between characters does not exist; rather, the mapping depends on the context the
characters appear in and on transliteration conventions which may change across domains. Figure 1
exhibits two examples of NE transliterations in English and Hebrew, with the correct mapping across
the two scripts. Although the two Hebrew names
share a common preﬁx1 , this preﬁx can be mapped
into a single English character or into two different characters depending on the context it appears
in. Similarly, depending on the context it appears in,
the English character a can be mapped into different
characters or to an “empty” character.
1

In all our example the Hebrew script is shown left-to-right
to simplify the visualization of the transliteration mapping.

In recent years, as it became clear that solutions
that are based on linguistics rules are not satisfactory, machine learning approaches have been developed to address this problem. The common approach adopted is therefore to view this problem
as a classiﬁcation problem (Klementiev and Roth,
2006a; Tao et al., 2006) and train a discriminative
classiﬁer. That is, given two strings, one in the
source and the other in the target language, extract
pairwise features, and train a classiﬁer that determines if one is a transliteration of the other. Several papers have followed up on this basic approach
and focused on semi-supervised approaches to this
problem or on extracting better features for the discriminative classiﬁer (Klementiev and Roth, 2006b;
Bergsma and Kondrak, 2007; Goldwasser and Roth,
2008). While it has been clear that the relevancy of
pairwise features is context sensitive and that there
are contextual constraints among them, the hope was
that a discriminative approach will be sufﬁcient to
account for those by weighing features appropriately. This has been shown to be difﬁcult for language pairs which are very different, such as English
and Hebrew (Goldwasser and Roth, 2008).
In this paper, we address these difﬁculties by
proposing to view the transliteration decision as a
globally phrased constrained optimization problem.
We formalize it as an optimization problem over
a set of local pairwise features – character n-gram
matches across the two string – and subject to legitimacy constraints.
We use a discriminatively trained classiﬁer as a
way to learn the objective function for the global
constrained optimization problem. Our technical
approach follows a large body of work developed
over the last few years, following (Roth and Yih,
2004) that has formalized global decisions problems
in NLP as constrained optimization problems and
solved these optimization problems using Integer
Linear Programming (ILP) or other methods (Punyakanok et al., 2005; Barzilay and Lapata, 2006;
Clarke and Lapata, ; Marciniak and Strube, 2005).
We investigate several ways to train our objective
function, which is represented as a dot product between a set of features chosen to represent a pair
(ws , wt ), and a vector of initial weights. Our ﬁrst
baseline makes use of all features extracted from a
pair, along with a simple counting method to deter-

mine initial weights. We then use a method similar to (Klementiev and Roth, 2006a; Goldwasser and
Roth, 2008) in order to discriminatively train a better
weight vector for the objective function.
Our key contribution is that we use a constrained
optimization approach also to determine a better feature representation for a given pair. (Bergsma and
Kondrak, 2007) attempted a related approach to restricting the set of features representing a transliteration candidate. However, rather than directly aligning the two strings as done there, we exploit the expressiveness of the ILP formulation and constraints
to generate a better representation of a pair. This
is the representation we then use to discriminatively
learn a better weight vector for the objective function used in our ﬁnal model.
Our experiments focus on Hebrew-English
transliteration, which were shown to be very difﬁcult in a previous work (Goldwasser and Roth,
2008). We show very signiﬁcant improvements over
existing work with the same data set, proving the
advantage of viewing the transliteration decision as
a global inference problem. Furthermore, we show
the importance of using a discriminatively trained
objective function.
The rest of the paper is organized as follows. The
main algorithmic contribution of this paper is described in Sec. 2. Our experimental study is describes in Sec. 3 and Sec. 4 concludes.

2 Using inference for transliteration
In this section we present our transliteration decision
framework, which is based on solving a constrained
optimization problem with an objective function that
is discriminatively learned. Our framework consists
of three key elements:
1. Decision Model When presented with a NE
in the source language ws and a set of candidates {wt }k in the target language, the decision
1
model ranks the candidate pairs (ws , wt ) and
selects the “best” candidate pair. This is framed
as an optimization problem
∗
i
wt = argmaxi {w · F (ws , wt )},

(1)

where F is a feature vector representation of
i
the pair (ws , wt ) and w is a vector of weights
assigned to each feature.

2. Representation A pair s = (ws , wt ) of source
and target NEs is represented as a vector of features, each of which is a pair of character ngrams, from ws and wt , resp. Starting with a
baseline representation introduced in (Klementiev and Roth, 2006a), denoted here AF (s),
we reﬁne this representation to take into account dependencies among the individual ngram pairs. This reﬁnement process is framed
as a constrained optimization problem:
∗

F (s) = argmaxF ⊆AF {w · AF (s)},

(2)

subject to a set C of linear constraints. Here
AF is the initial representation (All−Features),
w is a vector of weights assigned to each feature and C is a set of constraints accounting for
interdependencies among features.
3. Weight Vector Each pairwise n-gram feature is
associated with a weight; this weigh vector is
used in both optimization formulations above.
The weight vector is determined by considering
the whole training corpus. The initial weight
vector is obtained generatively, by counting the
relative occurrence of substring pairs in positive examples. The representation is reﬁned by
discriminatively training a classiﬁer to maximize transliteration performance on the training data. In doing that, each example is represented using the feature vector representation
described above.
The three key operations described above are being used in several stages, with different parameters
(weight vectors and representations) as described
in Alg. 1. In each stage a different element is reﬁned. The input to this process is a training corpus
Tr=(DS ,DT ) consisting of NE transliteration pairs
s = (ws , wt ), where ws , wt are NEs in the source
and target language, respectively. Each such sample point is initially represented as a feature vector
AF (s) (for All−Features), where features are pairs
of substrings from the two words (following (Klementiev and Roth, 2006a)).
Given the set of feature vectors generated by applying AF to Tr, we assign initial weights W to
the features ((1) in Alg. 1). These weights form
the initial objective function used to construct a new

feature based representation, Informative−Features,
IFW (s) ((2) in Alg. 1). Speciﬁcally, for an instance
s, IFW (s) is the solution of the optimization problem in Eq. 2, with W as the weight vector, AF (s)
as the representation, and a set of constraints ensuring the “legitimacy” of the selected set of features
(Sec. 2.2.1).
Input: Training Corpora Tr=(DS ,DT )
Output: Transliteration model M
1. Initial Representation and Weights
For each sample s ∈ Tr, use AF to generate a
feature vector
{(fs , ft )1 , (fs , ft )2 , . . . , (fs , ft )n } ∈ {0, 1}n .
Deﬁne W :f → R s.t. foreach feature f =(fs , ft )
W (f) =

#(fs ,ft )
#(fs )

×

#(fs ,ft )
#(ft )

2. Inferring Informative Representation (W )
Modify the initial representation by solving the
following constrained optimization problem:
IFW (s)∗ = argmaxIF (s)⊆(AF (s)) W · AF (s),
subject to constraints C.
3. Discriminative Training
Train a discriminative model on Tr, using
{IF (s)}s∈T r .
Let WD be the new weight vector obtained by
discriminative training.
4. Inferring Informative Representation (WD )
Modify the initial representation by solving the
following constrained optimization problem. This
time, the objective function is determined by the
discriminatively trained weight vector WD .
IFWD (s)∗ = argmaxIF (s)⊆(AF (s)) WD · AF (s),
subject to constraints C.
5. Decision Model
Given a word ws and a list of candidates
1
2
k
wt , wt , . . . wt , the chosen transliteration is wt∗ ,
determined by:
i
t∗ = argmaxi {WD · IFWD ((ws , wt ))}

Algorithm 1: Transliteration Framework.
The new feature extraction operator IFW (s) is
now used to construct a new representation of the
training corpus. With this representation, we train
discriminately a new weight vector WD . This
weight vector, now deﬁnes a new objective function
for the optimization problem in Eq. 2; WD is the
weight vector and AF (s) the representation. We de-

note by IFWD (s) the solution of this optimization
problem for an instance s.
Given a representation and a weight vector, the
optimization problem in Eq. 1 is used to ﬁnd the
transliteration of ws . Our best decision model makes
use of Eq. 1 using WD as the feature vector and
IFWD (s) as the feature representation of s.
The rest of this section provides details on the operations and how we use them in different stages.

Figure 2: All possible unigram and bigram pairs generated by the AF operator. The Hebrew name can be romanized as lo-n-do-n

2.1 Initial Representation and Weights
The feature space we consider consists of n potential features, each feature f = (fs , ft ) represents a pairing of character level n-grams, where
fs ∈ {Source-Language ∪ empty-string } and ft ∈
{Target-Language ∪ empty-string}. A given sample
(ws , wt ) consisting of a pair of NEs is represented
as a features vector s ∈ {0, 1}n . We say that a feature f i is active if f i = 1 and that s1 ⊂ s2 , ⇐⇒
{f i }{f i = 1 in s1 } ⊂ {f i }{f i =1 in s2 } . We represent
the active features corresponding to a pair as a bipartite graph G = (V, E), in which each vertex v ∈ V
either represents the empty string, a single character
or a bi-gram. V S , V T denote the vertices representing source and target language n-grams respectively.
Each of these sets is composed of two disjoint subS
S
T
T
sets: VS = VU ∪ VB , VT = VU ∪ VB consisting
of vertices representing the uni-gram and bi-gram
strings. Given a vertex v, degree(v, V )denotes the
degree of v in a subgraph of G, consisting only of
V ⊂ V ; index(v) is the index of the substring represented by v in the original string.
Edges in the bipartite graph represent active features. The only deviation is that the vertex representing the empty string can be connected to any other
(non-empty) vertex.
Our initial feature extraction method follows the
one presented in (Klementiev and Roth, 2006a),
in which the feature space consists of n-gram pairs
from the two languages. Given a pair, each word
is decomposed into a set of character substrings of
up to a given length (including the empty string).
Features are generated by pairing substrings from
the two sets whose relative positions in the original
words differ by k or less places, or formally:
E = {e = (vi , vj ) | (vi ∈ VS ∧ vj ∈ VT ) ⇒
(index(vj ) + k ≥ index(vi ) ≥ index(vj ) − k) ∧

(vi = vempty−string ∨ vj = vempty−string )}.
In our experiments we used k=1 which tested empirically, achieved the best performance.
Figure 2 exhibits the active features in the example using the graph representation. We refer to this
feature extraction method as All-F eatures (AF ),
and deﬁne it formally as an operator AF : s →
{(fs , ft )i } that maps a sample point s = (ws , wt )
to a set of active features.
The initial sample representation generates features by coupling substrings from the two terms
without considering the dependencies between the
possible consistent combinations. Ideally, given
a positive sample, it is desirable that paired substrings would encode phonetic similarity or a distinctive context in which the two substrings correlate. However, AF simply pairs substrings from the
two words, resulting in a noisy representation of the
sample point. Given enough positive samples, we
assume that features appearing with distinctive frequency will encode the desired relation. We use this
observation, and construct a weight vector, associating each feature with a positive number indicating
its relative occurrence frequency in the training data
representation formed by AF . This weight is computed as follows:
Deﬁnition 1 (Initial Feature Weights Vector) Let
W :f → R s.t. for each feature f={fs , ft },
W (f) =

#(fs , ft ) #(fs , ft )
×
,
#(fs )
#(ft )

where #(fs , ft ) is the number of occurrences of that
feature in the positive sample set, and #(fL ), L =
{s, t} is the number of occurrences of an individual
substring, in any of the features extracted from positive samples in the training set.

These weights transform every example into a
weighted graph, where each edge is associated by W
with the weight assigned to the feature it represents.
As we empirically tested, this initialization assigns
high weights to features that preserve the phonetic
correlation between the two languages. The top part
of ﬁgure 5 presents several examples of weights assigned by W to features composed of different English and Hebrew substrings combinations. It can be
observed that combination which are phonetically
similar are associated with a higher weight. However, as it turns out, transliteration mappings do not
consist of “clean” and consistent mappings of phonetically similar substrings. In the following section
we explain how to use these weights to generate a
more compact representation of samples.
2.2 Inferring Informative Representations
In this section we suggest a new feature extraction
method for determining the representation of a given
word pair. We use the strength of the active features
computed above, along with legitimacy constraints
on mappings between source and target strings to
ﬁnd an optimal set of consistent active features that
represents a pair. This problem can be naturally encoded as a linear optimization problem, which seeks
to maximize a linear objective function determined
by W , over a set of variables representing the active features selection, subject to a set of linear constraints representing the dependencies between selections. We follow the formulation given by (Roth
and Yih, 2004), and deﬁne it as an Integer Linear
Programming (ILP) optimization problem, in which
each integer variable a(j,k) , deﬁned over {0, 1}, represents whether a feature pairing an n-gram j ∈ S
with an n-gram k ∈ T , is active. Although using ILP
is in general NP-hard, it has been used efﬁciently in
many natural language (see section 1). Our experience as well has been that this process is very efﬁcient due to the sparsity of the constraints used.
2.2.1 Constraining Feature Dependencies
To limit the selection of active features in each
sample we require that each element in the decomposition of ws into bi-grams should be paired with
an element in wt , and the vice-versa. We restrict
the possible pairs by allowing only a single n-gram
to be matched to any other n-gram, with one excep-

tion - we allow every bi-gram to be mapped into an
empty string. Viewed as a bipartite graph, we allow
each node (with the exception of the empty string)
to have only one connected edge. These constraints,
given the right objective function, should enforce an
alignment of bi-grams according to phonetic similarity; for example, the word pairs described in Figure 1, depicts a character level alignment between
the words, where in some cases a bi-gram is mapped
into a single character and in other cases single characters are mapped to each other, based on phonetic
similarity encoded by the two scripts. However, imposing these constraints over the entire set of candidate features would be too restrictive; it is unlikely
that one can consistently represent a single “correct”
phonetic mapping. We wish to represent both the
character level and bi-gram mapping between names
as both represent informative features on the correspondence between the names over the two scripts.
To allow this, we decompose the problem into two
disjoint sets of constraints imposing 1-1 mappings,
one over the set of single character substrings and
the other over the bi-gram substrings. Given the bipartite graph generated by AF, we impose the following constraints:
Deﬁnition 2 (Transliteration Constraints) Let C
be the set of constraints, consisting of the following
predicates:
T
∀v ∈ V S , degree(v,V S ∪VU )≤1 ∧
T
∀v ∈ V S , degree(v,V S ∪VB )≤1 ∧
T , degree(v,V T ∪V S )≤1 ∧
∀v ∈ V
U
S
∀v ∈ V T , degree(v,V T ∪VB )≤1

For example, Figure 2 shows the graph of all possible candidates produced by AF . In Figure 3, the
graph is decomposed into two graphs, each depicting possible matches between the character level
uni-gram or bi-gram substrings. the ILP constraints
ensure that in each graph, every node (with the exception of the empty string) has a degree of one .
Figure 4 gives the results of the ILP process – a
uniﬁed graph in which every node has only a single
edge associated with it.
Deﬁnition 3 (Informative Feature Extraction (IF))
We deﬁne the Informative-Features(IF ) feature
extraction operator, IF : s → {(fs , ft )i } as the
solution to the ILP problem in Eq. 2. Namely,

Figure 3: Find informative features by solving an ILP
problem. Dependencies between matching decisions are
modeled by allowing every node to be connected to a single edge (except the node representing the empty-string).

Figure 4: The result of applying the IF operator by solving an ILP problem, represented as a pruned graph.

IF (s)∗ = argmaxIF (s)⊆(AF (s)) w · AF (s),
subject to constraints C.
We will use this operator with w = W , deﬁned
above, and denote it IFW , and also use it with a
different weight vector, trained discriminatively, as
described next.
2.3 Discriminative Training
Using the IFW operator, we generate a better representation of the training data, which is now used
to train a discriminative model. We use a linear
classiﬁer trained with a regularized average perceptron update rule (Grove and Roth, 2001) as implemented in SNoW, (Roth, 1998). This learning algorithm provides a simple and general linear classiﬁer that has been demonstrated to work well in
other NLP classiﬁcation tasks, e.g. (Punyakanok
et al., 2005), and allows us to incorporate extensions
such as strength of features naturally into the training algorithm. We augment each sample in the train-

Figure 5: Several examples of weights assigned to features generated by coupling English and Hebrew substrings. Top ﬁgure: initial weights. Bottom ﬁgure: Discriminatively learned weights. The Hebrew characters,
ordered left to right, can be romanized as y,z,t,sh

ing data with feature weights; given a sample, the
learner is presented with a real-valued feature vector instead of a binary vector. This can be viewed
as providing a better starting point for the learner,
which improves the learning rate (Golding and Roth,
1999; Ng and Jordan, 2001).
The weight vector learned by the discriminative
training is denoted WD . Given the new weight vector, we can deﬁne a new feature extraction operator, that we get by applying the objective function in
Eq. 2 with WD instead of W . Given a sample s, the
feature representation generated by this new information extraction operator is denoted IFWD (s). The
key difference between W and WD is that the latter
was trained over a corpora containing both negative
and positive examples, and as a results WD contains
negative weights. To increase the impact of training
we multiplied the negative weights by 2.
Figure 5 presents some examples of the beneﬁt
of discriminately learning the objective function; the
weighted edges in the top ﬁgure show the values assigned to features by W , while the bottom ﬁgure
shows the weights assigned by WD . In all cases,
phonetically similar characters were assigned higher
scores by WD , and character pairs not phonetically
similar were typically assigned negative weights. It
is also interesting to note a special phenomena occurring in English-Hebrew transliterations. The English vowels will be paired to almost any Hebrew
character when generating pairs using AF , since
vowels in most cases are omitted in Hebrew, there
is no distinctive context in which English vowels
appear. We can see for example, in the top graph

presented in Figure 5 an edge matching a vowel to
a Hebrew character with a high weight, the bottom
graph showing the results of the discriminative training process show that this edge is associated with a
zero weight score.
2.4 Decision Models
This section deﬁnes several transliteration decision
models given a word ws and a list of candidates
1
2
k
wt , wt , . . . wt . The models are used to identify the
correct transliteration pair from the set of candidates
i
{si = (ws , wt )}i=1...k .
In all cases, the decision is formulated as in Eq. 1,
where different models differ by the representations
and weight vectors used.
Decision Model 1 Ranking the transliteration candidates is done by evaluating
s∗ = argmaxi W · AF (si ),
which selects the transliteration pair which maximizes the objective function based on the generatively computed weight vector.
Decision Model 2 Ranking the transliteration candidates is done by evaluating:
s∗ = argmaxi WD · AF (si )).
This decision model is essentially equivalent to the
transliteration models used in (Klementiev and
Roth, 2006a; Goldwasser and Roth, 2008), in which
a linear transliteration model was trained using a feature extraction method equivalent to AF.
Decision Model 3 Ranking the transliteration candidates is done by evaluating:
s∗ = argmaxi W · IFW (si ),
which maximizes the objective function with the
generatively computed weight vector and the informative feature representation derived based on it.
Decision Model 4 Ranking the transliteration candidates is done by evaluating:
s∗ = argmaxi WD · IFW (si )),
which conceptually resembles the transliteration
model presented in (Bergsma and Kondrak, 2007),
in that a discriminative classiﬁer was trained and
used over a pruned feature set.

Decision Model 5 Ranking the transliteration candidates is done by evaluating:
s∗ = argmaxi WD · IFWD (si ),
which maximize the objective function with the discriminately derived weight vector and the informative features inferred based on it. This decision
model is the only model that incorporates discriminative weights as part of the feature extraction process; WD is used as the objective function used
when inferring IFWD .

3 Evaluation
We evaluated our approach over a corpus of 300
English-Hebrew transliteration pairs, and used another 250 different samples for training the models.
We constructed the test set by pairing each English
name with all Hebrew names in the corpus. The system was evaluated on its ability to correctly identify the 300 transliteration pairs out of all the possible transliteration candidates. We measured performance using the Mean Reciprocal Rank (MRR)
measure. This measure, originally introduced in
the ﬁeld of information retrieval, is used to evaluate
systems that rank several options according to their
probability of correctness. MRR is a natural measure in our settings and has been used previously
for evaluating transliteration systems, for example
by (Tao et al., 2006).
Given a set Q of queries and their respective
responses ranked according to the system’s conﬁdence, we denote the rank of the correct response
to a query qi ∈ Q as rank(qi ). MRR is then deﬁned as the average of the multiplicative inverse of
the rank of the correct answer, that is:
M RR =

1
1
.
|Q| i=1...|Q| rank(qi )

In our experiments we solved an ILP problem for
every transliteration candidate pairs, and computed
MRR with respect to the conﬁdence of our decision
model across the candidates. Although this required
solving thousands of ILP instances, it posed no computational burden as these instances typically contained a small number of variables and constraints.
The entire test set is solved in less than 20 minutes

using the publicly available GLPK package (http:
//www.gnu.org/software/glpk/ ).
The performance of the different models is summarized in table 1, these results are based on a training set of 250 samples used to train the discriminative transliteration models and also to construct
the initial weight vector W . Figure 6 shows performance over different number of training examples.
Our evaluation is concerns with the core transliteration and decision models presented here and does
not consider any data set optimizations that were introduced in previous works, which we view as orthogonal additions, hence the difference with the results published in (Goldwasser and Roth, 2008).
The results clearly show that our ﬁnal model,
model 5, outperform other models. Interestingly,
model 1, a simplistic model, signiﬁcantly outperforms the discriminative model presented in (Klementiev and Roth, 2006b). We believe that this is
due to two reasons. It shows that discriminative
training over the representation obtained using AF
is not efﬁcient; moreover, this phenomenon is accentuated given that we train over a very small data
set, which favors generative estimation of weights.
This is also clear when comparing the performance
of model 1 to model 4, which shows that learning
over the representation obtained using constrained
optimization (IF) results in a very signiﬁcant performance improvement.
The improvement of using IFW is not automatic.
Model 3, which uses IFW , and model 1, which uses
AF, converge to nearly the same result. Both these
models use generative weights to make the transliteration decision, and this highlights the importance
of discriminative training. Both model 4 and model
5 use discriminatively trained weights and signiﬁcantly outperform model 3. These results indicate
that using constraint optimization to generate the examples’ representation in itself may not help; the objective function used in this inference has a signiﬁcant role in improved performance.
The beneﬁt of discriminatively training the objective function becomes even clearer when comparing the performance of model 5 to that of model 4,
which uses the original weight vector when inferring
the sample representation.
It can be assumed that this algorithm can beneﬁt from further iterations – generating a new feature

Decision Model
MRR
Baseline model, used in (KR’06,GR’08)
Model 2
0.51
Models presented in this paper
Model 1
0.713
Model 3
0.715
Model 4
0.832
Model 5
0.848
Table 1: Results of the different transliteration models,
trained using 250 samples. To facilitate readability (Klementiev and Roth, 2006b; Goldwasser and Roth, 2008)
are referenced as KR’06 and GR’08 respectively.

Figure 6: Results of the different constraint optimization
transliteration models. Performance is compared relative
to the number of samples used for training.

representations, training a model on it, and using the
resulting model as a new objective function. However, it turns out that after a single round, improved
weights due to additional training do not change the
feature representation; the inference process does
not yield a different outcome.
3.1

Normalized Objective Function

Formulating the transliteration decision as an optimization problem also allows us to naturally encode other considerations into our objective function. in this case we give preference to matching
short words. We encode this preference as a normalization factor for the objective function. When evaluating on pair (ws , wt ), we divide the weight vector
length of the shorter word; our decision model now
becomes:
Decision Model 6 (Model 5 - LengthNormalization)

Decision Model
Model 5
Model 5 - LN

MRR
0.848
0.894

Table 2: Results of using model 5 with and without a
normalized objective function. Both models were trained
using 250 samples. The LN sufﬁx in the model’s name
indicate that the objective function used length normalization.

Figure 7: Results of using model 5 with and without a
normalized objective function. Performance is compared
relative to the number of samples used for training.

Ranking the transliteration candidates is done by
evaluating:
s∗ = argmaxi WD · IFWD (si )/min(|ws |, |wt |)
As described in table 2 and ﬁgure 7, using
length normalization signiﬁcantly improves the results. This can be attributed to the fact that typically
Hebrew names are shorter and therefore every pair
(ws , wt ) considered by our model will be effected
differently by this normalization factor.

4

Discussion

We introduced a new approach for identifying NE
transliteration, viewing the transliteration decision
as a global inference problem. We explored several methods for combining discriminative learning
in a global constraint optimization framework and
showed that discriminatively learning the objective
function improves performance signiﬁcantly.
From an algorithmic perspective, our key contribution is the introduction of a new method, in which
learning and inference are used in an integrated way.

We use learning to generate an objective function for
the inference process; use the inference process to
generate a better representation for the learning process, and iterate these stages.
From the transliteration perspective, our key contribution is in deriving and showing the signiﬁcance
of a good representation for a pair of NEs. Our
representation captures both phonetic similarity and
distinctive occurrence patterns across character level
matchings of the two input strings, while enforcing
the constraints induced by the interdependencies of
the individual matchings. As we show, this representation serves to improve the ability of a discriminative learning algorithm to weigh features appropriately and results in signiﬁcantly better transliteration
models. This representation can be viewed as a compromise between models that do not consider dependencies between local decisions and those that try to
align the two strings. Achieving this compromise is
one of the advantages of the ﬂexibility allowed by
the constrained optimization framework we use. We
plan to investigate using more constraints within this
framework, such as soft constraints which can penalize unlikely local decisions while not completely
eliminating the entire solution.
Acknowledgments
We wish to thank Alex Klementiev and the anonymous reviewers for their insightful comments. This
work is partly supported by NSF grant SoD-HCER0613885 and DARPA funding under the Bootstrap
Learning Program.

References
R. Barzilay and M. Lapata. 2006. Aggregation via Set
Partitioning for Natural Language Generation. In Proceedings of HLT/NAACL, pages 359–366, New York
City, USA, June. Association for Computational Linguistics.
S. Bergsma and G. Kondrak. 2007. Alignment-based
discriminative string similarity. In Proceedings of the
45th Annual Meeting of the Association of Computational Linguistics, pages 656–663, Prague, Czech Republic, June. Association for Computational Linguistics.
J. Clarke and M. Lapata. Modeling compression with
discourse constraints. In Proceedings of the 2007 Joint
Conference on Empirical Methods in Natural Lan-

guage Processing and Computational Natural Language Learning (EMNLP-CoNLL), pages 1–11.
A. R. Golding and D. Roth. 1999. A Winnow based
approach to context-sensitive spelling correction. Machine Learning, 34(1-3):107–130.
D. Goldwasser and D. Roth. 2008. Active sample selection for named entity transliteration. In Proceedings
of ACL-08: HLT, Short Papers, Columbus, OH, USA,
Jun. Association for Computational Linguistics.
A. Grove and D. Roth. 2001. Linear concepts and hidden
variables. Machine Learning, 42(1/2):123–141.
Ulf Hermjakob, Kevin Knight, and Hal Daum´ III. 2008.
e
Name translation in statistical machine translation learning when to transliterate. In Proceedings of ACL08: HLT, pages 389–397, Columbus, Ohio, June. Association for Computational Linguistics.
A. Klementiev and D. Roth. 2006a. Named entity
transliteration and discovery from multilingual comparable corpora. In Proc. of the Annual Meeting of the
North American Association of Computational Linguistics (NAACL), pages 82–88, June.
A. Klementiev and D. Roth. 2006b. Weakly supervised
named entity transliteration and discovery from multilingual comparable corpora. In Proc. of the Annual
Meeting of the ACL, July.
T. Marciniak and M. Strube. 2005. Beyond the Pipeline:
Discrete Optimization in NLP. In Proceedings of the
Ninth CoNLL, pages 136–143, Ann Arbor, Michigan,
June. Association for Computational Linguistics.
A. Y. Ng and M. I. Jordan. 2001. On discriminative vs.
generative classiﬁers: A comparison of logistic regression and na¨ve bayes. In Neural Information Processı
ing Systems, pages 841–848.
V. Punyakanok, D. Roth, and W. Yih. 2005. The necessity of syntactic parsing for semantic role labeling. In
Proc. of the International Joint Conference on Artiﬁcial Intelligence (IJCAI), pages 1117–1123.
D. Roth and W. Yih. 2004. A linear programming formulation for global inference in natural language tasks. In
Hwee Tou Ng and Ellen Riloff, editors, Proc. of the
Annual Conference on Computational Natural Language Learning (CoNLL), pages 1–8. Association for
Computational Linguistics.
D. Roth. 1998. Learning to resolve natural language ambiguities: A uniﬁed approach. In Proceedings of the
National Conference on Artiﬁcial Intelligence (AAAI),
pages 806–813.
Tao Tao, Su-Youn Yoon, Andrew Fister, Richard Sproat,
and ChengXiang Zhai. 2006. Unsupervised named
entity transliteration using temporal and phonetic correlation. In Proceedings of the 2006 Conference on
Empirical Methods in Natural Language Processing,
pages 250–257, Sydney, Australia, July. Association
for Computational Linguistics.

