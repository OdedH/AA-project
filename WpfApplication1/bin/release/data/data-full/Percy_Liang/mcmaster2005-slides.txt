Linear Programming in Bounded
Tree-width Markov Networks

Percy Liang

Nati Srebro

MIT

U. Toronto

Workshop on Mathematical Programming in Data Mining and Machine Learning / June 1, 2005

1

Motivation: Multivariate density estimation
Goal: to model the dependencies between a set of
random variables

?
?

Linear Programming in Bounded Tree-width Markov Networks / Motivation

2

Hypertrees
Use Markov networks. Control complexity by limiting tree-width k.

k=1

k=2

Weight of a hyperedge (clique) quantiﬁes the importance of
modeling the dependencies between the variables in the hyperedge.
The maximum hypertree problem:
Input: weights of all candidate k-hyperedges
Output: a maximum weight k-hypertree
Linear Programming in Bounded Tree-width Markov Networks / Motivation

3

1-windmill farms
A windmill farm is a subset of the hyperedges of a hypertree.

a 1-windmill (star)

a tree

a 1-windmill farm in the tree

a 1-windmill farm in the tree

Linear Programming in Bounded Tree-width Markov Networks / Motivation

4

2-windmill farms

a 2-windmill

a 2-hypertree

a 2-windmill farm in a 2-hypertree

a 2-windmill farm in a 2-hypertree

Linear Programming in Bounded Tree-width Markov Networks / Motivation

5

Using windmills to approximate hypertrees
• A linear programming relaxation ﬁnds a windmill farm
1
with weight 8k k! of the maximum windmill farm
• The maximum windmill farm captures at least
the weight of a hypertree

1
(k+1)!

of

• Conclusion: The LP-based algorithm can ﬁnd a
1
hypertree with weight 8k k!(k+1)! of the optimal hypertree

Linear Programming in Bounded Tree-width Markov Networks / Motivation

6

Analyzing the windmill coverage ratio
Ck = the fraction of the weight of a k-hypertree that can be
captured by a maximum weight k-windmill farm
1
(k+1)!

1
k+1

≤ Ck ≤

Previous lower bound

Previous upper bound

Question: What is Ck ?
Approach: ﬁnd the “worst” hypertrees for which the weight of the
maximum windmill farm is minimized

Linear Programming in Bounded Tree-width Markov Networks / Motivation

7

Analyzing the windmill coverage
Assume all weights are non-negative and weight of the hypertree
w(T ) = 1.
1. Given a weighted hypertree (T, w), ﬁnd
the maximum weight windmill farm F .

Linear Programming in Bounded Tree-width Markov Networks / Question

Ck (T, w) = max w(F )
F ⊂T

8

Analyzing the windmill coverage
Assume all weights are non-negative and weight of the hypertree
w(T ) = 1.
1. Given a weighted hypertree (T, w), ﬁnd
the maximum weight windmill farm F .

Ck (T, w) = max w(F )

2. Given an unweighted hypertree structure
T , ﬁnd the “worst” weights w.

Ck (T ) = min max w(F )

Linear Programming in Bounded Tree-width Markov Networks / Question

F ⊂T

w

F ⊂T

8

Analyzing the windmill coverage
Assume all weights are non-negative and weight of the hypertree
w(T ) = 1.
1. Given a weighted hypertree (T, w), ﬁnd
the maximum weight windmill farm F .

Ck (T, w) = max w(F )

2. Given an unweighted hypertree structure
T , ﬁnd the “worst” weights w.

Ck (T ) = min max w(F )

3. Find the “worst” weighted hypertree
(T, w).

Ck = inf min max w(F )

Linear Programming in Bounded Tree-width Markov Networks / Question

F ⊂T

w

T

w

F ⊂T

F ⊂T

8

Analyzing the windmill coverage
Assume all weights are non-negative and weight of the hypertree
w(T ) = 1.
1. Given a weighted hypertree (T, w), ﬁnd
the maximum weight windmill farm F .

Ck (T, w) = max w(F )

2. Given an unweighted hypertree structure
T , ﬁnd the “worst” weights w.

Ck (T ) = min max w(F )

3. Find the “worst” weighted hypertree
(T, w).

Ck = inf min max w(F )

F ⊂T

w

T

w

F ⊂T

F ⊂T

Plan: solve problems 1, 2, and 3 for trees and then for hypertrees.
Linear Programming in Bounded Tree-width Markov Networks / Question

8

Problem 1: Ck=1(T, w) = max w(F )

F ⊂T
Goal: ﬁnd the maximum weight windmill farm in a weighted tree.
1

4

1

1

2

1

1

3

1

4

0

6

1

9

2

0

4

2

5

5

1

1

9

w(F ) = 1 + 4 + 4 + 6 + 2 + 3 + 5 + 9 + 9 + 5 + 1 + 1 = 50

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (trees)

9

Problem 1: Ck=1(T, w) = max w(F )
F ⊂T

Solve using dynamic programming:

e

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (trees)

10

Problem 1: Ck=1(T, w) = max w(F )

F ⊂T
Find the maximum weight windmill farm given the state of the root
3 vertex states:
vertex.
free
regular
blocked

fv,i,s = maximum weight of a 1-windmill farm in subtree (v, i) with
vertex v in state s
Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (trees)

11

Problem 1: Ck=1(T, w) = max w(F )
F ⊂T

3 vertex states:
free
regular
blocked

=

+

fv,i,× = fv,i+1,× + fci,1,◦

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (trees)

12

Problem 1: Ck=1(T, w) = max w(F )
F ⊂T

= max{
3 vertex states:
free
regular
blocked

+

,

+

+

}

fv,i,• = max{ fv,i+1,• + fci,1,◦,
fv,i+1,• + fci,1,× + wv,ci }

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (trees)

13

Problem 1: Ck=1(T, w) = max w(F )
F ⊂T

= max{

,
+

,

+

3 vertex states:
free
regular
blocked

+

}

fv,i,◦ = max{ fv,i,•,
fv,i+1,◦ + fci,1,◦,
fv,i+1,× + fci,1,• + wv,ci }
Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (trees)

14

Problem 1: Ck=1(T, w) = max w(F )
F ⊂T

Compute all dynamic programming states fv,i,s in O(|V |)
time:
fv,i,× =
fv,i+1,× + fci,1,◦
fv,i,• = max{ fv,i+1,• + fci,1,◦,
fv,i+1,• + fci,1,× + wv,ci }
fv,i,◦ = max{ fv,i,•,
fv,i+1,◦ + fci,1,◦,
fv,i+1,× + fci,1,• + wv,ci }

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (trees)

15

Problem 2: Ck=1(T ) = min max w(F )

w F ⊂T
Preliminary step: convert the dynamic program into an equivalent
linear program.
Compute froot(T ),1,◦
fv,i,× =
fv,i+1,× + fci ,1,◦
fv,i,• = max{ fv,i+1,• + fci ,1,◦ ,
fv,i+1,• + fci ,1,× + wv,ci }
fv,i,◦ = max{ fv,i,• ,
fv,i+1,◦ + fci ,1,◦ ,
fv,i+1,× + fci ,1,• + wv,ci }

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (trees)

16

Problem 2: Ck=1(T ) = min max w(F )

w F ⊂T
Preliminary step: convert the dynamic program into an equivalent
linear program.
Compute froot(T ),1,◦
fv,i,× =
fv,i+1,× + fci ,1,◦
fv,i,• = max{ fv,i+1,• + fci ,1,◦ ,
fv,i+1,• + fci ,1,× + wv,ci }
fv,i,◦ = max{ fv,i,• ,
fv,i+1,◦ + fci ,1,◦ ,
fv,i+1,× + fci ,1,• + wv,ci }

⇔

Minimize froot(T ),1,◦
fv,i,× ≥ fv,i+1,× + fci ,1,◦
fv,i,• ≥ fv,i+1,• + fci ,1,◦
fv,i,• ≥ fv,i+1,• + fci ,1,× + wv,ci
fv,i,◦ ≥ fv,i,•
fv,i,◦ ≥ fv,i+1,◦ + fci ,1,◦
fv,i,◦ ≥ fv,i+1,× + fci ,1,• + wv,ci

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (trees)

16

Problem 2: Ck=1(T ) = min max w(F )

w F ⊂T
Preliminary step: convert the dynamic program into an equivalent
linear program.
Compute froot(T ),1,◦
fv,i,× =
fv,i+1,× + fci ,1,◦
fv,i,• = max{ fv,i+1,• + fci ,1,◦ ,
fv,i+1,• + fci ,1,× + wv,ci }
fv,i,◦ = max{ fv,i,• ,
fv,i+1,◦ + fci ,1,◦ ,
fv,i+1,× + fci ,1,• + wv,ci }

⇔

Minimize froot(T ),1,◦
fv,i,× ≥ fv,i+1,× + fci ,1,◦
fv,i,• ≥ fv,i+1,• + fci ,1,◦
fv,i,• ≥ fv,i+1,• + fci ,1,× + wv,ci
fv,i,◦ ≥ fv,i,•
fv,i,◦ ≥ fv,i+1,◦ + fci ,1,◦
fv,i,◦ ≥ fv,i+1,× + fci ,1,• + wv,ci

max w(F ) = min froot(T ),1,◦
F ⊂T

Af ≥Bw

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (trees)

16

Problem 2: Ck=1(T ) = min max w(F )
w

max w(F ) =
F ⊂T

F ⊂T

min froot(T ),1,◦

f :Af ≥Bw

Linear Programming in Bounded Tree-width Markov Networks / Problem 2 (trees)

17

Problem 2: Ck=1(T ) = min max w(F )
w

min
w

w≥0;

wi=1

max w(F ) =
F ⊂T

min
w

w≥0;

wi=1

F ⊂T

min froot(T ),1,◦

f :Af ≥Bw

Linear Programming in Bounded Tree-width Markov Networks / Problem 2 (trees)

17

Problem 2: Ck=1(T ) = min max w(F )
w

min
w

w≥0;

wi=1

max w(F ) =
F ⊂T

min
w

w≥0;

wi=1

F ⊂T

min froot(T ),1,◦

f :Af ≥Bw

A single linear program:
min

w≥0;

w,f
wi=1;Af ≥Bw

froot(T ),1,◦

Linear Programming in Bounded Tree-width Markov Networks / Problem 2 (trees)

17

Problem 3: Ck=1 = inf min max w(F )
T

w

F ⊂T

• Observation: A weighted tree with a weight 0 edge is
equivalent to a weighted tree without the edge
• Construct a family of tree structures
{Tb,h | b, h = 1, 2, 3, . . . } (branching factor b, height h)
that contains each tree structure
• Ck=1 = lim Ck=1(Tb,h)
b,h→∞

We solve the linear program and get Ck=1 =
Linear Programming in Bounded Tree-width Markov Networks / Problem 3 (trees)

1
2
18

k-windmill farms (deﬁnition)
Hyperedges of windmill = root-to-leaf paths in representing tree
k=1
k=1

...
representing tree of a 1-windmill

1-windmill farm in a tree
1-windmill

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (hypertrees)

19

k-windmill farms (deﬁnition)
k=2

...

k=2

representing tree of a 2-windmill

2-windmill farm in a hypertree

2-windmill

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (hypertrees)

20

Problem 1: Ck (T, w) = max w(F )
Analyze the windmill coverge for hypertrees.
k=2

F ⊂T

2-hyperedge
hyperedge in windmill farm

representing forest

How do we decompose a hypertree?
Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (hypertrees)

21

Problem 1: Ck (T, w) = max w(F )

F ⊂T
Incidence tree structure: represents how the hypertree is connected
k=2

separator-nodes
hyperedge-nodes

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (hypertrees)

22

Problem 1: Ck (T, w) = max w(F )
F ⊂T

k=1
3 vertex states:
free
regular
blocked

k=2

k = 12

incidence tree structure

representing forest of the windmill farm

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (hypertrees)

23

Problem 1: Ck (T, w) = max w(F )
F ⊂T
Dynamic programming states: fg,i,s, fh,S

fg,i,s = max fg,i+1,s + fh,S + w(h)[[S is a path]]
s→S

fh,S =

fgi,1,restrict(S,gi)
(g, i, s)

i
(h, S)

(g, i+1, s )

Linear Programming in Bounded Tree-width Markov Networks / Problem 1 (hypertrees)

24

Problem 2: Ck (T ) = min max w(F )
w

F ⊂T

Apply the duality technique from before.
min
w

w≥0;

wi=1

max w(F ) =
F ⊂T

min
w

w≥0;

wi=1

min

s,f :Af ≥Bw

froot(T ),1,s

A single linear program:
min

w≥0;

w,f
wi=1;Af ≥Bw

froot(T ),1,◦

Linear Programming in Bounded Tree-width Markov Networks / Problem 2 (hypertrees)

25

Problem 3: Ck = inf min max w(F )
T

w

F ⊂T

Construct a family of hypertrees {Tk,b,h} such that:
• Each hypertree is contained in some Tk,b,h (branching
factor b, height h)
• Ck = lim Ck (Tk,b,h)
b,h→∞

Linear Programming in Bounded Tree-width Markov Networks / Problem 3 (hypertrees)

26

Problem 3: Ck = inf min max w(F )
Tk=2,b,h

b=1

T

b=2

w

F ⊂T

b=3

...

h=1

...

h=2

...

h=3
.
.

...
.
.

.
.

.
.

Linear Programming in Bounded Tree-width Markov Networks / Problem 3 (hypertrees)

27

Problem 3: Ck = inf min max w(F )
Tk=2,b,h

b=1

h=1

0.5

h=2
h=3
.
.

0.5

0.333

.
.

T

b=2

w

F ⊂T

b=3

...

0.5

0.5

...

0.364

0.308

...

0.269

.
.
Converges to Ck=2.

0.263

...

.
.

Linear Programming in Bounded Tree-width Markov Networks / Problem 3 (hypertrees)

28

Achieving a tighter upper bound
• Use weights obtained from the LP solution to construct a
sequence of weighted hypertrees {(Tk,h, wk,h)}
• Compute lim Ck (Tk,h, wk,h) (involves solving Problem 1)
h→∞

wk,h: weight of a hyperedge is 2−height of hyperedge

Linear Programming in Bounded Tree-width Markov Networks / Problem 3 (hypertrees)

29

Achieving a tighter upper bound
• Use weights obtained from the LP solution to construct a
sequence of weighted hypertrees {(Tk,h, wk,h)}
• Compute lim Ck (Tk,h, wk,h) (involves solving Problem 1)
h→∞

wk,h: weight of a hyperedge is 2−height of hyperedge
k=2

Tk=2,h=1 Tk=2,h=2
0.5
0.353
2/4
6/17

Tk=2,h=3
0.308
16/52

Tk=2,h=4
0.286
40/140

...
...
...
...

Linear Programming in Bounded Tree-width Markov Networks / Problem 3 (hypertrees)

2h+2
9h−1

→

2
9
29

Achieving a tighter upper bound
Ck = min Ck (T, w) = min min max w(F )
T,w

k ≤ Ck

1
2
3
4
5
6
k

Windmill Cover
Theorem
0.5
0.166666. . .
0.041666. . .
0.008333. . .
0.001389. . .
0.000198. . .
1/(k + 1)!

Ck

0.5
?
?
?
?
?
?

T

w

F ⊂T

lim Ck (Tk,h, wk,h) ≥ Ck

h→∞

0.5
0.2222222. . .
0.0953932. . .
0.0515625
0.0258048
0.0123157. . .
< 1/2k ?

Linear Programming in Bounded Tree-width Markov Networks / Problem 3 (hypertrees)

≥ Ck
Previous upper
bound
0.5
0.33333. . .
0.25
0.2
0.16666. . .
0.14286. . .
1/(k + 1)
30

Conclusions
• Motivation: using windmill farms to approximate the
maximum likelihood Markov network
• We described an algorithmic technique for providing
bounds on the windmill farm coverage

Linear Programming in Bounded Tree-width Markov Networks / Problem 3 (hypertrees)

31

Conclusions
• Motivation: using windmill farms to approximate the
maximum likelihood Markov network
• We described an algorithmic technique for providing
bounds on the windmill farm coverage
• The exact windmill coverage Ck is open for k > 1
• Future work: apply the duality technique to other
problems (shortest path, minimum cut)

Linear Programming in Bounded Tree-width Markov Networks / Problem 3 (hypertrees)

31

