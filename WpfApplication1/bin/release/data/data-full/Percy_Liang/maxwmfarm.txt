How Much Of A Hypertree Can Be Captured By Windmills?
Percy Liang

Nathan Srebro

MIT Computer Science and Artiﬁcial Intelligence Laboratory
Cambridge, MA 02139, USA
{pliang,nati}@mit.edu
Abstract
Current approximation algorithms for maximum weight hypertrees ﬁnd heavy windmill farms, and
are based on the fact that a constant ratio (for constant width k) of the weight of a k-hypertree can be
captured by a k-windmill farm. However, the exact worst case ratio is not known and is only bounded
to be between 1/(k + 1)! and 1/(k + 1). We investigate this worst case ratio by searching for weighted
hypertrees that minimize the ratio of their weight that can be captured with a windmill farm. To do so,
we use a novel approach in which a linear program is used to ﬁnd “bad” inputs to a dynamic program.

1 Introduction
Acyclic hypergraphs, or hyperforests, are a natural generalization of forests. They have been independently,
and equivalently, deﬁned in many different domains, and are also studied as triangulated graphs (hyperforests are those hypergraphs formed by the cliques of triangulated graphs). Hyperforests are useful in
many domains where higher-order relations are to be captured, but certain tree-like “acyclic” properties are
desired.
Of particular interest are those hyperforests with hyperedges of bounded size: we refer to hyperforests
with hyperedges of size at most k + 1 as k-hyperforests, where 1-hyperforests are standard forests 1 . Given
weights on hyperedges, one might seek to ﬁnd the maximum weight k-hyperforest. Unlike the problem
of ﬁnding the maximum weight forest, or 1-hyperforest, the problem of ﬁnding the maximum weight khyperforest is NP-hard [Sre00]. Karger and Srebro [KS01] presented a constant factor (for constant k)
approximation algorithm for this problem.
In order to achieve a constant approximation ratio, Karger and Srebro introduced a hypergraph generalization of stars (trees of diameter at most 2), referred to as windmills, and observed that a constant fraction
of the weight of a k-hyperforest can always be captured by a collection of disjoint k-windmills (a windmill farm). Unlike hyperforests, which can only be characterized by a global property (namely acyclicity),
windmill farms can be characterized by local properties, enabling an integer programming formulation of
the maximum k-windmill farm problem, that can be approximated to within a constant factor by rounding a
relaxed linear program [KS01]. By the Windmill Cover Theorem [KS01], we know that a constant fraction
of the weight of any k-hyperforest can be captured by a k-windmill farm. Combining the constant factor
rounded linear program approximation algorithm for k-windmills with the Windmill Cover Theorem makes
the rounded linear program a constant factor approximation algorithm for the maximum weight k-hypertree
problem.
1

k is known as the width.

1

The approximation ratio of such an algorithm depends on the k-windmill coverage bound, which is the
fraction of the weight of a k-hyperforest that can always be captured by a k-windmill farm. The Wind1
mill Cover Theorem establishes that the windmill coverage is at least (k+1)! ; that is, for any weighted
1
k-hyperforest, there always exists a k-windmill farm capturing at least (k+1)! of its weight. However, a
1
large gap remains between this lower bound and the worst known upper bound, k+1 [Sre00].
In the work reported here, we investigate the windmill coverage bound, by searching for “worst case”
weighted hypertrees, that is, weighted k-hypertrees that minimize the ratio of their weight that can be captured by k-windmill farms. By ﬁnding such hypertrees, we are able to reduce the upper bound on the
windmill coverage. Furthermore, by investigating the structure of the resulting hypertrees, we hope to be
able to formulate and prove tighter general bounds on the windmill coverage.
In order to ﬁnd such worst-case hypertrees, we present a novel general approach in which inputs to a
dynamic program are encoded by a linear program, enabling us to ﬁnd the ”worst” input by solving the
linear program. Speciﬁcally, we present algorithms for the following progression of problems:
Problem 1 Given a weighted k-hypertree, ﬁnd the windmill coverage of the hypertree, i.e., the weight of
the maximum weight k-windmill farm contained in it.
Problem 2 Given an unweighted hypertree, ﬁnd the windmill coverage bound for that hypertree, namely
the worst assignment of weights to its hyperedges such that the windmill coverage of the hypertree is
minimized.
Problem 3 Given a width k, ﬁnd the overall windmill coverage bound, namely the weighted k-hypertree
with the minimum windmill coverage.
After deﬁning the relevant combinatorial objects and concepts (Section 2), we present dynamic programming algorithm for Problem 1 (Section 3). Next, we formulate a linear program for Problem 2 (Section
4) that is based on the dynamic program, and encodes all possible inputs to it (i.e. all possible weight settings). For both of these problems, we ﬁrst tackle the problem for k = 1, i.e. disjoint collections of stars
(skies) in forests. Although skies are not necessary for ﬁnding maximum weight forests, and the worst case
coverage ratio for skies is known and equal to two, studying the problem for k = 1 facilitates understanding
of the problem for higher widths. In Section 5 we approach Problem 3 by applying the linear program for
Problem 2 to larger and larger “complete” hypertrees.
Implementation Notes The methods described here were written in C++, compiled using GNU C++
compiler version 3.0, RedHat Linux 9.0. The LP solver used was CPLEX version 7.1.

2 Preliminaries
A hypergraph H(V ) is a collection of subsets, or hyperedges, of the vertex set V : H(V ) ⊂ 2 V . If h ⊂ h ∈
H then the hyperedge h is covered by H. Of particular interest are the maximal hyperedges of a hypergraph
H, which are not covered by any other hyperedges in H—in fact, in this paper we refer to H as the set of
maximal hyperedges, while denoting by H the collection of all hyperedges: H = {h ⊂ V |∃ h ∈H h ⊆ h }.
We say that a hypergraph H1 covers H2 if H2 ⊂ H1 .
Several equivalent deﬁnitions of hypergraph acyclicity are in common use (see [Sre00] for a review).
Here, we deﬁne acyclicity using the notion of a tree structure:

2

Deﬁnition 1. A hypergraph H is said to have a tree structure T (H) iff T is a tree over all the hyperedges of
H and the following path overlap property holds: If (h 1 , h2 , . . . , hm ) is a path of H-hyperedges in T , then
∀1<i<m h1 ∩ hm ⊆ hi .
Deﬁnition 2. A hypergraph is acyclic iff it has a tree structure. An acyclic hypergraph is also referred to
as a hyperforest. We say that a hyperforest has width (at most) k and refer to it as a k-hyperforest if all its
hyperedges are of size at most k + 1.
Deﬁnition 3. Let T (V ) be a rooted tree with depth at most k. A k-windmill based on T (V ) is a k-hypertree
whose hyperedges are the sets of vertices determined by the root-to-leaf paths of T (V ). T (V ) is called the
representing tree of the windmill. A 1-windmill is called a star.
A windmill farm is a vertex-disjoint collection of windmills, and its representing forest is the union of
the representing trees of the windmills. A 1-windmill farm is called a sky.
Consider the edges in the representing forest as directed towards the roots. We say that each vertex
points to its parent.

¢ ¢ ¡¢§¡
¢ ¢
 ¡ ¡  ¢§¨¡ ¨¡
¡¡¡¡ §¨¢
 ¢§¨¡  ¢§¨¡
¡§¡
 ¡   ¢¢   ¢¢ ¡¢¡¢
¡ ¡   ¡¡¡ ¡ ¨§

¡¨¡
¨
¡©¡©¡©¡ ¢¡¢¡ ¢§¨¨¡¨¡ ¢
¡¡¡¡©  ¡ ¡¡§¡§¨ £ £
¡©¡©¡©¡ ¢¡¢¡¡¢¡¢ ¦¡¦¡
¡¡¡¡©  ¡ ¡§¡ ¡§ ¨ ¤¡¤¡
¥¦¡¥¦¡
¡ ¡   ¡ ¡¡ ¡ ¢ ¥¥¦¡¥¦£¡
¡ ¢¡¢¡ ¢¨¡¢§¡ ¡¥¡
¤¡¤¡
¡©¡©¡¡ ¡¢¡ ¢§¡¢¡ ¤¡¤¡
¡¡¡©¡©  ¡ ¡ ¡ ¡§¨ £¡¤¡
£¡¦£¡
¡¡ ¡¢¡ ¢¡¢¡ ¢ ¢ ¢ £¤¥¦¡¡£¤¥¦£¤¥¥¦£¤¥¦¤¦£
¡ ¢¢¡¡¢¡¡ ¡£¡
¡¡  ¡ ¡¡ ¡ ¤¡¡¤
£¤¥¦¡¤¡
¡£¤¡
¤¥¦¥
¡£¡£¦
£¡£¡¤¥
¤£¤¡¤¡
£¤¡£¤¡£¤
£¡£¡
¡¡££¤£¤

Figure 1: An example of a windmill farm inside a hypertree. The triangles are hyperedges. The directed
edges correspond to the representing forest of the windmill farm, with the roots of the representing trees at
the darkened vertices. The hyperedges that are in the windmill farm are shaded.
Deﬁnition 4. The windmill coverage of a hypertree H with monotone weights w is the ratio of the maximum
weight of any windmill farm in H to the weight of H:
C(H, w) = max

M ⊂H

w(M )
(where M is a windmill farm).
w(H)

Intuitively, the windmill coverage measures “how well” a windmill farm can “approximate” a hypertree,
by trying to capture as much of the weight of the hypertree as possible.
For an unweighted hypertree H, the windmill coverage is the greatest lower bound of the windmill
coverage over all possible non-negative weights of H. Speciﬁcally, the windmill coverage of H is C(H) =
minw C(H, w).
We can also talk about the windmill coverage of a particular width k, which is the greatest lower bound
of the windmill coverage over all k-hypertrees.

3 Problem 1: ﬁnding the windmill coverage of a weighted hypertree
We present a dynamic program to ﬁnd the maximum weight windmill farm in a weighted hypertree. Note
that ﬁnding the maximum weight windmill farm in arbitrary hypergraphs is NP-hard. However, in low
treewidth graphs (equivalently, hypertrees), many NP-hard problems can be solved in polynomial time using
dynamic programming [Bod93].

3

The key idea is that the hypertrees have separators 2 of size equal to the treewidth. The part of the solution
to a problem that resides on one side of the separator can be found almost independently of the part of the
solution on another side of the separator. The small dependence can be summarized in space proportional to
some function f (k), where k is the size of the separator, not of the entire hypertree. Thus, when k is a small
constant, the dynamic program runs in time linearly proportional to the size of the hypertree.

3.1 Special case: treewidth 1
Before we give the general dynamic program of ﬁnding the maximum windmill farm for arbitrary hypertrees,
let us consider the special case of treewidth 1: ﬁnding a maximum sky (1-windmill farm) in a tree (1hypertree).
Suppose we are given a weighted tree (T, w), and we are trying to ﬁnd the maximum weight sky in T .
Assume that T is rooted arbitrarily, and let us try to construct a maximum sky in T top-down. Suppose that
we have already constructed a partial sky S for all of T except the subtree Tv rooted at some vertex v. What
is the best way to ﬁnish constructing the sky in Tv to maximize the sky coverage given S ? Note that the
answer does not depend on all of S , but only on how v is connected in S . How v is connected in S can be
summarized (without losing information) into one of three states. The states are numbered 0, 1, and 2, so
that higher states mean that v is less connected in S and may connect more freely to vertices in T v .
• state 0: v is connected to its parent, and its parent is connected to another vertex
• state 1: v is connected to its parent, but its parent is not connected to any other vertex
• state 2: v is disconnected from its parent

v

v

v

...

...

...

state 0

state 1

state 2

Figure 2: The possible states of a vertex v. Edges already in the partial sky S are in bold. The dotted edges
represent the subtree Tv rooted at v in which S will be extended.
Now, we present a dynamic program to ﬁnd the maximum sky in T . Let f (v, q) denote the maximum
weight that can be added to a partial sky that induces state ≤ q on vertex v. As q decreases, there are more
restrictions on the extension. Then the sky coverage of T is f (root(T ), 2). To compute f (v, q), we imagine
extending the star that contains v into the subtree T v , and then recursively building the rest of the sky in T v
by invoking f (·) on the children of v, denoted c 1 , . . . , cn . The following describes how to optimally extend
the star at v to maximize f (v, q) for each state q.
• state 0: Because v is already connected to its parent, and its parent is connected to another vertex,
v may not be connected to any of its children. The extension of the sky is completed by invoking
f (ci , 2) for all children. There is only one possible extension.
• state 1: Because v is connected to only its parent, we may join v with arbitrarily many children. If
we connect ci to v, we invoke f (ci , 0). If we don’t connect ci to v, then we invoke f (ci , 2). For each
2

A set of vertices that disconnects a hypertree.

4

child ci , we simply choose the option that contributes the most weight. Note that the null extension
for state 0 is included as one of these possibilities.
• state 2: Certainly, we can use the extension for state 1. In addition, we can also connect a single
child ci to v, and then invoke f (ci , 1) for that child ci and f (cj , 2) for j = i. Again, we choose the
extension that maximizes the contributed weight.
The exact recurrences follow:
n

f (v, 0) =

f (ci , 2)
i=1
n

max(f (ci , 2), w(v, ci ) + f (ci , 0))

f (v, 1) =
i=1

f (v, 2) = max f (v, 1), f (v, 0) + max w(v, ci ) + f (ci , 1) − f (ci , 2)
1≤i≤n

The running time of this dynamic program is O(|V |).

3.2 Windmill coverage in hypertrees
Now we turn our attention to the general case of ﬁnding the maximum windmill farm in a hypertree with
non-negative weights. The basic idea is the same as for treewidth 1, but the states must be more expressive
to capture the complexity of windmill farms in hypertrees. We shall construct a windmill farm in a given
hypertree by constructing its representing forest, which is a directed forest over the vertices. Recall that
the hyperedges of the windmill farm corresponding to this representing forest are the sets of vertices in the
root-to-leaf paths in the forest.
Let (H, w) be a weighted hypertree and T H its rooted tree structure over the hyperedges of H. In the
future, we will be speaking of parent-child relationships in two contexts. Parent-child relationships between
hyperedges refers to TH , and parent-child relationships between vertices refers to the representing forest we
are constructing. We seek a systematic procedure for constructing a representing forest, where the decisions
made at each step of the procedure depend very little on the decisions made so far. At each invocation of
this procedure we will add directed edges to the existing representing forest, so that each candidate directed
edge is considered in exactly one invocation.
For every vertex v not in the root hyperedge h root , there is some hyperedge h such that v is in h −
parent(h). This follows by considering the Graham reduction of H bottom-up from the leaves of T H . For
every candidate directed edge (u → v) that can be added to the representing forest (excluding the case
where u, v ∈ hroot ), there is some hyperedge h that contains both u and v, such that either u or v is in
h − parent(h). In some sense, this hyperedge is “responsible” for (u → v). Our plan is to choose some
initial representing forest in hroot , and then in turn consider each hyperedge h according to a top-down
traversal of TH , selectively adding the directed edges for which h is responsible.
Let h be a hyperedge and c1 , . . . , cn be the children hyperedges of h. Suppose we have constructed
a partial representing forest by considering all hyperedges excluding those in the sub-hypertrees rooted at
ci , . . . , cn . The optimal way to ﬁnish constructing the representing forest depends only on the state of h,
detailed below. Given the state of h, we ﬁrst extend the representing forest to some directed edges for
which ci are responsible. Then, we recursively invoke the procedure (twice) to add the directed edges for
which the subtrees of ci ’s children are responsible and the directed edges for which the subtrees of children
ci+1 , . . . , cn are responsible.
5

Of course, we must enforce that the directed edges form a valid representing forest:
• Ensure that all root-to-leaf paths stay within a single hyperedge. Then we guarantee a k-windmill
farm. This is not too restrictive either, since the only root-to-leaf paths that can capture weight are
those that are entirely in a single hyperedge.
• Ensure that no cycles in the representing forest are formed.
The state of an hyperedge h ought to be able to capture the relevant part of the partial representing forest.
We summarize by remembering where each vertex in h points. Think of the root of a representing tree as
pointing to itself. Each vertex v either points to some vertex in h, points to a vertex outside h (v is blocked),
or does not point to any vertex yet (v is free).
The state of an hyperedge h is (R, F ):
• R is the representing forest in h (set of directed edges that lie entirely in h)
• F is the set of free vertices
Any vertex that is not in F and does not point to any vertex is said to be blocked.
In the dynamic program, we compute f (h, i, R, F ), which is the maximum weight contribution by
extending a representing forest that induces the state (R, F ) on h to include directed edges for which the
hyperedges in the subtrees ci , . . . , cn are responsible. Then, the weight of a maximum windmill farm in
H is max(R,F ) f (hroot , 1, R, F ), where we are taking the maximum over all initial representing forests in
hroot .
Since H is a hypertree with only maximal k-hyperedges, each overlap between a hyperedge h and one
of h’s children is of size k. Thus, there is exactly one vertex α i in h − ci and exactly one vertex βi in ci − h.
f (h, n + 1, R, F ) =

w(h)
0

if R is a directed path through all the vertices of h
otherwise

(1)

f (h, n, R, F ) is the bottom case where we consider no new directed edges, but instead add weight of h
if h is captured by the representing forest, which can be determined by looking at R.
f (h, i, R, F ) =

max

extention of R into ci

f (h, i + 1, R , F ) + f (ci , 1, Rc , Fc ),

(2)

To extend R, we do the following two steps. Figure 3 shows an example of extending R.
1. Partition the free vertices F into three sets F 1 , F2 , and F3 .
• For v ∈ F1 , keep v free in (R , F ). v will be blocked in (Rc , Fc ). It is important to enforce that
F1 includes the root of αi (if that vertex exists in ci ), so that the root-to-leaf path to α i will stay
in a single hyperedge.
• For v ∈ F2 , keep v free in (Rc , Fc ). In this case, v will not point to any vertex in c i or h, but
rather some descendant of ci . v will be blocked in (R , F ) so the invocation to f (h, i + 1, R, F )
won’t try to point v to any vertex not in the hyperedges of the subtree rooted at c i .
• For v ∈ F3 , point v to βi . v will be blocked in (R , F ) so the invocation to f (h, i + 1, R, F )
won’t try to point v to any vertex (v already points to β i ).
2. For βi , choose one of the following options:
• Point βi to a vertex vb in ci such that the root of vb is in ci , so that this root-to-leaf path stays
within ci . Also, make sure that (βi → vb ) does not create a cycle.
6

• Keep βi free in (Rc , Fc ), so that βi will point to some vertex in a descendant of c i .
The states (R , F ) and (Rc , Fc ) are computed as follows:
• R = R.
• Rc includes R and any edges connecting β i , but excluding any edges connecting α i .
• F = F1 .
• Fc includes F2 and also βi if βi is free in (Rc , Fc ).
PSfrag replacements

vertices that point to some vertex in the representing forest (R)
blocked vertices
existing pointer
vertices free for ci+1 , . . . , cn (F1 )
new pointer (for which ci is responsible)
vertices free in ci (F2 )
vertices pointing to βi (F3 ) ...
h
αi

ci−1

...

ci

αi−1

βi−1

βi

Figure 3: An example of a call to f (h, i, R, F ).
The running time of this dynamic program is O((k + 3) k+1 |V |).

4 Problem 2: ﬁnding the windmill coverage of an unweighted hypertree
We now describe a linear program based on the dynamic program used to solve Problem 1. The dynamic
program involves computing many values (in the maximum sky dynamic program, f (v, q) for all vertices v
and q ∈ {0, 1, 2}). These are the dynamic programming (DP) states. The value of each DP state is equal to
an expression involving only addition and max operations of the values of other DP states.
The general technique for converting a dynamic program of this form into a linear program (LP) is to
make each DP state a LP variable. Values known in the DP but unknown in the LP (such as hyperedge
weights) also become LP variables. Each expression for computing the value of a DP state is translated into
several LP inequalities and perhaps more LP variables.
An expression of the form A = B + C + D translates into the same LP equation. The expression
A = max(B, C, D) translates into three LP inequalities: A ≥ B, A ≥ C, and A ≥ D. A more complex
expression A = max(B, C, D) + E is equivalent to the translation of two expressions A = N + E and
N = max(B, C, D), where N is a fresh variable.
Following the technique described above, let us construct the LP. The variables of the LP are the DP
states f (v, q), the weights of the edges w(v 1 , v2 ), and a new variable for each max expression. For example,
the DP equation for f (v, 1) yields the following LP inequalities, where z i ’s are fresh variables:
7

n

f (v, 1) =

zi
i=1

∀i, zi ≥ f (ci , 2)
∀i, zi ≥ w(v, ci ) + f (ci , 0)

In a feasible settings of the variables, f (v, q) is a possible weight for a sky in the subtree T v with the
connectedness of v speciﬁed by q.
Finally, we add one additional equation requiring that all edge weights sum to 1. Because we are trying
to minimize the ratio of the maximum weight sky to the weight of the tree, we can ignore the division by the
weight of the tree in computing the sky coverage. The objective function is to minimize the single variable
representing the weight of the maximum sky, f (v, root(T )).
Constructing a linear program to ﬁnd the windmill coverage of an unweighted hypertree H is the procedure for converting the dynamic program into a linear program is the same as the one discussed for the sky
coverage case.

4.1 Necessity of a linear program
To solve Problem 2, we cannot devise a dynamic program in which subproblems would involve solving small
linear programs instead of solving one giant linear program with the same size as the dynamic program. For
example, in the sky coverage case, we would like to express f (v, q) (the sky coverage of the tree structure
rooted at v) in terms of the sky coverage of subtree structures, and minimize f (v, q) by solving an LP local
to v.
The problem is that f (v, q) for different values of q are not independent from each other. Their values
correspond to different setting of weights, and thus cannot be achieved at the same time. An expression
therefore cannot blindly reference f (v, 0) and f (v, 1) independently to concoct a set of new weights, because the weights corresponding to f (v, 0) and the weights corresponding to f (v, 1) might differ.
Each assignment of weights in Tv can be summarized as a triple (f (v, 0), f (v, 1), f (v, 2)). Each triple
can be seen as a feasible three-dimensional point. We only care about storing for v the best points. The
most compact representation is to store, for two of the coordinates, the largest value of the third coordinate.
Notice that if the feasible points were one-dimensional, we would only need to store a single value. But for
three-dimensional points in our case, we need to store a value for each of many points in the plane, which is
prohibitively expensive.

5 Problem 3: ﬁnding the windmill coverage
5.1 Special case: treewidth 1
Now, we attempt to ﬁnd the sky coverage (the sky coverage of the absolute “worst” weighted tree). The
sky coverage of a tree T is at most the sky coverage of a subtree T ⊂ T , since the worst assignment of
weights for T can be augmented to T by simply assigning zero weight to edges not in T . Therefore, let us
consider complete trees of breadth b and depth d, denoted T (b, d). If we let b and d tend to inﬁnity, then the
sky coverage of T (b, d) tends to the sky coverage. Table 1 in the appendix shows some results obtained for
various values of b and d.
8

...

...
1

2

3

m

Figure 4: (a) An example of a worst assignment of weights for T (3, 3). Bold edges have weight 1. Nonbold edges have weight 0. (b) Consider this sequence of weighted trees T m , where all weights are equal.
m+1
An example of a maximum sky in Tm is marked by bold edges. The sky coverage of T m is equal to 2m−1 ,
which approaches the lower bound of 1/2 as m → ∞.
5.1.1

Properties of skies and trees

Though we have achieved our goal for ﬁnding a worst weighted tree that minimizes the sky coverage, we
would like to still study the assignment of weights to some given tree structure. We found empirically that
the worst assignment of weights were always binary (all edge weights are 0 or 1) and that the subforest
induced by the weight 1 edges forms a tree. Furthermore, all the induced subtrees satisfy the surprising
property that each non-leaf vertex in the subtree is connected to exactly one leaf vertex. See Figure 4 for an
example. We conjecture that this is true for all tree structures, and have proved that it is true for certain class
of tree structures, including trees with the property.

5.2 General case
5.2.1

Complete structure

As in the sky coverage case (Section 5.1), we run the linear program over complete structures controlled
by some breadth b and depth d. Deﬁne Hc (k, b, d) to be the family of complete k-hypertree structures.
Hc (k, b, d) is the k-hypertree corresponding to the tree structure T H constructed in the following way. T H
has has depth d. The root has (k + 1)b children (b on each separator) and all other hyperedges excluding the
leaves have kb children (b on each separator). Since every k-hypertree is contained in some H c (k, b, d), the
windmill coverage is obtained as b and d approach inﬁnity. Table 2 in the appendix summarizes the results
obtained by the program for treewidth k = 2.
We can prune the hypertree without changing the windmill coverage. Let L be the set of leaves in the
tree structure of Hc (k, b, d) that all share the same separator s with the rest of the hypertree. We claim that
there is no need for L to contain more than one hyperedge, since any maximum windmill farm will either
contain all of the hyperedges in L or none of them. If L contained more than one hyperedge, then we could
achieve the same windmill coverage bound with one hyperedge in L.
The proof of the claim goes as follows. Suppose a maximum windmill farm M contains h ∈ L. Let
v ∈ h be the single vertex not in the separator s. Let R be the representing forest of M projected onto h. R
must be a directed path that goes through all the vertices in h. This path might as well end in v, or else there
is no chance of capturing any hyperedges adjacent to h. Then M can contain all hyperedges in L simply by
extending the path in the representing forest through s to each of the vertex leaves in the other hyperedges
of L.
Unlike in the sky coverage case, the worst assignment of weights obtained by the linear program for
Hc (k, b, d) are not binary in general. In fact, it is not always possible to achieve the windmill coverage
bound of a hypertree H using only binary weights. For instance, the windmill coverage of H c (2, 1, 2) is

9

4/11, but the worst windmill coverage obtained using binary weights is 4/10.
5.2.2

Exponentially decreasing weights with leaf restrictions

Using the results from these runs, we noticed two properties that the worst assignment of weights exhibits.
First, non-leaf hyperedges in the tree structure generally are adjacent to a leaf hyeredge. The importance of
leaves in creating the worst assignment of weights was also noted in Section 5.1.1. Second, the weights of
the hyperedges decrease roughly exponentially as the depth increases linearly.
Based on these observations, we concocted a sequence of weighted hypertrees, which we call H e (k, b, d),
which tightens the gap between lower and upper bounds of the windmill coverage. Note that unlike H c , He
is weighted. Figure 5 gives an example of H e (2, 2, 3).
The weights are halved with increasing depth, and each non-leaf hyperedge in the tree structure is
adjacent to exactly one leaf hyperedge per separator. Formally,
• He (k, b, 0) is the empty hypergraph.
• He (k, b, d) includes a hyperedge h with weight 2 d−1 , and for each of h’s k + 1 separators, a leaf
hyperedge with weight 2d−1 and b − 1 copies of He (k, b, d − 1) (except that the number of separators
for these subtrees is k instead of k + 1).

4

4

2

2

1

1

4

2

1

1

1

2

2

1

1

1

4

2

1

1

1

2

2

1

1

1

2

1

1

1

1

Figure 5: Two representations of He (2, 2, 3). In (a), each triangle is an hyperedge, and the bold triangles
represent the hyperedges in a maximum windmill farm. In (b), each hyperedge is a node in the tree structure,
labelled with the weight of that hyperedge. The children of a hyperedge are grouped by separator, depicted
by alternating bold and normal styles.
To ﬁnd the windmill coverage of He , we used a specialized version of the dynamic program presented
in Section 3.2, taking advantage of the regular structure. The specialized dynamic program runs in time
linearly proportional to the depth d of the hypertree. We ran the program for successively increasing depths
until the windmill coverage converged. It is interesting to note that convergence happens faster for larger
width.
For k > 1, the minimum windmill coverage was obtained with b = 2. (For k = 1, b = 3 yielded a
smaller windmill coverage.) The weights of a maximum windmill farm when b = 2 and d → ∞:

6 Discussion
We tackle the problem of ﬁnding a “worst case” hypertree, a weighted hypertree that comes as close to the
overall windmill coverage bound as possible, i.e., such that no windmill farm can capture much of the weight
10

k
2
3
4
5
6

lower bound (1/(k + 1)!)
0.166667
0.041667
0.008333
0.001389
0.000198

limd→∞ C(He (k, 2, d))
0.2222222 = 2/9
0.0953932...
0.0515625 = 33/640
0.0258048 = 2016/78125
0.0123157...

previous upper bound (1/(k + 1))
0.33333
0.25
0.2
0.16667
0.14286

of the hypertree. Given weights on a hypertree (Problem 1), we can readily ﬁnd the windmill coverage of
that hypertree via dynamic programming. The challenge is ﬁnding the worst case assignment of weights
(Problem 2). Here, we presented an novel approach to this problem by encoding the input weights of the
dynamic program as variables in the linear program.
The hardest leap is Problem 3, where we must ﬁnd not only the worst weights but the worst unweighted
hypertree, which we do by considering increasingly larger complete hypertrees. By looking at the resulting
worst case weights for particular hypertrees, we reap the intuitive properties that a worst case hypertree
might have. Since the size of linear program grows exponentially with the depth of the hypertree, we use
these properties to narrowed our search space. Eventually, we came up with a particular family of weighted
hypertrees (He ) that was much closer to the lower bound than our previous upper bound. Yet, the worst
case windmill coverage ratio remains unresolved. We hope that further investigation of structures revealed
here can help not only in ﬁnding “bad” examples, but also in strengthening the positive results and proving
a higher lower bound on the windmill coverage.
Acknowledgments We are thankful to Erik Demaine for comments and Swastik Kopparty for helping
with the analysis of the binary weights property in trees.

References
[Bod93] Hans L. Bodlaender. A tourist guide through treewidth. Acta Cybernetica, 11:1–21, 1193.
[KS01] David Karger and Nathan Srebro. Learning Markov networks: Maximum bounded tree-width
graphs. In Proceedings of the 12th ACM-SIAM Symposium on Discrete Algorithms, 2001.
[Sre00] Nathan Srebro. Maximum likelihood Markov networks: An algorithmic approach. Master’s thesis,
Massachusetts Institute of Technology, 2000.

Appendix

11

b\d
2
3
4

2
0.6667
0.6000
0.5714

3
0.6000
0.5385
0.5200

4
0.5556
0.5172
0.5063

5
0.5384
0.5082
0.5021

6
0.5294
0.5040
0.5007

7
0.5238
0.5020
0.5002

Table 1: Sky coverage for complete rooted tree structures T (b, d).

b\d
1
2
3
4
5
6
7
8

2
4/11=0.364
4/13=0.308
7/23=0.304
10/33=0.303
13/43=0.302
16/53=0.302
19/63=0.302
22/73=0.301

3
1/3=0.333
7/26=0.269
10/38=0.263
13/50=0.260
16/62=0.258

4
4/13=0.308
15/62=0.242
18/78=0.231
15/67=0.224

5
5/17=0.294
51/226=0.226

6
12/43=0.279

7
24/89=0.270

Table 2: Windmill coverage coverage for complete tree structures H c (2, b, d).

12

