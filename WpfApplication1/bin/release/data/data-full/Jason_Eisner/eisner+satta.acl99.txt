Proc. of the 37th ACL (Assoc. for
Computational Linguistics) (1999)

Eﬃcient Parsing for Bilexical Context-Free Grammars
and Head Automaton Grammars∗
Jason Eisner
Giorgio Satta
Dept. of Computer & Information Science Dip. di Elettronica e Informatica
University of Pennsylvania
Universit` di Padova
a
200 South 33rd Street,
via Gradenigo 6/A,
Philadelphia, PA 19104 USA
35131 Padova, Italy
jeisner@linc.cis.upenn.edu
satta@dei.unipd.it
Abstract
Several recent stochastic parsers use bilexical
grammars, where each word type idiosyncratically prefers particular complements with particular head words. We present O(n4 ) parsing
algorithms for two bilexical formalisms, improving the prior upper bounds of O(n5 ). For a common special case that was known to allow O(n3 )
parsing (Eisner, 1997), we present an O(n3 ) algorithm with an improved grammar constant.

1

Introduction

Lexicalized grammar formalisms are of both
theoretical and practical interest to the computational linguistics community. Such formalisms specify syntactic facts about each word
of the language—in particular, the type of
arguments that the word can or must take.
Early mechanisms of this sort included categorial grammar (Bar-Hillel, 1953) and subcategorization frames (Chomsky, 1965). Other lexicalized formalisms include (Schabes et al., 1988;
Mel’ˇuk, 1988; Pollard and Sag, 1994).
c
Besides the possible arguments of a word, a
natural-language grammar does well to specify
possible head words for those arguments. “Convene” requires an NP object, but some NPs are
more semantically or lexically appropriate here
than others, and the appropriateness depends
largely on the NP’s head (e.g., “meeting”). We
use the general term bilexical for a grammar
that records such facts. A bilexical grammar
makes many stipulations about the compatibility of particular pairs of words in particular
roles. The acceptability of “Nora convened the
∗

The authors were supported respectively under ARPA
Grant N6600194-C-6043 “Human Language Technology”
and Ministero dell’Universit` e della Ricerca Scientiﬁca
a
e Tecnologica project “Methodologies and Tools of High
Performance Systems for Multimedia Applications.”

party” then depends on the grammar writer’s
assessment of whether parties can be convened.
Several recent real-world parsers have improved state-of-the-art parsing accuracy by relying on probabilistic or weighted versions of
bilexical grammars (Alshawi, 1996; Eisner,
1996; Charniak, 1997; Collins, 1997). The rationale is that soft selectional restrictions play
a crucial role in disambiguation.1
The chart parsing algorithms used by most of
the above authors run in time O(n5 ), because
bilexical grammars are enormous (the part of
the grammar relevant to a length-n input has
size O(n2 ) in practice). Heavy probabilistic
pruning is therefore needed to get acceptable
runtimes. But in this paper we show that the
complexity is not so bad after all:
• For bilexicalized context-free grammars,
O(n4 ) is possible.
• The O(n4 ) result also holds for head automaton grammars.
• For a very common special case of these
grammars where an O(n3 ) algorithm was
previously known (Eisner, 1997), the grammar constant can be reduced without
harming the O(n3 ) property.
Our algorithmic technique throughout is to propose new kinds of subderivations that are not
constituents. We use dynamic programming to
assemble such subderivations into a full parse.

2

Notation for context-free
grammars

The reader is assumed to be familiar with
context-free grammars.
Our notation fol1
Other relevant parsers simultaneously consider two
or more words that are not necessarily in a dependency
relationship (Laﬀerty et al., 1992; Magerman, 1995;
Collins and Brooks, 1995; Chelba and Jelinek, 1998).

lows (Harrison, 1978; Hopcroft and Ullman,
1979). A context-free grammar (CFG) is a tuple
G = (VN , VT , P, S), where VN and VT are ﬁnite,
disjoint sets of nonterminal and terminal symbols, respectively, and S ∈ VN is the start symbol. Set P is a ﬁnite set of productions having
the form A → α, where A ∈ VN , α ∈ (VN ∪ VT )∗ .
If every production in P has the form A → BC
or A → a, for A, B, C ∈ VN , a ∈ VT , then the
grammar is said to be in Chomsky Normal Form
(CNF).2 Every language that can be generated
by a CFG can also be generated by a CFG in
CNF.
In this paper we adopt the following conventions: a, b, c, d denote symbols in VT , w, x, y de∗
note strings in VT , and α, β, . . . denote strings
in (VN ∪ VT )∗ . The input to the parser will be a
CFG G together with a string of terminal symbols to be parsed, w = d1 d2 · · · dn . Also h, i, j, k
denote positive integers, which are assumed to
be ≤ n when we are treating them as indices
into w. We write wi,j for the input substring
di · · · dj (and put wi,j = ǫ for i > j).
A “derives” relation, written ⇒, is associated
with a CFG as usual. We also use the reﬂexive
and transitive closure of ⇒, written ⇒∗ , and
deﬁne L(G) accordingly. We write α β δ ⇒∗

• A[a] → B[b] C[a]
• A[a] → C[a] B[b]
• A[a] → a

Thus every nonterminal is lexicalized at some
terminal a. A constituent of nonterminal type
A[a] is said to have terminal symbol a as its lexical head, “inherited” from the constituent’s
head child in the parse tree (e.g., C[a]).
Notice that the start symbol is necessarily a
lexicalized nonterminal, T [$]. Hence $ appears
in every string of L(G); it is usually convenient
to deﬁne G so that the language of interest is
actually L′ (G) = {x : x$ ∈ L(G)}.
Such a grammar can encode lexically speciﬁc
preferences. For example, P might contain the
productions
•
•
•
•
•

VP[solve] → V[solve] NP[puzzles]
NP[puzzles] → DET[two] N[puzzles]
V[solve] → solve
N[puzzles] → puzzles
DET[two] → two

in order to allow the derivation VP[solve] ⇒∗
solve two puzzles, but meanwhile omit the similar productions

αγδ for a derivation in which only β is rewritten.

3

(1)
(2)
(3)

•
•
•
•

Bilexical context-free grammars

We introduce next a grammar formalism that
captures lexical dependencies among pairs of
words in VT . This formalism closely resembles stochastic grammatical formalisms that are
used in several existing natural language processing systems (see §1). We will specify a nonstochastic version, noting that probabilities or
other weights may be attached to the rewrite
rules exactly as in stochastic CFG (Gonzales
and Thomason, 1978; Wetherell, 1980). (See
§4 for brief discussion.)
Suppose G = (VN , VT , P, T [$]) is a CFG in
CNF.3 We say that G is bilexical iﬀ there exists
a set of “delexicalized nonterminals” VD such
that VN = {A[a] : A ∈ VD , a ∈ VT } and every
production in P has one of the following forms:

VP[eat] → V[eat] NP[puzzles]
VP[solve] → V[solve] NP[goat]
VP[sleep] → V[sleep] NP[goat]
NP[goat] → DET[two] N[goat]

since puzzles are not edible, a goat is not solvable, “sleep” is intransitive, and “goat” cannot
take plural determiners. (A stochastic version
of the grammar could implement “soft preferences” by allowing the rules in the second group
but assigning them various low probabilities.)
The cost of this expressiveness is a very large
grammar. Standard context-free parsing algorithms are ineﬃcient in such a case. The CKY
algorithm (Younger, 1967; Aho and Ullman,
1972) is time O(n3 ·|P |), where in the worst case
|P | = |VN |3 (one ignores unary productions).
For a bilexical grammar, the worst case is |P | =
|VD |3 ·|VT |2 , which is large for a large vocabulary
VT . We may improve the analysis somewhat by
observing that when parsing d1 · · · dn , the CKY
algorithm only considers nonterminals of the
form A[di ]; by restricting to the relevant productions we obtain O(n3 · |VD |3 · min(n, |VT |)2 ).

2

Production S → ǫ is also allowed in a CNF grammar
if S never appears on the right side of any production.
However, S → ǫ is not allowed in our bilexical CFGs.
3
We have a more general deﬁnition that drops the
restriction to CNF, but do not give it here.

2

time; so the runtime is O(n4 max(p, |VD |2 )).
By comparison, the CKY algorithm uses only
the ﬁrst type of item, and relies on rules whose
C
B
✑◗
 ❅
✑
◗ . Such rules
inputs are pairs   ′❅
i h j j+1h k
5 ) diﬀerent ways for a
can be instantiated in O(n
ﬁxed grammar, yielding O(n5 ) time complexity.
The new algorithm saves a factor of n by combining those two constituents in two steps, one
of which is insensitive to k and abstracts over its
possible values, the other of which is insensitive
to h′ and abstracts over its possible values.
It is straightforward to turn the new O(n4 )
recognition algorithm into a parser for stochastic bilexical CFGs (or other weighted bilexical
CFGs). In a stochastic CFG, each nonterminal
A[a] is accompanied by a probability distribution over productions of the form A[a] → α. A
T
 ❅
parse is just a derivation (proof tree) of   ❅ ,
1 h n
and its probability—like that of any derivation
we ﬁnd—is deﬁned as the product of the probabilities of all productions used to condition inference rules in the proof tree. The highestprobability derivation for any item can be reconstructed recursively at the end of the parse,
provided that each item maintains not only a
bit indicating whether it can be derived, but
also the probability and instantiated root rule
of its highest-probability derivation tree.

We observe that in practical applications we
always have n ≪ |VT |. Let us then restrict
our analysis to the (inﬁnite) set of input instances of the parsing problem that satisfy relation n < |VT |. With this assumption, the
asymptotic time complexity of the CKY algorithm becomes O(n5 · |VD |3 ). In other words,
it is a factor of n2 slower than a comparable
non-lexicalized CFG.

4

Bilexical CFG in time O(n4 )

In this section we give a recognition algorithm
for bilexical CNF context-free grammars, which
runs in time O(n4 · max(p, |VD |2 )) = O(n4 ·
|VD |3 ). Here p is the maximum number of productions sharing the same pair of terminal symbols (e.g., the pair (b, a) in production (1)). The
new algorithm is asymptotically more eﬃcient
than the CKY algorithm, when restricted to input instances satisfying the relation n < |VT |.
Where CKY recognizes only constituent substrings of the input, the new algorithm can recognize three types of subderivations, shown and
described in Figure 1(a). A declarative speciﬁcation of the algorithm is given in Figure 1(b).
The derivability conditions of (a) are guaranteed by (b), by induction, and the correctness of
the acceptance condition (see caption) follows.
This declarative speciﬁcation, like CKY, may
be implemented by bottom-up dynamic programming. We sketch one such method. For
each possible item, as shown in (a), we maintain
a bit (indexed by the parameters of the item)
that records whether the item has been derived
yet. All these bits are initially zero. The algorithm makes a single pass through the possible
items, setting the bit for each if it can be derived
using any rule in (b) from items whose bits are
already set. At the end of this pass it is straightforward to test whether to accept w (see caption). The pass considers the items in increasing order of width, where the width of an item
in (a) is deﬁned as max{h, i, j} − min{h, i, j}.
Among items of the same width, those of type
△ should be considered last.
The algorithm requires space proportional to
the number of possible items, which is at most
n3 |VD |2 . Each of the ﬁve rule templates can
instantiate its free variables in at most n4 p or
(for Complete rules) n4 |VD |2 diﬀerent ways,
each of which is tested once and in constant

5

A more eﬃcient variant

We now give a variant of the algorithm of §4; the
variant has the same asymptotic complexity but
will often be faster in practice.
Notice that the Attach-Left rule of Figure 1(b) tries to combine the nonterminal label
B[dh′ ] of a previously derived constituent with
every possible nonterminal label of the form
C[dh ]. The improved version, shown in Figure 2,
restricts C[dh ] to be the label of a previously derived adjacent constituent. This improves speed
if there are not many such constituents and we
can enumerate them in O(1) time apiece (using
a sparse parse table to store the derived items).
It is necessary to use an agenda data structure (Kay, 1986) when implementing the declarative algorithm of Figure 2. Deriving narrower
items before wider ones as before will not work
here because the rule Halve derives narrow
items from wide ones.
3

A
 ❅
(a)
  ❅
i h j
A
✏
✏ 
C
 ❅
i
j h
A
✏ 
✏
C
 ❅
j
h i

(i ≤ h ≤ j, A ∈ VD )

is derived iﬀ A[dh ] ⇒∗ wi,j

(i ≤ j < h, A, C ∈ VD )

is derived iﬀ A[dh ] ⇒ B[dh′ ]C[dh ] ⇒∗ wi,j C[dh ] for some B, h′

(h < i ≤ j, A, C ∈ VD )

is derived iﬀ A[dh ] ⇒ C[dh ]B[dh′ ] ⇒∗ C[dh ]wi,j for some B, h′

(b) Start:

A[dh ] → dh
A
 ❅
 ❅
h h h
Attach-Left:
B
 ❅
 ❅
i h′ j
A[dh ] → B[dh′ ]C[dh ]
A
✏
✏ 
C
 ❅
i
j h
Attach-Right:
B
 ❅
 ❅
i h′ j
A[dh ] → C[dh ]B[dh′ ]
A
✏ 
✏
C
 ❅
j
h i

Complete-Right:

Complete-Left:

A
✏
✏ 
C
 ❅
i
j h

C
✑◗
✑
◗
j+1 h k

A
 ❅
 ❅
i h k
C
✑◗
✑
◗
i h j−1

A
✏ 
✏
C
 ❅
h j
k

A
 ❅
 ❅
i h k

Figure 1: An O(n4 ) recognition algorithm for CNF bilexical CFG. (a) Types of items in the
parse table (chart). The ﬁrst is syntactic sugar for the tuple [△, A, i, h, j], and so on. The stated
conditions assume that d1 , . . . dn are all distinct. (b) Inference rules. The algorithm derives the
item below ——– if the items above ——– have already been derived and any condition to the right
of ——– is met. It accepts input w just if item [△, T, 1, h, n] is derived for some h such that dh = $.
(a)

A
 ❅
 ❅
i h j
A
 
 
i h
A
❅
❅
h j
A
✏
✏ 
C
 ❅
i
j h
A
✏ 
✏
C
 ❅
j
h i

(i ≤ h ≤ j, A ∈ VD )

is derived iﬀ A[dh ] ⇒∗ wi,j

(i ≤ h, A ∈ VD )

is derived iﬀ A[dh ] ⇒∗ wi,j for some j ≥ h

(h ≤ j, A ∈ VD )

is derived iﬀ A[dh ] ⇒∗ wi,j for some i ≤ h

(i ≤ j < h, A, C ∈ VD )

is derived iﬀ A[dh ] ⇒ B[dh′ ]C[dh ] ⇒∗ wi,j C[dh ] ⇒∗ wi,k for
some B, h′ , k

(h < i ≤ j, A, C ∈ VD )

is derived iﬀ A[dh ] ⇒ C[dh ]B[dh′ ] ⇒∗ C[dh ]wi,j ⇒∗ wk,j for
some B, h′ , k

(b) As in Figure 1(b) above, but add Halve and change Attach-Left and Attach-Right as shown.
Attach-Right:
Attach-Left:
Halve:
C
C
B
B
A
✑
◗
 ❅
 ❅
 ❅
 ❅
✑
◗
  ❅
 ❅
i h′ j j + 1 h
h j − 1 j h′ k
i h j
A[dh ] → C[dh ]B[dh′ ]
A[dh ] → B[dh′ ]C[dh ]
A
A
A A
✏
✏ 

✏
✏
 
❅
C
C
 
❅
 ❅
 ❅
i h h j
i
j h
h j
k

Figure 2: A more eﬃcient variant of the O(n4 ) algorithm in Figure 1, in the same format.
4

6

Multiple word senses

• Ia , Fa ⊆ Qa are sets of initial and ﬁnal
states, respectively;
• δa is a transition function mapping Qa ×
VT × D to 2Qa , the power set of Qa .

Rather than parsing an input string directly, it
is often desirable to parse another string related
by a (possibly stochastic) transduction. Let T
be a ﬁnite-state transducer that maps a mor∗
pheme sequence w ∈ VT to its orthographic realization, a grapheme sequence w. T may re¯
alize arbitrary morphological processes, including aﬃxation, local clitic movement, deletion
of phonological nulls, forbidden or dispreferred
k-grams, typographical errors, and mapping of
multiple senses onto the same grapheme. Given
grammar G and an input w, we ask whether
¯
w ∈ T (L(G)). We have extended all the algo¯
rithms in this paper to this case: the items simply keep track of the transducer state as well.
Due to space constraints, we sketch only the
special case of multiple senses. Suppose that
¯
¯
¯
the input is w = d1 · · · dn , and each di has up to
¯
g possible senses. Each item now needs to track
its head’s sense along with its head’s position in
w. Wherever an item formerly recorded a head
¯
position h (similarly h′ ), it must now record a
pair (h, dh ), where dh ∈ VT is a speciﬁc sense of
¯
dh . No rule in Figures 1–2 (or Figure 3 below)
will mention more than two such pairs. So the
time complexity increases by a factor of O(g 2 ).

7

A single head automaton is an acceptor for a
∗
∗
language of string pairs zl , zr ∈ VT × VT . Informally, if b is the leftmost symbol of zr and
q ′ ∈ δa (q, b, →), then Ha can move from state q
to state q ′ , matching symbol b and removing it
from the left end of zr . Symmetrically, if b is the
rightmost symbol of zl and q ′ ∈ δa (q, b, ←) then
from q Ha can move to q ′ , matching symbol b
and removing it from the right end of zl .5
More formally, we associate with the head automaton Ha a “derives” relation ⊢a , deﬁned as
∗
∗
a binary relation on Qa × VT × VT . For ev∗ , b ∈ V , d ∈ D, and
ery q ∈ Q, x, y ∈ VT
T
q ′ ∈ δa (q, b, d), we specify that
(q, xb, y) ⊢a (q ′ , x, y)
(q, x, by) ⊢a (q ′ , x, y)

if d =←;
if d =→ .

The reﬂexive and transitive closure of ⊢a is written ⊢∗ . The language generated by Ha is the set
a
L(Ha ) = { zl , zr

Head automaton grammars in
time O(n4 )

|

(q, zl , zr ) ⊢∗ (r, ǫ, ǫ),
a
q ∈ Ia , r ∈ Fa }.

We may now deﬁne the language generated
by the entire grammar H. To generate, we expand the start word $ ∈ VT into x$y for some
x, y ∈ L(H$ ), and then recursively expand the
words in strings x and y. More formally, given
H, we simultaneously deﬁne La for all a ∈ VT
to be minimal such that if x, y ∈ L(Ha ),
x′ ∈ Lx , y ′ ∈ Ly , then x′ ay ′ ∈ La , where
La1 ···ak stands for the concatenation language
La1 · · · Lak . Then H generates language L$ .
We next present a simple construction that
transforms a HAG H into a bilexical CFG G
generating the same language. The construction also preserves derivation ambiguity. This
means that for each string w, there is a lineartime 1-to-1 mapping between (appropriately de-

In this section we show that a length-n string
generated by a head automaton grammar (Alshawi, 1996) can be parsed in time O(n4 ). We
do this by providing a translation from head
automaton grammars to bilexical CFGs.4 This
result improves on the head-automaton parsing
algorithm given by Alshawi, which is analogous
to the CKY algorithm on bilexical CFGs and is
likewise O(n5 ) in practice (see §3).
A head automaton grammar (HAG) is a
function H : a → Ha that deﬁnes a head automaton (HA) for each element of its (ﬁnite)
domain. Let VT = domain(H) and D = {→, ←
}. A special symbol $ ∈ VT plays the role of
start symbol. For each a ∈ VT , Ha is a tuple
(Qa , VT , δa , Ia , Fa ), where

5
Alshawi (1996) describes HAs as accepting (or equivalently, generating) zl and zr from the outside in. To
make Figure 3 easier to follow, we have deﬁned HAs as
accepting symbols in the opposite order, from the inside out. This amounts to the same thing if transitions
are reversed, Ia is exchanged with Fa , and any transition probabilities are replaced by those of the reversed
Markov chain.

• Qa is a ﬁnite set of states;
4

Translation in the other direction is possible if the
HAG formalism is extended to allow multiple senses per
word (see §6). This makes the formalisms equivalent.

5

8

ﬁned) canonical derivations of w by H and
canonical derivations of w by G.
We adopt the notation above for H and the
components of its head automata. Let VD be
an arbitrary set of size t = max{|Qa | : a ∈ VT },
and for each a, deﬁne an arbitrary injection fa :
Qa → VD . We deﬁne G = (VN , VT , P, T [$]),
where

Split head automaton grammars
in time O(n3 )

For many bilexical CFGs or HAGs of practical
signiﬁcance, just as for the bilexical version of
link grammars (Laﬀerty et al., 1992), it is possible to parse length-n inputs even faster, in time
O(n3 ) (Eisner, 1997). In this section we describe and discuss this special case, and give a
new O(n3 ) algorithm that has a smaller grammar constant than previously reported.
A head automaton Ha is called split if it has
no states that can be entered on a ← transition and exited on a → transition. Such an automaton can accept x, y only by reading all of
y—immediately after which it is said to be in
a ﬂip state—and then reading all of x. Formally, a ﬂip state is one that allows entry on a
→ transition and that either allows exit on a ←
transition or is a ﬁnal state.
We are concerned here with head automaton grammars H such that every Ha is split.
These correspond to bilexical CFGs in which
any derivation A[a] ⇒∗ xay has the form
A[a] ⇒∗ xB[a] ⇒∗ xay. That is, a word’s left
dependents are more oblique than its right dependents and c-command them.
Such grammars are broadly applicable. Even
if Ha is not split, there usually exists a split head
′
automaton Ha recognizing the same language.
′ exists iﬀ {x#y : x, y ∈ L(H )} is regular
Ha
a
′
(where # ∈ VT ). In particular, Ha must exist
unless Ha has a cycle that includes both ← and
→ transitions. Such cycles would be necessary
for Ha itself to accept a formal language such
as { bn , cn : n ≥ 0}, where word a takes 2n dependents, but we know of no natural-language
motivation for ever using them in a HAG.
One more deﬁnition will help us bound the
complexity. A split head automaton Ha is said
to be g-split if its set of ﬂip states, denoted
¯
Qa ⊆ Qa , has size ≤ g. The languages that can
be recognized by g-split HAs are those that can
be written as g Li × Ri , where the Li and
i=1
Ri are regular languages over VT . Eisner (1997)
actually deﬁned (g-split) bilexical grammars in
terms of the latter property.6

(i) VN = {A[a] : A ∈ VD , a ∈ VT }, in the usual
manner for bilexical CFG;
(ii) P is the set of all productions having one
of the following forms, where a, b ∈ VT :
• A[a] → B[b] C[a] where
A = fa (r), B = fb (q ′ ), C = fa (q) for
some q ′ ∈ Ib , q ∈ Qa , r ∈ δa (q, b, ←)
• A[a] → C[a] B[b] where
A = fa (r), B = fb (q ′ ), C = fa (q) for
some q ′ ∈ Ib , q ∈ Qa , r ∈ δa (q, b, →)
• A[a] → a where
A = fa (q) for some q ∈ Fa
(iii) T = f$ (q), where we assume WLOG that
I$ is a singleton set {q}.
We omit the formal proof that G and H
admit isomorphic derivations and hence generate the same languages, observing only that
if x, y = b1 b2 · · · bj , bj+1 · · · bk ∈ L(Ha )—
a condition used in deﬁning La above—then
A[a] ⇒∗ B1 [b1 ] · · · Bj [bj ]aBj+1 [bj+1 ] · · · Bk [bk ],
for any A, B1 , . . . Bk that map to initial states
in Ha , Hb1 , . . . Hbk respectively.
In general, G has p = O(|VD |3 ) = O(t3 ). The
construction therefore implies that we can parse
a length-n sentence under H in time O(n4 t3 ). If
the HAs in H happen to be deterministic, then
in each binary production given by (ii) above,
symbol A is fully determined by a, b, and C. In
this case p = O(t2 ), so the parser will operate
in time O(n4 t2 ).
We note that this construction can be
straightforwardly extended to convert stochastic HAGs as in (Alshawi, 1996) into stochastic
CFGs. Probabilities that Ha assigns to state q’s
various transition and halt actions are copied
onto the corresponding productions A[a] → α
of G, where A = fa (q).

6

That paper associated a product language Li ×Ri , or
equivalently a 1-split HA, with each of g senses of a word
(see §6). One could do the same without penalty in our
present approach: conﬁning to 1-split automata would
remove the g 2 complexity factor, and then allowing g

6

We now present our result: Figure 3 speciﬁes
an O(n3 g 2 t2 ) recognition algorithm for a head
automaton grammar H in which every Ha is
g-split. For deterministic automata, the runtime is O(n3 g 2 t)—a considerable improvement
on the O(n3 g 3 t2 ) result of (Eisner, 1997), which
also assumes deterministic automata. As in §4,
a simple bottom-up implementation will suﬃce.
s
For a practical speedup, add ❅ as an an❅
h j
tecedent to the Mid rule (and ﬁll in the parse
table from right to left).
Like our previous algorithms, this one takes
two steps (Attach, Complete) to attach a
child constituent to a parent constituent. But
instead of full constituents—strings xdi y ∈
Ldi —it uses only half-constituents like xdi and

three models in (Collins, 1997) are susceptible
to the O(n3 ) method (cf. Collins’s O(n5 )).
Our dynamic programming techniques for
cheaply attaching head information to derivations can also be exploited in parsing formalisms
other than rewriting systems. The authors have
developed an O(n7 )-time parsing algorithm for
bilexicalized tree adjoining grammars (Schabes,
1992), improving the naive O(n8 ) method.
The results mentioned in §6 are related to the
closure property of CFGs under generalized sequential machine mapping (Hopcroft and Ullman, 1979). This property also holds for our
class of bilexical CFGs.

References
A. V. Aho and J. D. Ullman. 1972. The Theory
of Parsing, Translation and Compiling, volume 1.
Prentice-Hall, Englewood Cliﬀs, NJ.
H. Alshawi. 1996. Head automata and bilingual
tiling: Translation with minimal representations.
In Proc. of ACL, pages 167–176, Santa Cruz, CA.
Y. Bar-Hillel. 1953. A quasi-arithmetical notation
for syntactic description. Language, 29:47–58.
E. Charniak. 1997. Statistical parsing with a
context-free grammar and word statistics. In
Proc. of the 14th AAAI, Menlo Park.
C. Chelba and F. Jelinek. 1998. Exploiting syntactic structure for language modeling. In Proc. of
COLING-ACL.
N. Chomsky. 1965. Aspects of the Theory of Syntax.
MIT Press, Cambridge, MA.
M. Collins and J. Brooks. 1995. Prepositional
phrase attachment through a backed-oﬀ model.
In Proc. of the Third Workshop on Very Large
Corpora, Cambridge, MA.
M. Collins. 1997. Three generative, lexicalised models for statistical parsing. In Proc. of the 35th
ACL and 8th European ACL, Madrid, July.
J. Eisner. 1996. An empirical comparison of probability models for dependency grammar. Technical
Report IRCS-96-11, IRCS, Univ. of Pennsylvania.
J. Eisner. 1997. Bilexical grammars and a cubictime probabilistic parser. In Proceedings of the
4th Int. Workshop on Parsing Technologies, MIT,
Cambridge, MA, September.
R. C. Gonzales and M. G. Thomason. 1978. Syntactic Pattern Recognition. Addison-Wesley, Reading, MA.
M. A. Harrison. 1978. Introduction to Formal Language Theory. Addison-Wesley, Reading, MA.
J. E. Hopcroft and J. D. Ullman. 1979. Introduction to Automata Theory, Languages and Computation. Addison-Wesley, Reading, MA.

✑◗
 ❅
✑
◗ ,
di y. Where CKY combines   ❅
i h′ j j + 1 h k
we save two degrees of freedom i, k (so improv✑
ing O(n5 ) to O(n3 )) and combine ′ ❅
❅
✑ .
h jj +1 h
The other halves of these constituents can be attached later, because to ﬁnd an accepting path
for zl , zr in a split head automaton, one can
separately ﬁnd the half-path before the ﬂip state
(which accepts zr ) and the half-path after the
ﬂip state (which accepts zl ). These two halfpaths can subsequently be joined into an accepting path if they have the same ﬂip state s,
i.e., one path starts where the other ends. Annotating our left half-constituents with s makes
this check possible.

9

Final remarks

We have formally described, and given faster
parsing algorithms for, three practical grammatical rewriting systems that capture dependencies between pairs of words. All three systems admit naive O(n5 ) algorithms. We give
the ﬁrst O(n4 ) results for the natural formalism
of bilexical context-free grammar, and for Alshawi’s (1996) head automaton grammars. For
the usual case, split head automaton grammars
or equivalent bilexical CFGs, we replace the
O(n3 ) algorithm of (Eisner, 1997) by one with a
smaller grammar constant. Note that, e.g., all
senses would restore the g 2 factor. Indeed, this approach
gives added ﬂexibility: a word’s sense, unlike its choice
of ﬂip state, is visible to the HA that reads it.

7

q
(a) ❅
❅
h j
q
 
 s
i h
q
❍ ′
❍s
h h′
q
✟s
′✟
s
h′ h
(b)
Start:

x

(h ≤ j, q ∈ Qdh )

is derived iﬀ dh : I −→ q where wh+1,j ∈ Lx

¯
(i ≤ h, q ∈ Qdh ∪ {F }, s ∈ Qdh )

is derived iﬀ dh : q ←− s where wi,h−1 ∈ Lx

x

xd

y

′

¯
(h < h′ , q ∈ Qdh , s′ ∈ Qdh′ )

h
is derived iﬀ dh : I −→ q and dh′ : F ←− s′ where
wh+1,h′ −1 ∈ Lxy

¯
¯
(h′ < h, q ∈ Qdh , s ∈ Qdh , s′ ∈ Qdh )

h
is derived iﬀ dh′ : I −→ s′ and dh : q ←− s where
wh+1,h′ −1 ∈ Lxy

q
❅
❅
h h

q ∈ I dh

d

x

Mid:
s
 
 s
h h

¯
s ∈ Qd h

Finish:

Attach-Right: q
Complete-Right: q
F
s′
❍ s′ ❅
❍
′
◗
 
◗
 s
❅
h h′ h′ i
h i − 1 i h′
r ∈ δdh (q, dh′ , →)
q
r
❍ s′
❍
❅
❅
h i
h h′
q
q
Attach-Left: s′
Complete-Left:
F
✟
′
′✟
✑s
❅
 
❅
✑
 s s s
i h′ h′ h
h′ i i + 1 h ′
¯
s ∈ Qdh′ , r ∈ δdh (q, dh′ , ←)
q
r
✟
 s
s′ ✟ s
 
i h
h′ h
F
s
 
❅
(c) Accept input w just if   s and ❅ are derived for some h, s such that dh = $.
1 h
h n

′y

q
 
 s
i h
q ∈ Fd h
F
 
 s
i h

Figure 3: An O(n3 ) recognition algorithm for split head automaton grammars. The format is as
in Figure 1, except that (c) gives the acceptance condition. The following notation indicates that
x
a head automaton can consume a string x from its left or right input: a : q −→ q ′ means that
x
x
(q, ǫ, x) ⊢∗ (q ′ , ǫ, ǫ), and a : I −→ q ′ means this is true for some q ∈ Ia . Similarly, a : q ′ ←− q means
a
x
that (q, x, ǫ) ⊢∗ (q ′ , ǫ, ǫ), and a : F ←− q means this is true for some q ′ ∈ Fa . The special symbol
a
F also appears as a literal in some items, and eﬀectively means “an unspeciﬁed ﬁnal state.”
M. Kay. 1986. Algorithm schemata and data structures in syntactic processing. In K. Sparck Jones
B. J. Grosz and B. L. Webber, editors, Natural Language Processing, pages 35–70. Kaufmann,
Los Altos, CA.
J. Laﬀerty, D. Sleator, and D. Temperley. 1992.
Grammatical trigrams: A probabilistic model of
link grammar. In Proc. of the AAAI Conf. on
Probabilistic Approaches to Nat. Lang., October.
D. Magerman. 1995. Statistical decision-tree models for parsing. In Proceedings of the 33rd ACL.
I. Mel’ˇuk. 1988. Dependency Syntax: Theory and
c
Practice. State University of New York Press.
C. Pollard and I. Sag. 1994. Head-Driven Phrase

Structure Grammar. University of Chicago Press.
Y. Schabes, A. Abeill´, and A. Joshi. 1988. Parsing
e
strategies with ‘lexicalized’ grammars: Application to Tree Adjoining Grammars. In Proceedings
of COLING-88, Budapest, August.
Yves Schabes. 1992. Stochastic lexicalized treeadjoining grammars. In Proc. of the 14th COLING, pages 426–432, Nantes, France, August.
C. S. Wetherell. 1980. Probabilistic languages: A
review and some open questions. Computing Surveys, 12(4):361–379.
D. H. Younger. 1967. Recognition and parsing of
context-free languages in time n3 . Information
and Control, 10(2):189–208, February.

8

