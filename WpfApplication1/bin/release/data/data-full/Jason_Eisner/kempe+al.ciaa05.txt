A Class of Rational n-WFSM Auto-Intersections
Andr´ Kempe1 , Jean-Marc Champarnaud2 , Jason Eisner3 , Franck Guingne1,4 ,
e
and Florent Nicart1,4
1

Xerox Research Centre Europe – Grenoble Laboratory
6 chemin de Maupertuis – 38240 Meylan – France
Andre.Kempe@xrce.xerox.com – http://www.xrce.xerox.com
2

PSI Laboratory (Universit´ de Rouen, CNRS) 76821 Mont-Saint-Aignan – France
e
Jean-Marc.Champarnaud@univ-rouen.fr – http://www.univ-rouen.fr/psi/
3

Johns Hopkins University – Computer Science Department
3400 N. Charles St. – Baltimore, MD 21218 – United States
jason@cs.jhu.edu – http://www.cs.jhu.edu/∼jason/

4

LIFAR Laboratory (Universit´ de Rouen) 76821 Mont-Saint-Aignan – France
e
{Franck.Guingne,Florent.Nicart}@univ-rouen.fr
http://www.univ-rouen.fr/LIFAR/
Abstract. Weighted ﬁnite-state machines with n tapes describe n-ary
rational string relations. The join n-ary relation is very important in
applications. It is shown how to compute it via a more simple operation, the auto-intersection. Join and auto-intersection generally do not
preserve rationality. We deﬁne a class of triples A, i, j such that the
auto-intersection of the machine A on tapes i and j can be computed
by a delay-based algorithm. We point out how to extend this class and
hope that it is suﬃcient for many practical applications.

1

Introduction

Multi-tape ﬁnite-state machines (FSMs) [1–5] are a natural generalization of the
familiar ﬁnite-state acceptors (one tape) and transducers (two tapes). Multi-tape
machines have been used in the morphology of Semitic languages, to synchronize
the vowels, consonants, and templatic pattern into a surface form [3, 6].
The n-ary relation deﬁned by a (weighted) n-tape FSM is a (weighted) rational relation. Finite relations are deﬁned by acyclic FSMs, and are well-studied
since they can be viewed as relational databases whose ﬁelds are strings [7]. E.g.,
a two-column database can be represented by an acyclic ﬁnite-state transducer.
Unfortunately, one pays a price for generalizing to multi-column databases
with inﬁnitely many rows, as deﬁned by cyclic FSMs. Cyclic FSMs are closed
under the rational operations, but not under all relational operations, as ﬁnite
databases are. For example, transducers are not closed under intersection [1].
In this paper we consider a practically useful generalization of transducer
intersection, multi-tape join, which is analogous to natural join of databases.
More precisely, we study an equivalent but simpler problem, auto-intersection.
The emptiness or rationality of the result is generally undecidable [7]. Therefore

2

A. Kempe et al.

we deﬁne a simple class Θ of triples A, i, j such that the auto-intersection of
the machine A w.r.t. tapes i and j is rational. Our auto-intersection algorithm
for this class is based on the notion of delay [8, 9]. We focus on the case of an
auto-intersection w.r.t. two tapes, which is suﬃcient to explain the basic ideas
and problems, and we brieﬂy discuss the general case. We conclude by pointing
out possible extensions of the class Θ.
Weighted n-ary relations and their machines are introduced in Section 2. Join
and auto-intersection operations are presented in Section 3. A class of compilable
auto-intersections and the associated algorithm are deﬁned in Section 4.

2

Deﬁnitions

We recall some deﬁnitions about n-ary weighted relations and their machines,
following the usual deﬁnitions for multi-tape automata [2, 10], with semiring
weights added just as for acceptors and transducers [11, 12]. See [7] for details.
Weighted n-ary relations: A weighted n-ary relation is a function from
(Σ ∗ )n to K, for a given ﬁnite alphabet Σ and a given weight semiring K =
K, ⊕, ⊗, ¯ ¯ . A relation assigns a weight to any n-tuple of strings. A weight of
0, 1
¯ can be interpreted as meaning that the tuple is not in the relation.1 We are
0
especially interested in rational (or regular) n-ary relations, i.e. relations that
can be encoded by n-tape weighted ﬁnite-state machines, which we now deﬁne.
We adopt the convention that variable names referring to n-tuples of strings
→
include a superscript (n) . Thus we write s(n) rather than s for a tuple of strings
s1 , . . . sn . We also use this convention for the names of objects that contain
n-tuples of strings, such as n-tape machines and their transitions and paths.
Multi-tape weighted ﬁnite-state machines: An n-tape weighted ﬁnitestate machine (WFSM or n-WFSM) A(n) is deﬁned by a six-tuple A(n) =
Σ, Q, K, E (n) , λ, ̺ , with Σ being a ﬁnite alphabet, Q a ﬁnite set of states,
K = K, ⊕, ⊗, ¯ ¯ the semiring of weights, E (n) ⊆ (Q × (Σ ∗ )n × K × Q) a ﬁnite
0, 1
set of weighted n-tape transitions, λ : Q → K a function that assigns initial
weights to states, and ̺ : Q → K a function that assigns ﬁnal weights to states.
We say that q ∈ Q is an initial state if λ(q) = ¯ and a ﬁnal state if ̺(q) = ¯
0,
0.
Any transition e(n) ∈ E (n) has the form e(n) = p, ℓ(n) , w, n . We refer to
these four components as the transition’s source state p(e(n) ) ∈ Q, its label
ℓ(e(n) ) ∈ (Σ ∗ )n , its weight w(e(n) ) ∈ K, and its target state n(e(n) ) ∈ Q. We refer
by E(q) to the set of out-going transitions of a state q ∈ Q (with E(q) ⊆ E (n) ).
(n) (n)

(n)

A path γ (n) of length k ≥ 0 is a sequence of transitions e1 e2 · · · ek where
for all i ∈ [[1, k−1]]. The path’s label ℓ(γ (n) ) is the element-wise

(n)
(n)
n(ei ) = p(ei+1 )
1

It is convenient to deﬁne the support of an arbitrary weighted relation R(n) , as being
the set of tuples to which the relation gives non-¯ weight.
0

Computable n-WFSM Auto-Intersection

concatenation of the labels of its transitions. The path’s weight w(γ (n) ) is


def

(n)

w(γ (n) ) = λ(p(e1 )) ⊗ 

(n)

w ej

 ⊗ ̺(n(e(n) ))
k

j∈[[1,k]]

3

(1)

The path is said to be successful, and to accept its label, if w(γ (n) ) = ¯
0.
We denote by ΓA(n) the set of all successful paths of A(n) , and by ΓA(n) (s(n) )
the set of successful paths (if any) that accept the n-tuple of strings s(n) . Now,
the machine A(n) deﬁnes a weighted n-ary relation R(A(n) ) : (Σ ∗ )n → K that
assigns to each n-tuple, s(n) , the total weight of all paths accepting it:
def

RA(n) (s(n) ) =

w(γ (n) )
γ (n) ∈Γ

3

A(n)

(2)

(s(n) )

Operations

We now describe some central operations on n-ary weighted relations and their
n-WFSMs [13]. The auto-intersection operation is introduced, with the aim of
simplifying the computation of the join operation. Our notation is inspired by
relational databases. For mathematical details of simple operations see [7].
Simple Operations: The set of n-ary weighted rational relations can be constructed as the closure of the elementary n-ary weighted relations (those whose
support consists of at most one tuple) under the basic rational operations of
union, concatenation and Kleene closure. These rational operations can be implemented by simple constructions on the corresponding nondeterministic n-tape
WFSMs [14]. These n-tape constructions and their semiring-weighted versions
are exactly the same as for acceptors and transducers, since they are indiﬀerent
to the n-tuple transition labels.
The projection operator π j1 ,...jm , with j1 , . . . jm ∈ [[1, n]], maps an n-ary
relation to an m-ary one by retaining in each tuple components speciﬁed by the
indices j1 , . . . jm and placing them in the speciﬁed order. Indices may occur in
any order, possibly with repeats. Thus the tapes can be permuted or duplicated:
π 2,1 inverts a 2-ary relation. The complementary projection operator π {j1 ,...jm }
removes the tapes j1 , . . . jm and preserves the order of other tapes.
Join operation: Our join operator diﬀers from database join in that database
columns are named, whereas our tapes are numbered. Since tapes must explicitly
be selected by number, join is neither associative nor commutative.
For any distinct i1 , . . . ir ∈ [[1, n]] and any distinct j1 , . . . jr ∈ [[1, m]], we deﬁne
a join operator 1{i1 =j1 ,...ir =jr } . It combines an n-ary and an m-ary relation into
an (n + m − r)-ary relation deﬁned as follows:2
(n)

R1
2

(m)

1{i1 =j1 ,...ir =jr } R2

def

(n)

(m)

( u1 , . . . un , s1 , . . . sm−r ) = R1 (u(n) ) ⊗ R2 (v (m) )

(3)

For example the tuples abc, def, ǫ and def, ghi, ǫ, jkl combine in the join
1{2=1,3=3} and yield the tuple abc, def, ǫ, ghi, jkl , with a weight equal to the product of their weights.

4

A. Kempe et al.

v (m) being the unique tuple s. t. π {j1 ,...jr } (v (m) ) = s(m−r) and (∀k ∈ [[1, r]]) vjk = uik .
The intersection of two n-ary relations is the n-ary relation deﬁned by the join
operator 1{1=1,2=2,...n=n} . Examples of single-tape join (where r = 1) are the
join 1{1=1} (the intersection of two acceptors) and the join 1{2=1} that can be
(n)

(m)

used to express transducer composition. The cross product ×, as in R1 × R2 ,
can be expressed as 1∅ , the join of no tapes (r = 0). Our main concern in this
paper is multi-tape join (r > 1).
Some practical applications require the multi-tape join operation, for example: probabilistic normalization of n-WFSMs conditioned on r tapes,3 or searching for cognates [16]. Unfortunately, rational relations are not closed under arbitrary joins [7]. The join operation is so useful that it is helpful to have a partial
algorithm: hence our motivation for studying auto-intersection.
Auto-Intersection: For any distinct i1 , j1 , . . . ir , jr ∈ [[1, n]], we deﬁne an
auto-intersection operator σ{i1 =j1 ,i2 =j2 ,...ir =jr } . It maps a relation R(n) to a
subset of that relation, preserving tuples s(n) whose elements are equal in pairs
as speciﬁed, but removing other tuples from the support of the relation.4 The
formal deﬁnition is:
def

σ{i1 =j1 ,...ir =jr } (R(n) ) ( s1 , . . . sn ) =

R(n) ( s1 , . . . sn )

if (∀k ∈ [[1, r]])sik = sjk

¯
0

(4)

otherwise

It is easy to check that auto-intersecting a relation is diﬀerent from joining
the relation with its own projections. Actually, join and auto-intersection are
related by the following equalities:
(n)

R1

(m)

1{i1 =j1 ,...ir =jr } R2

= π {n+j1 ,...n+jr }

(n)

(m)

σ{i1 =n+j1 ,...ir =n+jr } ( R1 ×R2



σ{i1 =j1 ,...ir =jr } (R(n) ) = R(n) 1{i1 =1,j1 =2,...ir =2r−1,jr =2r} (π

1,1

(Σ ∗ )×· · ·×π
r times

1,1

(5)

)



(Σ ∗ )

(6)

Thus, for any class of diﬃcult join instances whose results are non-rational
or have undecidable properties [7], there is a corresponding class of diﬃcult
auto-intersection instances, and vice-versa. Conversely, a partial solution to one
problem would yield a partial solution to the other.
The case r = 1 is single-pair auto-intersection. An auto-intersection on multiple pairs of tapes (r > 1) can be deﬁned in terms of multiple single-pair autointersections:
def

σ{i1 =j1 ,...ir =jr } ( R(n) ) = σ{ir =jr } ( · · · σ{i1 =j1 } ( R(n) ) · · · )
3

4

(7)

This is a straightforward generalization of J. Eisner’s construction for probabilistic
normalization of transducers (n = 2) conditioned on one tape (r = 1) [15].
The requirement that the 2r indices be distinct mirrors the similar requirement on
join and is needed for (6) to hold. But it can be evaded by duplicating tapes: the
illegal operation σ{1=2,2=3} (R) can be computed as π {3} (σ{1=2,3=4} (π 1,2,2,3 (R))).

Computable n-WFSM Auto-Intersection

5

Nonetheless, it may be wise to compute σ{i1 =j1 ,...ir =jr } all at once rather than
one tape pair at a time. The reason is that even when σ{i1 =j1 ,...ir =jr } is rational,
a ﬁnite-state strategy for computing it via (7) could fail by encountering nonrational intermediate results. For example, consider applying σ{2=3,4=5} to the
rational 5-ary relation { ai bj , ci , cj , x, y | i, j ∈ N}. The ﬁnal result is rational
(the empty relation), but the intermediate result after applying just σ{2=3} would
be the non-rational relation { ai bi , ci , ci , x, y | i ∈ N}.

4

Single-pair auto-intersection

As indicated by (5), a join can be computed via an auto-intersection, which
can be decomposed as a sequence of single-pair auto-intersections as in (7). We
therefore focus on the single-pair case, which is suﬃcient to explain the basic
ideas and problems. As a consequence of Post’s Correspondence Problem, there
exists no fully general algorithm for auto-intersection [7]. We show that it is
however possible to compile the auto-intersection σ{i=j} (A) for a limited class
of triples A, i, j whose deﬁnition is based on the notion of delay.
By delay we mean the diﬀerence of length of two strings of an n-tuple:5
δ i,j (s(n) ) = |si |−|sj | (with i, j ∈ [[1, n]]). The delay of a path γ is determined
from its respective labels on tapes i and j: δ i,j (γ) = |ℓi (γ)|−|ℓj (γ)|.
(n)
(n)
¯
For any R1 , its autointersection R(n) = σ{i=j} (R1 ) assigns a weight 0
to each string tuple s(n) such that si = sj . For simplicity, our auto-intersection
construction will ensure this by never creating any successful paths γ for which
ℓi (γ) = ℓj (γ). One consequence is that all successful paths of our constructed
(n)
(n)
(n)
A(n) = σ{i=j} (A1 ), where A1 expresses R1 , will have a delay equal to 0 :
∀γ ∈ ΓA(n) , ℓi (γ) = ℓj (γ) ⇒ |ℓi (γ)| = |ℓj (γ)| ⇒ δ i,j (γ) = 0.
(n)
To be more speciﬁc, let Γ 0 ⊆ ΓA(n) be the set of successful paths of A1
1

with a delay of 0. Then our construction will “copy” an appropriate subset of Γ 0
r
into the constructed A(n) . Note that ∀γ = γ1 γ2 · · · γr ∈ Γ 0 ,
h=1 δ i,j (γh ) =
δ i,j (γ) = 0.
4.1

Bounded delay auto-intersection
(n)

We now focus temporarily on n-WFSMs such as A1 in Figure 1, whose cycles
all have a positive delay with respect to the tapes i, j of the single-pair autointersection.
Such an n-WFSM might contain paths with arbitrarily large delay. However, if we consider only its paths γ ∈ Γ 0 , it turns out that they must have
(n)
bounded delay. That is, that there is a bound δ max (A1 ) for the WFSM such
i,j
that |δ

(n)

i,j

(γ1 )| ≤ δ max (A1 ) for any preﬁx γ1 of any γ ∈ Γ 0 .
i,j
(n)

In this section, we outline how to compute the bound δ max (A1 ). Then, while
i,j
(n)

the algorithm of the next section (4.2) is copying paths from A1 , it can avoid
5

We use the notion of delay similarly as in the synchronization of transducers [8, 9].

6

A. Kempe et al.

c1

a1

c2

a2

Fig. 1. An example n-WFSM
with positive delay.

(n)
A1 ,

c3

a3

having four acyclic factors ah and three cycles ch

c2

c2
c3
c3 c3

δ

0

c1

a4

c1 c1 a2

a3

a4

γ

a1

Fig. 2. Hypothetical monitoring of the delay of successively longer preﬁxes γ1 of one
(n)
path γ through A1 whose total delay δ i,j (γ) = 0. Global extrema are marked. By
assumption, each of the cycles c1 , c2 , c3 has positive delay.

(n)

extending any preﬁx whose delay’s absolute value exceeds δ max (A1 ). (Such a
i,j
preﬁx is useless because it will not extend into a path in Γ 0 , let alone a path
with ℓi (γ) = ℓj (γ).)
If we plotted the delay for successively longer preﬁxes γ1 of a given path
γ ∈ Γ 0 , as γ1 ranges from ǫ to γ, we would obtain a curve that begins and ends
with delay δ i,j (γ1 ) = 0, as shown in Figure 2. How can we bound the maximum
ˆ
ˇ
δ i,j (γ1 ) and minimum δ i,j (γ1 ) along this curve?
(n)
ˇ
A lower bound is given by δ LR (A1 ) ≤ 0, deﬁned as the minimum delay of
i,j
(n)

any acyclic path that begins at an initial state of A1 . Why? Since γ ∈ Γ 0 is a
successful path, any preﬁx γ1 of γ can be regarded as an acyclic path of this sort
with zero or more cycles inserted. But these cycles can only increase the total
(n)
ˇ
delay (by the assumption that their delay is positive), so δ i,j (γ1 ) ≥ δ LR (A1 ).
i,j
(n)
ˆ
An upper bound is given by δ RL (A1 ) ≥ 0, deﬁned as the negation of
i,j
(n)

the minimum delay of any acyclic path that ends at a ﬁnal state of A1 . By
symmetry, that minimum delay is a lower bound on the delay of any suﬃx γ2 of
γ. But if we factor γ = γ1 γ2 , we have δ i,j (γ1 ) + δ i,j (γ2 ) = δ i,j (γ) = 0, since
(n)
ˆ
γ ∈ Γ 0 . It follows that δ RL (A1 ) is an upper bound on the delay of γ1 .
i,j
(n)
ˇ
The minimum δ LR (A1 ) is ﬁnite because there are only ﬁnitely many acyclic
i,j
(n)
ˆ
paths from initial states to consider. δ RL (A1 ) is similar. Exhaustively considi,j
ering all these acyclic paths by backtracking, as illustrated in Figure 3, takes

Computable n-WFSM Auto-Intersection

7

c2

c2

δ LR

δ RL
c3

c1

0

a2

a1

γ LR

a3

c1 a
2

a1

a3

c3
a4

a4
0

γ RL
(a)

(b)
(n)

Fig. 3. Monitoring the delay on all acyclic paths of A1 , exploring (a) forward from initial states and (b) backward from ﬁnal states. In (b), the sign of the delay is negated.
Global extrema are marked. Gaps denote points where the search algorithm backtracked to avoid completing a cycle. Dashed arrows lead from a choice point to alternative paths that are explored after backtracking.

exponential time in the worst case.6 However, that is presumably unavoidable
(n)
ˇ
since the decision problem associated with ﬁnding δ LR (A1 ) is NP-complete
i,j
(by a trivial reduction from Hamiltonian Path).
Visually, all acyclic preﬁx paths are represented in Figure 3a, so a given
acyclic preﬁx path must fall entirely above the minimum of Figure 3a. A possibly
cyclic preﬁx path as in Figure 2 can only be higher still, since all cycles have
positive delay. A visual argument can also be made from Figure 3b.
(n) ˆ
(n)
ˇ
These preﬁx-delay bounds, δ i,j (γ1 ) ∈ [[δ LR (A ), δ RL (A )]], in fact api,j

1

i,j

1

ply whenever γ1 is a preﬁx of a γ ∈ Γ 0 that traverses no cycle of negative delay.
If on the other hand γ traverses no cycle of positive delay, we have similarly
(n) ˆ
(n)
ˇ
δ i,j (γ1 ) ∈ [[δ RL (A1 ), δ LR (A1 )]], where these bounds are found by considi,j
i,j
ering maximum rather than minimum delays. In either case, we see that

|δ

(n)

i,j

(γ1 )| ≤ δ max (A1 )
i,j
def

= max

(8)

(n)
ˆ
|δ LR (A1 )| ,
i,j

(n)
ˆ
|δ RL (A1 )| ,
i,j

(n)
ˇ
|δ LR (A1 )| ,
i,j

(n)
ˇ
|δ RL (A1 )|
i,j

(9)

(n)

Deﬁnition of the class: Let Θ be the class of all the triples A1 , i, j such
(n)
that A1 does not contain a path traversing both a cycle with positive delay
and a cycle with negative delay (with respect to tapes i and j). The Algorithm
AutoIntersectSinglePair (see Section 4.2) computes the auto-intersection
(n)
A(n) = σ{i=j} (A1 ) for any triple in Θ, thanks to the property that it has a
(n)

delay not exceeding the limit δ max (A1 ) deﬁned in (9).
i,j
6

(n)

In practice, one would ﬁrst trim A1 to remove edges and states that do not appear
on any successful path. This may reduce the problem size, without aﬀecting the
deﬁned relation or its auto-intersection.

8

A. Kempe et al.

a:a /w 0

a:a /w 0
a:ε /w 1

3
ν=1
ξ=(ε,ε)

1

(b)
(2)

Fig. 4. (a) An n-WFSM A1
parts are not constructed).

4.2

1

ba:ab /w 3

4
ν=2
ξ=(ba,ab)

2

ν=0
ξ=(aa ,ε)

ν=1 5
ξ=(a ,ε)

ε:a /w 4
ν=2 7
ξ=(ε,ε)

ν=2
6
ξ=(ε, a)

a: ε /w 1
ε:ε /w 2
ba:ab /w 3

ε:a /w 4

ε:a /w 4
2 /ρ1

ν=0
ξ=(a ,ε)

ε:ε /w 2

ε:ε /w 2
ba:ab /w 3

(a)

a: ε /w 1

ν=0
0
ξ=(ε,ε)

0

a:a /w 0

/ρ1
(2)

and (b) its auto-intersection A(2) = σ{1=2} (A1 ) (dashed

Algorithm for bounded delay auto-intersection
(2)

(2)

We take ﬁrst the example of the n-WFSM A1 of Figure 4a. The triple A1 , 1, 2
(2)
is obviously in the class Θ. The delay of the auto-intersection A(2) = σ{1=2} (A1 )
(2)
(2)
is bounded by δ max (A1 ) = 1. The support ((a:a ∪ a:ε)∗ (ba:ab)∗ ε:a) of A1
1,2
is equal to { ai+j (ba)h , ai (ab)h a | i, j, h ∈ N }.
To construct the auto-intersection,7 we copy states and transitions one by
(2)
one from A1 (Figure 4a) to A(2) (Figure 4b), starting with the initial states.
We assign to each state q of A(2) two variables: ν[q] = q1 is the associated state of
(2)
A1 , and ξ[q] = (s, u) gives the “leftover strings” of the path read while reaching
q: s has been read on tape i but not yet on tape j, and vice-versa for u. (Thus
the delay accumulated so far is |s| − |u|. In practice either s or u will be ǫ.)
In our example, we start at the initial state q1 = 0, with ν[0] = 0 and
ξ[0] = (ε, ε). Then, we copy the three outgoing transitions of q1 = 0, with their
original labels and weights, as well as creating their respective target states with
appropriate ν and ξ. If a target state has already been created with this ν and
ξ, we reuse it. If not, we create it and proceed to copy its outgoing transitions.
The target state of a transition e has an ξ[n(e)] that is obtained from the
ξ[p(e)] of its source state, concatenated with the relevant components of its label
7

Our construction bears resemblance to known transducer synchronization procedures. The algorithm of Frougny and Sakarovitch [8] and Mohri’s algorithm [9] can,
however, not cope with n-FSMs having unbounded delay, such as the one in Figure 4a. Furthermore, they generate synchronized n-FSMs, which is not necessarily
what one is aiming for. The algorithm [8] is based on a K-covering of the transducer.
Our algorithm is based on a general reachability-driven construction, as [9], but the
labeling of the transitions is quite diﬀerent since our algorithm performs a copy of
the original labeling, and we also construct only such paths whose delay does not
exceed some limit that we are able to determine.

Computable n-WFSM Auto-Intersection

9

ℓ(e). The longest common preﬁx of s and u in ξ[n(e)] = (s, u) is then removed.
For example, for the cyclic transition e on q = 5 (a copy of that on q1 = 1), the
leftover strings of the target are ξ[n(e)] = ab, ab −1 ( a, ε ba, ab ) = a, ε . Also,
ν[n(e)] = 1. This implies that n(e) = p(e) because they have the same ξ and ν.
In Figure 4b, new state q = 2 and its incoming transition are not created
because here the delay of 2 (determined from ξ[q]) has an absolute value that
(2)
exceeds δ max (A1 ) = 1, which means that any path to new state q = 2 cannot be
1,2
in A(2) . State q = 4 and its incoming transitions are not created either, because
both leftover strings in ξ[4] are non-empty, which means that any path traversing
q = 4 has diﬀerent strings on tape 1 and 2 and can therefore not be in A(2) . State
q = 6 is non-ﬁnal, although q1 = 2 = ν[6] is ﬁnal, because ξ[6] is not (ε, ε),
which means that any path ending in q = 6 has diﬀerent strings on tape 1 and
2. As expected, the support ((a:a)∗ a:ε (a:a)∗ (ba:ab)∗ ε:a) of the constructed
auto-intersection A(2) is equal to { ai+j+1 (ba)h , ai+j+1 (ba)h | i, j, h ∈ N }.
Algorithm: The formal algorithm AutoIntersectSinglePair in Figure 5
(n)
ﬁnds the auto-intersection, provided only that δ max (A1 ) is indeed an upper
i,j
bound on the absolute value of the delay of any preﬁx γ1 of any successful path
(n)
γ in A1 such that ℓi (γ) = ℓj (γ).
(n)
We have seen how to ﬁnd such a bound when A1 , i, j is in the class Θ.
Such a bound may also exist in other cases. Even when such a bound is not
known or does not exist, one could impose one arbitrarily, in order to obtain an
approximate auto-intersection.
The loop at line 5 must terminate, since a ﬁnite state set Q will be constructed
for A(n) and each state is pushed only once. Q is ﬁnite because distinct states
q ∈ Q must have distinct values for ν[q] and/or ξ[q]. The number of values of
ν[q] = q1 is limited by |Q1 | (the number of states of A1 ), and the number of values
of ξ[q] = (s, u) both by |Σ1 | and δ max because either s or u is empty and the
i,j
δ max

other string is not longer than δ max . As a result, |Q| < 2 |Q1 |
i,j

5

+1

|Σ1 | i,j
−1
.
|Σ1 |−1

Conclusion

We conclude with two enhancements of the auto-intersection construction. Both
attempt to remove cycles of A that prevent A, i, j from falling in Θ.
First, one can eliminate paths γ such that ℓi (γ) not only diﬀers from ℓj (γ),
but diﬀers from ℓj (γ ′ ) for all γ ′ such that A(γ ′ ) = ¯ or vice-versa. Given
0,
(1)
(1)
(n)
(n) 8
A , i, j , deﬁne Ai to be the projection π i (A ). Deﬁne Aj similarly,
8

(1)

More precisely, Ai should deﬁne a “neutrally weighted” version of the projected
language, in which non-¯ string weights have been changed to ¯ To obtain this,
0
1.
replace all ¯ and non-¯ weights in the weighted acceptor π i (A(n) ) with false and
0
0
true respectively to get an ordinary unweighted acceptor over the Boolean semiring;
determinize this by standard methods; and then replace all false and true weights
with ¯ and ¯ respectively.
0
1

10

A. Kempe et al.

(n)

AutoIntersectSinglePair(A1 , i, j, δ max ) → A(n) :
i,j
1
A(n) ← Σ← Σ1 , Q← , K← K1 , E (n) ← , λ, ρ
2
Stack ←
3
for ∀q1 ∈ {Q1 : λ(q1 ) = ¯ do
0}
4
getPushState(q1 , (ε, ε))
5
while Stack =
do
6
q ← pop(Stack)
7
q1 ← ν[q]
8
(s, u) ← ξ[q]
9
for ∀e1 ∈ E(q1 ) do
10
(s′ , u′ ) ← createLeftoverStrings( s · π i (ℓ(e1 )), u · π
(n)
11
if (s′ = ε ∨ u′ = ε) ∧ ( |(|s′ | − |u′ |)| ≤ δ max (A1 ) )
i,j
12
then q ′ ← getPushState( n(e1 ), (s′ , u′ ))
13
E ← E ∪ { q, ℓ(e1 ), w(e1 ), q ′ }
(n)
14 return A

j

(ℓ(e1 )))

createLeftoverStrings(s, u) → (s′ , u′ ) :
˙ ˙
15 x ← longestCommonPreﬁx(s, u)
˙ ˙
16 return (x−1 · s, x−1 · u)
˙
˙
getPushState(q1 , (s′ , u′ )) → q ′ :
17 if ∃q ∈ Q : ν[q] = q1 ∧ ξ[q] = (s′ , u′ )
18
then q ′ ← q
19
else q ′ ← createNewState( )
20
ν[q ′ ] ← q1
21
ξ[q ′ ] ← (s′ , u′ )
22
if s′ = ε ∧ u′ = ε
23
then λ(q ′ ) ← λ(q1 )
24
ρ(q ′ ) ← ρ(q1 )
25
else λ(q ′ ) ← ¯
0
26
ρ(q ′ ) ← ¯
0
27
Q ← Q ∪ {q ′ }
28
push(Stack, q ′ )
′
29 return q

Fig. 5. The main algorithm AutoIntersectSinglePair. It relies on a prior compu(n)
tation of δ max (A1 ).
i,j

Computable n-WFSM Auto-Intersection
(1)

11

(1)

and put A′(n) = (A(n) 1{i=1} Aj ) 1{j=1} Ai .9 Now σ{i=j} (A) can be found
as σ{i=j} (A′ ), which helps if A′ , i, j falls in Θ.
The second point is related to the generalization (7) for auto-intersection on
multiple pairs of tapes. Given a problem σ{i1=j1 ,...ir=jr } (A), we nondeterministically select a pair (ih , jh ) (if any) such that A, ih , jh ∈ Θ, and use our method
to compute A′ = σ{ih =jh } (A). We now attempt to continue in the same way by
auto-intersecting A′ on the remaining r − 1 tapes. Note that A′ may have fewer
cycles than A, so we may have A′ , ih′ , jh′ ∈ Θ even if A, ih′ , jh′ ∈ Θ.

Acknowledgments
We wish to thank Mark-Jan Nederhof for pointing out the relationship between auto-intersection and Post’s Correspondence Problem (personal communication), and the anonymous reviewers of our paper for their advice.

References
1. Rabin, M.O., Scott, D.: Finite automata and their decision problems. IBM Journal
of Research and Development 3 (1959) 114–125
2. Elgot, C.C., Mezei, J.E.: On relations deﬁned by generalized ﬁnite automata. IBM
Journal of Research and Development 9 (1965) 47–68
3. Kay, M.: Nonconcatenative ﬁnite-state morphology. In: Proc. 3rd Int. Conf. EACL,
Copenhagen, Denmark (1987) 2–10
4. Harju, T., Karhum¨ki, J.: The equivalence problem of multitape ﬁnite automata.
a
Theoretical Computer Science 78 (1991) 347–355
5. Kaplan, R.M., Kay, M.: Regular models of phonological rule systems. Computational Linguistics 20 (1994) 331–378
6. Kiraz, G.A.: Multitiered nonlinear morphology using multitape ﬁnite automata: a
case study on Syriac and Arabic. Computational Lingistics 26 (2000) 77–105
7. Kempe, A., Champarnaud, J.M., Eisner, J.: A note on join and auto-intersection
of n-ary rational relations. In Watson, B., Cleophas, L., eds.: Proc. Eindhoven
FASTAR Days. Number 04–40 in TU/e CS TR, Eindhoven, Netherlands (2004)
64–78
8. Frougny, C., Sakarovitch, J.: Synchronized rational relations of ﬁnite and inﬁnite
words. Theoretical Computer Science 108 (1993) 45–82
9. Mohri, M.: Edit-distance of weighted automata. In: Proc. 7th Int. Conf. CIAA
(2002). Volume 2608 of Lecture Notes in Computer Science., Tours, France,
Springer Verlag, Berlin, Germany (2003) 1–23
10. Eilenberg, S.: Automata, Languages, and Machines. Volume A. Academic Press,
San Diego (1974)
11. Kuich, W., Salomaa, A.: Semirings, Automata, Languages. Number 5 in EATCS
Monographs on Theoretical Computer Science. Springer Verlag, Berlin, Germany
(1986)
12. Mohri, M., Pereira, F.C.N., Riley, M.: A rational design for a weighted ﬁnite-state
transducer library. Lecture Notes in Computer Science 1436 (1998) 144–158
9

These single-tape joins are guaranteed to succeed (for commutative semirings): they
can be computed similarly to transducer composition.

12

A. Kempe et al.

13. Kempe, A., Guingne, F., Nicart, F.: Algorithms for weighted multi-tape automata.
Research report 2004/031, Xerox Research Centre Europe, Meylan, France (2004)
14. Rosenberg, A.L.: On n-tape ﬁnite state acceptors. In: IEEE Symposium on Foundations of Computer Science (FOCS). (1964) 76–81
15. Eisner, J.: Parameter estimation for probabilistic ﬁnite-state transducers. In: Proc.
of the 40th Annual Meeting of the Association for Computational Linguistics,
Philadelphia (2002)
16. Kempe, A.: NLP applications based on weighted multi-tape automata. In: Proc.
11th Conf. TALN, Fes, Morocco (2004) 253–258

