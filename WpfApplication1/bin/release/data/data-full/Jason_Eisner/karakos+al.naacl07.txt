Cross-Instance Tuning of Unsupervised Document Clustering Algorithms∗
Damianos Karakos, Jason Eisner
and Sanjeev Khudanpur
Center for Language and Speech Processing
Johns Hopkins University
Baltimore, MD 21218

Carey E. Priebe
Dept. of Applied Mathematics
and Statistics
Johns Hopkins University
Baltimore, MD 21218

{damianos,eisner,khudanpur}@jhu.edu

cep@jhu.edu

Abstract

1

In unsupervised learning, where no training takes place, one simply hopes that
the unsupervised learner will work well
on any unlabeled test collection. However, when the variability in the data is
large, such hope may be unrealistic; a
tuning of the unsupervised algorithm may
then be necessary in order to perform well
on new test collections. In this paper,
we show how to perform such a tuning
in the context of unsupervised document
clustering, by (i) introducing a degree of
freedom, α, into two leading informationtheoretic clustering algorithms, through
the use of generalized mutual information quantities; and (ii) selecting the value
of α based on clusterings of similar, but
supervised document collections (crossinstance tuning). One option is to perform
a tuning that directly minimizes the error
on the supervised data sets; another option
is to use “strapping” (Eisner and Karakos,
2005), which builds a classiﬁer that learns
to distinguish good from bad clusterings,
and then selects the α with the best predicted clustering on the test set. Experiments from the “20 Newsgroups” corpus
show that, although both techniques improve the performance of the baseline algorithms, “strapping” is clearly a better
choice for cross-instance tuning.
∗
This work was partially supported by the DARPA GALE
program (Contract No HR0011-06-2-0001) and by the JHU
WSE/APL Partnership¯ Fund.

Introduction

The problem of combining labeled and unlabeled
examples in a learning task (semi-supervised learning) has been studied in the literature under various
guises. A variety of algorithms (e.g., bootstrapping
(Yarowsky, 1995), co-training (Blum and Mitchell,
1998), alternating structure optimization (Ando and
Zhang, 2005), etc.) have been developed in order to
improve the performance of supervised algorithms,
by automatically extracting knowledge from lots of
unlabeled examples. Of special interest is the work
of Ando and Zhang (2005), where the goal is to build
many supervised auxiliary tasks from the unsupervised data, by creating artiﬁcial labels; this procedure helps learn a transformation of the input space
that captures the relatedness of the auxiliary problems to the task at hand. In essence, Ando and Zhang
(2005) transform the semi-supervised learning problem to a multi-task learning problem; in multi-task
learning, a (usually large) set of supervised tasks is
available for training, and the goal is to build models which can simultaneously do well on all of them
(Caruana, 1997; Ben-David and Schuller, 2003; Evgeniou and Pontil, 2004).
Little work, however, has been devoted to study
the situation where lots of labeled examples, of one
kind, are used to build a model which is tested on
unlabeled data of a “different” kind. This problem,
which is the topic of this paper, cannot be cast as a
multi-task learning problem (since there are labeled
examples of only one kind), neither can be cast as a
semi-supervised problem (since there are no training
labels for the test task). Note that we are interested
in the case where the hidden test labels may have
no semantic relationship with the training labels; in

252
Proceedings of NAACL HLT 2007, pages 252–259,
Rochester, NY, April 2007. c 2007 Association for Computational Linguistics

some cases, there may not even be any information about the test labels—what they represent, how
many they are, or at what granularity they describe
the data. This situation can arise in the case of unsupervised clustering of documents from a large and
diverse corpus: it may not be known in what way the
resulting clusters split the corpus (is it in terms of
topic? genre? style? authorship? a combination of
the above?), unless one inspects each resulting cluster to determine its “meaning.”
At this point, we would like to differentiate between two concepts: a target task refers to a class
of problems that have a common, high-level description (e.g., the text document clustering task, the
speech recognition task, etc.). On the other hand,
a task instance refers to a particular example from
the class. For instance, if the task is “document
clustering,” a task instance could be “clustering of
a set of scientiﬁc documents into particular ﬁelds”;
or, if the task is “parsing,” a task instance could be
“parsing of English sentences from the Wall Street
Journal corpus”. For the purposes of this paper, we
further assume that there are task instances which
are unrelated, in the sense that that there are no
common labels between them. For example, if the
task is “clustering from the 20 Newsgroups corpus,”
then “clustering of the computer-related documents
into PC-related and Mac-related” and “clustering
of the politics-related documents into Middle-Eastrelated and non-Middle-East-related” are two distinct, unrelated instances. In more mathematical
terms, if task instances T1 , T2 take sets of observations X 1 , X 2 as input, and try to predict labels from
sets S1 , S2 , respectively, then they are called unrelated if X1 ∩ X2 = ∅ and S1 ∩ S2 = ∅.
The focus of this paper is to study the problem
of cross-instance tuning of unsupervised algorithms:
how one can tune an algorithm, which is used to
solve a particular task instance, using knowledge
from an unrelated task instance. To the best of our
knowledge, this cross-instance learning problem has
only been tackled in (Eisner and Karakos, 2005),
whose “strapping” procedure learns a meta-classiﬁer
for distinguishing good from bad clusterings.
In this paper, we introduce a scalar parameter α
(a new degree of freedom) into two basic unsupervised clustering algorithms. We can tune α to maximize unsupervised clustering performance on dif-

253

ferent task instances where the correct clustering is
known. The hope is that tuning the parameter learns
something about the task in general, which transfers from the supervised task instances to the unsupervised one. Alternatively, we can tune a metaclassiﬁer so as to select good values of α on the supervised task instances, and then use the same metaclassiﬁer to select a good (possibly different) value
of α in the unsupervised case.
The paper is organized as follows: Section 2 gives
a background on text categorization, and brieﬂy describes the algorithms that we use in our experiments. Section 3 describes our parameterization of
the clustering algorithms using Jensen-R´ nyi divere
gence and Csisz´ r’s mutual information. Experia
mental results from the “20 Newsgroups” data set
are shown in Section 4, along with two techniques
for cross-instance learning: (i) “strapping,” which, at
test time, picks a parameter based on various “goodness” cues that were learned from the labeled data
set, and (ii) learning the parameter from a supervised
data set which is chosen to statistically match the test
set. Finally, concluding remarks appear in Section 5.

2

Document Categorization

Document categorization is the task of deciding
whether a piece of text belongs to any of a set of
prespeciﬁed categories. It is a generic text processing task useful in indexing documents for later retrieval, as a stage in natural language processing
systems, for content analysis, and in many other
roles (Lewis and Hayes, 1994). Here, we deal
with the unsupervised version of document categorization, in which we are interested in clustering together documents which (hopefully) belong to
the same topic, without having any training examples.1 Supervised information-theoretic clustering
approaches (Torkkola, 2002; Dhillon et al., 2003)
have been shown to be very effective, even with a
small amount of labeled data, while unsupervised
methods (which are of particular interest to us) have
been shown to be competitive, matching the classiﬁcation accuracy of supervised methods.
Our focus in this paper is on document categorization algorithms which use information-theoretic
1
By this, we mean that training examples having the same
category labels as the test examples are not available.

criteria, since there are natural ways of generalizing
these criteria through the introduction of tunable parameters. We use two such algorithms in our experiments, the sequential Information Bottleneck (sIB)
and Iterative Denoising Trees (IDTs); details about
these algorithms appear below.
A note on mathematical notation: We assume
that we have a collection A = {X(1), . . . , X(N )}
of N documents. Each document X(i) is essentially
a “bag of words”, and induces an empirical distriˆ
bution PX(i) on the vocabulary X . Given a subset (cluster) C of documents, the conditional distribution on X , given the cluster, is just the cen1
ˆ
ˆ
troid: PX|C = |C| X(i)∈C PX(i) . If a subcollection S ⊂ A of documents is partitioned into clusters
C1 , . . . , Cm , and each document X(i) ∈ S is assigned to a cluster CZ(i) , where Z(i) ∈ {1, . . . , m}
is the cluster index, then the mutual information between words and corresponding clusters is given by

2.2

Iterative Denoising Trees

Decision trees are a powerful technique for equivalence classiﬁcation, accomplished through a recursive successive reﬁnement (Jelinek, 1997). In the
context of unsupervised classiﬁcation, the goal of
decision trees is to cluster empirical distributions
(bags of words) into a given number of classes, with
each class corresponding to a leaf in the tree. They
are built top-down (as opposed to the bottom-up
construction in IB) using maximization of mutual
information between words and clusters I(X; Z|t)
to drive the splitting of each node t; the hope is that
each leaf will contain data points which belong to
only one latent category.
Iterative Denoising Trees (also called Integrated
Sensing and Processing Decision Trees) were introduced in (Priebe et al., 2004a), as an extension of
regular decision trees. Their main feature is that
they transform the data at each node, before splitˆX|C PX|S ),
ˆ
ting, by projecting into a low-dimensional space.
I(X; Z|S) =
P (z|S)D(P z
This transformation corresponds to feature extracz∈{1,...,m}
tion; different features are suppressed (or ampliwhere P (z|S) |Cz |/|S| is the “prior” distribution ﬁed) by each transformation, depending on what
on the clusters and D(· ·) is the Kullback-Leibler data points fall into each node (corpus-dependentdivergence (Cover and Thomas, 1991).
feature-extraction property (Priebe et al., 2004b)).
Thus, dimensionality reduction and clustering are
2.1 The Information Bottleneck Method
chosen so that they jointly optimize the local objecThe Information Bottleneck (IB) method (Tishby et
tive.
al., 1999; Slonim and Tishby, 2000; Slonim et al.,
In (Karakos et al., 2005), IDTs were used for an
2002) is one popular approach to unsupervised catunsupervised hyperspectral image segmentation apegorization. The goal of the IB (with “hard” clusplication. The objective at each node t was to maxitering) is to ﬁnd clusters such that the mutual inmize the mutual information between spectral comformation I(X; Z) between words and clusters is as
ponents and clusters given the pixels at node t, comlarge as possible, under a constraint on the number
puted from the projected empirical distributions. At
of clusters. The procedure for ﬁnding the maximizeach step of the tree-growing procedure, the node
ing clustering in (Slonim and Tishby, 2000) is agwhich yielded the highest increase in the average,
glomerative clustering, while in (Slonim et al., 2002)
per-node mutual information, was selected for splitit is based on many random clusterings, combined
ting (until a desired number of leaves was reached).
with a sequential update algorithm, similar to KIn (Karakos et al., 2007b), the mutual information
means. The update algorithm re-assigns each data
objective was replaced with a parameterized form of
point (document) d to its most “similar” cluster C,
mutual information, namely the Jensen-R´ nyi divere
in order to minimize I(X; Z|C ∪ {d}), i.e.,
gence (Hero et al., 2001; Hamza and Krim, 2003), of
ˆ
ˆ
ˆ
ˆ
δD(PX|{d} PX|{d}∪C )+(1−δ)D(PX|C PX|{d}∪C ), which more details are provided in the next section.

1
where δ = |C|+1 . This latter procedure is called
the sequential Information Bottleneck (sIB) method,
and is considered the state-of-the-art in unsupervised document categorization.

254

3

Parameterizing Unsupervised Clustering

As mentioned above, the algorithms considered in
this paper (sIB and IDTs) are unsupervised, in the

sense that they can be applied to test data without any need for tuning. Our procedure of adapting them, based on some supervision on a different
task instance, is by introducing a parameter into the
unsupervised algorithm. At least for simple crossinstance tuning, this parameter represents the information which is passed between the supervised and
the unsupervised instances.
The parameterizations that we focused on have
to do with the information-theoretic objectives in
the two unsupervised algorithms. Speciﬁcally, following (Karakos et al., 2007b), we replace the mutual information quantities in IDTs as well as sIB
with the parameterized mutual information measures mentioned above. These two quantities provide estimates of the dependence between the random quantities in their arguments, just as the usual
mutual information does, but also have a scalar parameter α ∈ (0, 1] that controls the sensitivity of the
computed dependence on the details of the joint distribution of X and Z. As a result, the effect of data
sparseness on estimation of the joint distribution can
be mitigated when computing these measures.
3.1

Jensen-R´ nyi Divergence
e

The Jensen-R´ nyi divergence was used in (Hero et
e
al., 2001; Hamza and Krim, 2003) as a measure of
similarity for image classiﬁcation and retrieval. For
two discrete random variables X, Z with distributions PX , PZ and conditional PX|Z , it is deﬁned as
Iα (X; Z) = Hα (PX ) −

PZ (z)Hα (PX|Z (·|z)),
z

(1)
where Hα (·) is the R´ nyi entropy, given by
e
Hα (P ) =

1
log
1−α

P (x)α

, α = 1. (2)

where Iα (X; Z|W = w) is computed via (1) using
the conditional distribution of X and Z given W .
Except in trivial cases, Hα (·) is strictly larger
than H(·) when 0 < α < 1; this means that the effects of extreme sparsity (few words per document,
or too few occurrences of non-frequent words) on
the estimation of entropy and mutual information
can be dampened with an appropriate choice of α.
This happens because extreme sparsity in the data
yields empirical distributions which lie at, or close
to, the boundary of the probability simplex. The
entropy of such distributions is usually underestimated, compared to the smooth distributions which
generate the data. R´ nyi’s entropy is larger than
e
Shannon’s entropy, especially in those regions close
to the boundary, and can thus provide an estimate
which is closer to the true entropy.
3.2

Csisz´ r deﬁned the mutual information of order α as
a
C
Iα (X; Z) = min
Q

PZ (z)Dα (PX|Z (·|z) Q(·)),
z

(3)
where Dα (· ·) is the R´ nyi divergence (Csisz´ r,
e
a
C (X; Z) retains most
1995). It was shown that Iα
of the properties of I(X; Z)—it is a non-negative,
continuous, and concave function of PX , it is convex in PX|Z for α < 1, and converges to I(X; Z) as
α → 1.
C
Notably, Iα (X; Z) ≤ I(X; Z) for 0 < α < 1;
this means, as above, that α regulates the overestimation of mutual information that may result from
data sparseness.
There is no analytic form for the minimizer of the
right-hand-side of (3) (Csisz´ r, 1995), but it may be
a
computed via an alternating minimization algorithm
(Karakos et al., 2007a).

x∈X

4
If α ∈ (0, 1), Hα is a concave function, and hence
Iα (X; Z) is non-negative (and it is equal to zero if
and only if X and Z are independent). In the limit
as α → 1, Hα (·) approaches the Shannon entropy
(not an obvious fact), so Iα (·) reduces to the regular
mutual information. Similarly, we deﬁne
Iα (X; Z|W ) =

Csisz´ r’s Mutual Information
a

PW (w)Iα (X; Z|W = w),
w

255

Experimental Methods and Results

We demonstrate the feasibility of cross-instance tuning with experiments on unsupervised document categorization from the 20 Newsgroups corpus (Lang,
1995); this corpus consists of roughly 20,000 news
articles, evenly divided among 20 Usenet groups.
Random samples of 500 articles each were chosen
by (Slonim et al., 2002) to create multiple test collections: 250 each from 2 arbitrarily chosen Usenet

groups for the Binary test collection, 100 articles
each from 5 groups for the Multi5 test collection,
and 50 each from 10 groups for the Multi10 test collection. Three independent test collections of each
kind (Binary, Multi5 and Multi10) were created, for
a total of 9 collections. The sIB method was used to
separately cluster each collection, given the correct
number of clusters.
A comparison of sIB and IDTs on the same 9 test
collections was reported in (Karakos et al., 2007b;
Karakos et al., 2007a). Matlab code from (Slonim,
2003) was used for the sIB experiments, while the
parameterized mutual information measures of Section 3 were used for the IDTs. A comparison was
also made with the EM-based Gaussian mixtures
clustering tool mclust (Fraley and Raftery, 1999),
and with a simple K-means algorithm. Since the
two latter techniques gave uniformly worse clusterings than those of sIB and IDTs, we omit them from
the following discussion.
To show that our methods work beyond the 9 particular 500-document collections described above,
in this paper we instead use ﬁve different randomly
sampled test collections for each of the Binary,
Multi5 and Multi10 cases, making for a total of 15
new test collections in this paper. For diversity, we
ensure that none of the ﬁve test collections (in each
case) contain any documents used in the three collections of (Slonim et al., 2002) (for the same case).
We pre-process the documents of each test collection using the procedure2 mentioned in (Karakos
et al., 2007b). The 15 test collections are then
converted to feature matrices—term-document frequency matrices for sIB, and discounted tf/idf matrices (according to the Okapi formula (Gatford et
al., 1995)) for IDTs—with each row of a matrix representing one document in that test collection.
2

Excluding the subject line, the header of each abstract is
removed. Stop-words such as a, the, is, etc. are removed, and
stemming is performed (e.g., common sufﬁxes such as -ing, er, -ed, etc., are removed). Also, all numbers are collapsed
to one symbol, and non-alphanumeric sequences are converted
to whitespace. Moreover, as suggested in (Yang and Pedersen,
1997) as an effective method for reducing the dimensionality of
the feature space (number of distinct words), all words which
occur fewer than t times in the corpus are removed. For the
sIB experiments, we use t = 2 (as was done in (Slonim et al.,
2002)), while for the IDT experiments we use t = 3; these
choices result in the best performance for each method, respectively, on another dataset.

256

4.1

Selecting α with “Strapping”

In order to pick the value of the parameter α for
each of the sIB and IDT test experiments, we use
“strapping” (Eisner and Karakos, 2005), which, as
we mentioned earlier, is a technique for training a
meta-classiﬁer that chooses among possible clusterings. The training is based on unrelated instances of
the same clustering task. The ﬁnal choice of clustering is still unsupervised, since no labels (or ground
truth, in general) for the instance of interest are used.
Here, our collection of possible clusterings for
each test collection is generated by varying the α parameter. Strapping does not care, however, how the
collection was generated. (In the original strapping
paper, for example, Eisner and Karakos (2005) generated their collection by bootstrapping word-sense
classiﬁers from 200 different seeds.)
Here is how we choose a particular unsupervised
α-clustering to output for a given test collection:
• We cluster the test collection (e.g., the ﬁrst Multi5
collection) with various values of α, namely α =
0.1, 0.2, . . . , 1.0.
• We compute a feature vector from each of the
clusterings. Note that the features are computed
from only the clusterings and the data points,
since no labels are available.
• Based on the feature vectors, we predict the
“goodness” of each clustering, and return the
“best” one.
How do we predict the “goodness” of a clustering? By ﬁrst learning to distinguish good clusterings from bad ones, by using unrelated instances of
the task on which we know the true labels:
• We cluster some unrelated datasets with various
values of α, just as we will do in the test condition.
• We evaluate each of the resulting clusterings using the true labels on its dataset.3
• We train a “meta-classiﬁer” that predicts the true
rank (or accuracy) of each clustering based on the
feature vector of the clustering.
3
To evaluate a clustering, one only really needs the true labels on a sample of the dataset, although in our experiments we
did have true labels on the entire dataset.

Speciﬁcally, for each task (Binary, Multi5, and
Multi10) and each clustering method (sIB and IDT),
a meta-classiﬁer is learned thus:
• We obtain 10 clusterings (α = 0.1, 0.2, . . . , 1.0)
for each of 5 unrelated task instances (datasets
whose construction is described below).
• For each of these 50 clusterings, we compute the
following 14 features: (i) One minus the average cosine of the angle (in tf/idf space) between
each example and the centroid of the cluster to
which it belongs. (ii) The average R´ nyi divere
gence, computed for parameters 1.0, 0.5, 0.1, between the empirical distribution of each example
and the centroid of the cluster to which it belongs.
(iii) We create 10 more features, one per α. For
the α used in this clustering, the feature value is
r
equal to e−0.1¯, where r is the average rank of the
¯
clustering (i.e., the average of the 4 ranks resulting from sorting all 10 clusterings (per training
example) according to one of the 4 features in (i)
and (ii)). For all other α’s, the feature is set to
zero. Thus, only α’s which yield relatively good
rankings can have non-zero features in the model.
• We normalize each group of 10 feature vectors,
translating and scaling each of the 14 dimensions
to make it range from 0 to 1. (We will do the same
at test time.)
• We train ranking SVMs (Joachims, 2002), with
a Gaussian kernel, to learn how to rank these 50
clusterings given their respective normalized feature vectors. The values of c, γ (which control
regularization and the Gaussian kernel) were optimized through leave-one-out cross validation in
order to maximize the average accuracy of the
top-ranked clustering, over the 5 training sets.
Once a local maximum of the average accuracy
was obtained, further tuning of c, γ to maximize
the Spearman rank correlation between the predicted and true ranks was performed.
A model trained in this way knows something
about the task, and may work well for many new,
unseen instances of the task. However, we presume that it will work best on a given test instance
if trained on similar instances. The ideal would be
to match the test collection in every aspect: (i) the

257

number of training labels should be equal to the
number of desired clusters of the test collection; (ii)
the training clusters should be topically similar to
the desired test clusters.
In our scenario, we enjoy the luxury of plenty
of labeled data that can be used to create similar
instances. Thus, given a test collection A to be
clustered into L clusters, we create similar training sets by identifying the L training newsgroups
whose centroids in tf/idf space (using the Okapi formula mentioned earlier) have the smallest angle to
the centroid of A.4 (Of course, we exclude newsgroups that appear in A.) We then form a supervised
500-document training set A by randomly choosing
500/L documents from each of these L newsgroups;
we do this 5 times to obtain 5 supervised training
sets.
Table 1 shows averaged classiﬁcation errors resulting from strapping (“str” rows) for the JensenR´ nyi divergence and Csisz´ r’s mutual information,
e
a
used within IDTs and sIB, respectively. (We also
tried the reverse, using Jensen-R´ nyi in sIB and
e
Csisz´ r’s in IDTs, but the results were uniformly
a
worse in the former case and no better in the latter
case.) The “MI” rows show the classiﬁcation errors
of the untuned algorithms (α = 1), which, in almost
all cases, are worse than the tuned ones.
4.2

Tuning α on Statistically Similar Examples

We now show that strapping outperforms a simpler
and more obvious method for cross-instance tuning. To cluster a test collection A, we could simply
tune the clustering algorithm by choosing the α that
works best on a related task instance.
We again take care to construct a training instance
A that is closely related to the test instance A. In
fact, we take even greater care this time. Given A,
4

For each of the Binary collections, the closest training
newsgroups in our experiments were talk.politics.guns,
talk.religion.misc; for each of the Multi5 collections
the closest newsgroups were sci.electronics, rec.autos,
sci.med, talk.politics.misc, talk.religion.misc, and for
the Multi10 collections they were talk.politics.misc,
rec.motorcycles,
talk.religion.misc,
comp.graphics,
comp.sys.ibm.pc.hardware, rec.sport.baseball, comp.os.mswindows.misc,
comp.windows.x,
soc.religion.christian,
talk.politics.mideast.
Note that each of the Binary test
collections happens to be closest to the same two training
newsgroups; a similar behavior was observed for the Multi5
and Multi10 newsgroups.

sIB

IDTs

PP
Set
PP
Binary
PP
Method
PP
P

MI
Iα (str)
Iα (rls)
MI
C
Iα (str)
C
Iα (rls)

11.3%
10.4%
10.1%
12.0%
11.2%
11.1%

Multi5

Multi10

9.9%
9.2%
10.4%
6.8%
6.9%
7.4%

42.2%
39.0%
42.7%
38.5%
35.8%
37.4%

Table 1: Average classiﬁcation errors for IDTs and
sIB, using strapping (“str” rows) and regularized
least squares (“rls” rows) to pick α in Jensen-R´ nyi
e
divergence and Csisz´ r’s mutual information. Rows
a
“MI” show the errors resulting from the untuned algorithms, which use the regular mutual information
objective (α = 1). Results which are better than the
corresponding “MI” results are shown in bold.
we identify the same set of L closest newsgroups as
described above. This time, however, we carefully
select |A|/L documents from each newsgroup rather
than randomly choosing 500/L of them. Speciﬁcally, for each test example (document) X ∈ A, we
add a similar training example X into A , chosen as
follows:
We associate each test example X to the most
similar of the L training newsgroups, under a constraint that only |A|/L training examples may be associated to each newsgroup. To do this, we iterate
through all pairs (X, G) where X is a test example
and G is a training newsgroup, in increasing order
by the angle between X and G. If X is not yet associated and G is not yet “full,” then we associate X
with G, and choose X to be the document in G with
the smallest angle to X.
We cluster A 10 times, for α = 0.1, . . . , 1.0,
and we collect supervised error results E(α), α ∈
{0.1, . . . , 1.0}. Now, instead of using the single best
α∗ = argminα E(α) to cluster A (which may result in overﬁtting) we use regularized least-squares
(RLS) (Hastie et al., 2001), where we try to approximate the probability that an α is the best. The estimated probabilities are given by

α∗ and zero elsewhere), and K is the kernel matrix,
where K(i, j) = exp(−(E(αi ) − E(αj ))2 /σ 2 ) is
the value of the kernel which expresses the “similarity” between two clusterings of the same training dataset, in terms of their errors. The parameters σ, γ are set to 0.5, 0.1, respectively, after performing a (local) maximization of the Spearman correlation between training accuracies and predicted
ˆ
probabilities p, for all 15 training instances. Afˆ
ter performing a linear normalization of p to make
it a probability vector, the average predicted value
of α, i.e., α = 10 pi αi , (rounded-off to one of
ˆ
i=1 ˆ
{0.1, . . . , 1.0}) is used to cluster A.
Table 1 shows the average classiﬁcation error results using RLS (“rls” rows). We can see that, on
average over the 15 test instances, the error rate of
the tuned IDTs and sIB algorithms is lower than that
of the untuned algorithms, so cross-instance tuning
was effective. On the other hand, the errors are
generally higher than that of the strapping method,
which examines the results of using different α values on A.

5

Concluding Remarks

We have considered the problem of cross-instance
tuning of two unsupervised document clustering algorithms, through the introduction of a degree of
freedom into their mutual information objective.
This degree of freedom is tuned using labeled document collections (which are unrelated to the test
collections); we explored two approaches for performing the tuning: (i) through a judicious sampling
of training data, to match the marginal statistics of
the test data, and (ii) via “strapping”, which trains a
meta-classiﬁer to distinguish between good and bad
clusterings. Our unsupervised categorization experiments from the “20 Newsgroups” corpus indicate
that, although both approaches improve the baseline algorithms, “strapping” is clearly a better choice
for knowledge transfer between unrelated task instances.

References

ˆ
p = K(λI + K)−1 p,
where I is the unit matrix, p is the training probability of the best α (i.e., it is 1 at the position of

258

R. K. Ando and T. Zhang. 2005. A framework for
learning predictive structures from multiple tasks
and unlabeled data. Journal of Machine Learning
Research, 6:1817–1853, Nov.

S. Ben-David and R. Schuller. 2003. Exploiting task
relatedness for multiple task learning. In Proc. of
the Sixteenth Annual Conference on Learning Theory
(COLT-03).
A. Blum and T. Mitchell. 1998. Combining labeled
and unlabeled data with co-training. In Proceedings
of the Workshop on Computational Learning Theory
(COLT-98), pages 92–100.
R. Caruana. 1997. Multitask learning. Machine Learning, 28(1):41–75.
T. Cover and J. Thomas. 1991. Elements of Information
Theory. John Wiley and Sons.
I. Csisz´ r. 1995. Generalized cutoff rates and R´ nyi’s
a
e
information measures. IEEE Trans. on Information
Theory, 41(1):26–34, January.
I. Dhillon, S. Mallela, and R. Kumar. 2003. A divisive
information-theoretic feature clustering algorithm
for text classiﬁcation. Journal of Machine Learning
Research (JMLR), Special Issue on Variable and
Feature Selection, pages 1265–1287, March.
J. Eisner and D. Karakos. 2005. Bootstrapping without
the boot. In Proc. 2005 Conference on Human
Language Technology / Empirical Methods in Natural
Language Processing (HLT/EMNLP 2005), October.
T. Evgeniou and M. Pontil. 2004. Regularized multi-task
learning. In Proc. Knowledge Discovery and Data
Mining.
C. Fraley and A. E. Raftery. 1999. Mclust: Software for
model-based cluster analysis. Journal on Classiﬁcation, 16:297–306.
M. Gatford, M. M. Hancock-Beaulieu, S. Jones,
S. Walker, and S. E. Robertson. 1995. Okapi at
TREC-3. In The Third Text Retrieval Conference
(TREC-3), pages 109–126.
A. Ben Hamza and H. Krim. 2003. Jensen-R´ nyi
e
divergence measure: Theoretical and computational
perspectives. In Proc. IEEE Int. Symp. on Information
Theory, Yokohama, Japan, June.
T. Hastie, R. Tibshirani, and J. Friedman. 2001. The
Elements of Statistical Learning. Springer-Verlag.
A. O. Hero, B. Ma, O. Michel, and J. Gorman. 2001.
Alpha-divergence for classiﬁcation, indexing and
retrieval. Technical Report CSPL-328, University of
Michigan Ann Arbor, Communications and Signal
Processing Laboratory, May.
F. Jelinek. 1997. Statistical Methods for Speech Recognition. MIT Press.
T. Joachims. 2002. Optimizing search engines using
clickthrough data. In ACM Conf. on Knowledge
Discovery and Data Mining (KDD).
D. Karakos, S. Khudanpur, J. Eisner, and C. E. Priebe.
2005. Unsupervised classiﬁcation via decision trees:
An information-theoretic perspective. In Proc. 2005
International Conference on Acoustics, Speech and
Signal Processing (ICASSP 2005), March.

259

D. Karakos, S. Khudanpur, J. Eisner, and C. E. Priebe.
2007a.
Information-theoretic aspects of iterative
denoising. Submitted to the Journal of Machine
Learning Research, February.
D. Karakos, S. Khudanpur, J. Eisner, and C. E. Priebe.
2007b. Iterative denoising using Jensen-R´ nyi divere
gences with an application to unsupervised document
categorization. In Proc. 2007 International Conference on Acoustics, Speech and Signal Processing
(ICASSP 2007), April.
K. Lang. 1995. Learning to ﬁlter netnews. In Proc. 13th
Int. Conf. on Machine Learning, pages 331–339.
David D. Lewis and Philip J. Hayes. 1994. Guest
editorial. ACM Transactions on Information Systems,
12(3):231, July.
C. E. Priebe, D. J. Marchette, and D. M. Healy.
2004a. Integrated sensing and processing decision
trees. IEEE Trans. on Pat. Anal. and Mach. Intel.,
26(6):699–708, June.
C. E. Priebe, D. J. Marchette, Y. Park, E. Wegman,
J. Solka, D. Socolinsky, D. Karakos, K. Church,
R. Guglielmi, R. Coifman, D. Lin, D. Healy, M. Jacobs, and A. Tsao. 2004b. Iterative denoising for
cross-corpus discovery. In Proc. 2004 International
Symposium on Computational Statistics (COMPSTAT
2004), August.
N. Slonim and N. Tishby. 2000. Document clustering
using word clusters via the information bottleneck
method. In Research and Development in Information
Retrieval, pages 208–215.
N. Slonim, N. Friedman, and N. Tishby. 2002. Unsupervised document classiﬁcation using sequential
information maximization. In Proc. SIGIR’02, 25th
ACM Int. Conf. on Research and Development of
Inform. Retrieval.
N. Slonim. 2003. IBA 1.0: Matlab code for information
bottleneck clustering algorithms. Available from
http://www.princeton.edu/∼nslonim/IB Release1.0/
IB Release1 0.tar.
N. Tishby, F. Pereira, and W. Bialek. 1999. The information bottleneck method. In 37th Allerton Conference
on Communication and Computation.
K. Torkkola. 2002. On feature extraction by mutual information maximization. In Proc. IEEE Int. Conf. on
Acoustics, Speech and Signal Proc. (ICASSP-2002),
May.
Y. Yang and J. Pedersen. 1997. A comparative study on
feature selection in text categorization. In Intl. Conf.
on Machine Learning (ICML-97), pages 412–420.
D. Yarowsky. 1995. Unsupervised word sense disambiguation rivaling supervised methods. In Proc. 33rd
Annual Meeting of the Association for Computational
Linguistics, pages 189–196, Cambridge, MA.

