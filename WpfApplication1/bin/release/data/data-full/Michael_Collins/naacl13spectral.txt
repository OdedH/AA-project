Experiments with Spectral Learning of Latent-Variable PCFGs
Shay B. Cohen1 , Karl Stratos1 , Michael Collins1 , Dean P. Foster2 , and Lyle Ungar3
1
Dept. of Computer Science, Columbia University
2
3
Dept. of Statistics/ Dept. of Computer and Information Science, University of Pennsylvania
{scohen,stratos,mcollins}@cs.columbia.edu, foster@wharton.upenn.edu, ungar@cis.upenn.edu

Abstract
Latent-variable PCFGs (L-PCFGs) are a
highly successful model for natural language
parsing. Recent work (Cohen et al., 2012)
has introduced a spectral algorithm for parameter estimation of L-PCFGs, which—unlike
the EM algorithm—is guaranteed to give consistent parameter estimates (it has PAC-style
guarantees of sample complexity). This paper
describes experiments using the spectral algorithm. We show that the algorithm provides
models with the same accuracy as EM, but is
an order of magnitude more efﬁcient. We describe a number of key steps used to obtain
this level of performance; these should be relevant to other work on the application of spectral learning algorithms. We view our results
as strong empirical evidence for the viability
of spectral methods as an alternative to EM.

1

Introduction

Latent-variable PCFGS (L-PCFGs) are a highly successful model for natural language parsing (Matsuzaki et al., 2005; Petrov et al., 2006). Recent
work (Cohen et al., 2012) has introduced a spectral
learning algorithm for L-PCFGs. A crucial property of the algorithm is that it is guaranteed to provide consistent parameter estimates—in fact it has
PAC-style guarantees of sample complexity.1 This
is in contrast to the EM algorithm, the usual method
for parameter estimation in L-PCFGs, which has the
weaker guarantee of reaching a local maximum of
the likelihood function. The spectral algorithm is
relatively simple and efﬁcient, relying on a singular
value decomposition of the training examples, followed by a single pass over the data where parameter values are calculated.
Cohen et al. (2012) describe the algorithm, and
the theory behind it, but as yet no experimental results have been reported for the method. This paper
1

under assumptions on certain singular values in the model;
see section 2.3.1.

describes experiments on natural language parsing
using the spectral algorithm for parameter estimation. The algorithm provides models with slightly
higher accuracy than EM (88.05% F-measure on test
data for the spectral algorithm, vs 87.76% for EM),
but is an order of magnitude more efﬁcient (9h52m
for training, compared to 187h12m, a speed-up of
19 times).
We describe a number of key steps in obtaining this level of performance. A simple backed-off
smoothing method is used to estimate the large number of parameters in the model. The spectral algorithm requires functions mapping inside and outside
trees to feature vectors—we make use of features
corresponding to single level rules, and larger tree
fragments composed of two or three levels of rules.
We show that it is important to scale features by their
inverse variance, in a manner that is closely related
to methods used in canonical correlation analysis.
Negative values can cause issues in spectral algorithms, but we describe a solution to these problems.
In recent work there has been a series of results in
spectral learning algorithms for latent-variable models (Vempala and Wang, 2004; Hsu et al., 2009;
Bailly et al., 2010; Siddiqi et al., 2010; Parikh et
al., 2011; Balle et al., 2011; Arora et al., 2012;
Dhillon et al., 2012; Anandkumar et al., 2012). Most
of these results are theoretical (although see Luque
et al. (2012) for empirical results of spectral learning for dependency parsing). While the focus of
our experiments is on parsing, our ﬁndings should
be relevant to the application of spectral methods to
other latent-variable models. We view our results as
strong empirical evidence for the viability of spectral methods as an alternative to EM.

2

Background

In this section we ﬁrst give basic deﬁnitions for LPCFGs, and then describe the spectral learning algorithm of Cohen et al. (2012).

2.1

L-PCFGs: Basic Deﬁnitions

We follow the deﬁnition in Cohen et al. (2012)
of L-PCFGs.
An L-PCFG is an 8-tuple
(N , I, P, m, n, π, t, q) where:
• N is the set of non-terminal symbols in the
grammar. I ⊂ N is a ﬁnite set of in-terminals.
P ⊂ N is a ﬁnite set of pre-terminals. We assume that N = I∪P, and I∩P = ∅. Hence we
have partitioned the set of non-terminals into
two subsets.
• [m] is the set of possible hidden states.2
• [n] is the set of possible words.
• For all a ∈ I, b, c ∈ N , h1 , h2 , h3 ∈
[m], we have a context-free rule a(h1 ) →
b(h2 ) c(h3 ). The rule has an associated parameter t(a → b c, h2 , h3 |a, h1 ).
• For all a ∈ P, h ∈ [m], x ∈ [n], we have a
context-free rule a(h) → x. The rule has an
associated parameter q(a → x|a, h).
• For all a ∈ I, h ∈ [m], π(a, h) is a parameter
specifying the probability of a(h) being at the
root of a tree.
A skeletal tree (s-tree) is a sequence of rules
r1 . . . rN where each ri is either of the form a → b c
or a → x. The rule sequence forms a top-down, leftmost derivation under a CFG with skeletal rules.
A full tree consists of an s-tree r1 . . . rN , together
with values h1 . . . hN . Each hi is the value for
the hidden variable for the left-hand-side of rule ri .
Each hi can take any value in [m].
For a given skeletal tree r1 . . . rN , deﬁne ai to be
the non-terminal on the left-hand-side of rule ri . For
any i ∈ [N ] such that ri is of the form a → b c, de(2)
(3)
ﬁne hi and hi as the hidden state value of the left
and right child respectively. The model then deﬁnes
a probability mass function (PMF) as
p(r1 . . . rN , h1 . . . hN ) =
(2)

(3)

t(ri , hi , hi |ai , hi )

π(a1 , h1 )
i:ai ∈I

q(ri |ai , hi )
i:ai ∈P

The PMF over skeletal trees is p(r1 . . . rN ) =
h1 ...hN p(r1 . . . rN , h1 . . . hN ).
2

For any integer n, we use [n] to denote the set {1, 2, . . . n}.

The parsing problem is to take a sentence as input, and produce a skeletal tree as output. A standard method for parsing with L-PCFGs is as follows.
First, for a given input sentence x1 . . . xn , for any
triple (a, i, j) such that a ∈ N and 1 ≤ i ≤ j ≤ n,
the marginal µ(a, i, j) is deﬁned as
p(t)

µ(a, i, j) =

(1)

t:(a,i,j)∈t

where the sum is over all skeletal trees t for
x1 . . . xn that include non-terminal a spanning
words xi . . . xj . A variant of the inside-outside
algorithm can be used to calculate marginals.
Once marginals have been computed, Goodman’s algorithm (Goodman, 1996) is used to ﬁnd
arg maxt (a,i,j)∈t µ(a, i, j).3
2.2

The Spectral Learning Algorithm

We now give a sketch of the spectral learning algorithm. The training data for the algorithm is a set
of skeletal trees. The output from the algorithm is a
set of parameter estimates for t, q and π (more precisely, the estimates are estimates of linearly transformed parameters; see Cohen et al. (2012) and section 2.3.1 for more details).
The algorithm takes two inputs in addition to the
set of skeletal trees. The ﬁrst is an integer m, specifying the number of latent state values in the model.
Typically m is a relatively small number; in our experiments we test values such as m = 8, 16 or 32.
The second is a pair of functions φ and ψ, that respectively map inside and outside trees to feature
vectors in Rd and Rd , where d and d are integers.
Each non-terminal in a skeletal tree has an associated inside and outside tree. The inside tree for a
node contains the entire subtree below that node; the
outside tree contains everything in the tree excluding
the inside tree. We will refer to the node above the
inside tree that has been removed as the “foot” of the
outside tree. See ﬁgure 1 for an example.
Section 3.1 gives deﬁnitions of φ(t) and ψ(o)
used in our experiments. The deﬁnitions of φ(t) and
3

In fact, in our implementation we calculate marginals
µ(a → b c, i, k, j) for a, b, c ∈ N and 1 ≤ i ≤ k < j, and
µ(a, i, i) for a ∈ N , 1 ≤ i ≤ n, then apply the CKY algorithm
to ﬁnd the parse tree that maximizes the sum of the marginals.
For simplicity of presentation we will refer to marginals of the
form µ(a, i, j) in the remainder of this paper.

S

VP
V

NP

NP

VP

D

N

D

dog

the

Z(o) = (Σa )−1 (V a ) ψ(o)

N

the

saw

For each outside tree with a foot node labeled
a, deﬁne

cat

Figure 1: The inside tree (shown left) and outside tree (shown right) for the non-terminal VP
in the parse tree [S [NP [D the ] [N cat]]
[VP [V saw] [NP [D the] [N dog]]]]

ψ(o) are typically high-dimensional, sparse feature
vectors, similar to those in log-linear models. For
example φ might track the rule immediately below
the root of the inside tree, or larger tree fragments;
ψ might include similar features tracking rules or
larger rule fragments above the relevant node.
The spectral learning algorithm proceeds in two
steps. In step 1, we learn an m-dimensional representation of inside and outside trees, using the
functions φ and ψ in combination with a projection
step deﬁned through singular value decomposition
(SVD). In step 2, we derive parameter estimates directly from training examples.
2.2.1 Step 1: An SVD-Based Projection
For a given non-terminal a ∈ N , each instance of
a in the training data has an associated outside tree,
and an associated inside tree. We deﬁne Oa to be
the set of pairs of inside/outside trees seen with a in
the training data: each member of Oa is a pair (o, t)
where o is an outside tree, and t is an inside tree.
Step 1 of the algorithm is then as follows:
ˆ
1. For each a ∈ N calculate Ωa ∈ Rd×d as
ˆ
[Ωa ]i,j =

1
|Oa |

φi (t)ψj (o)
(o,t)∈Oa

ˆ
2. Perform an SVD on Ωa . Deﬁne U a ∈ Rd×m
a ∈ Rd ×m ) to be a matrix containing the
(V
m left (right) singular vectors corresponding
to the m largest singular values; deﬁne Σa ∈
Rm×m to be the diagonal matrix with the m
largest singular values on its diagonal.
3. For each inside tree in the corpus with root label a, deﬁne
Y (t) = (U a ) φ(t)

Note that Y (t) and Z(o) are both m-dimensional
vectors; thus we have used SVD to project inside
and outside trees to m-dimensional vectors.
2.3 Step 2: Parameter Estimation
We now describe how the functions Y (t) and Z(o)
are used in estimating parameters of the model.
First, consider the t(a → b c, h2 , h3 |a, h1 ) parameters. Each instance of a given rule a → b c in the
training corpus has an outside tree o associated with
the parent labeled a, and inside trees t2 and t3 associated with the children labeled b and c. For any
rule a → b c we deﬁne Qa→b c to be the set of triples
(o, t(2) , t(3) ) occurring with that rule in the corpus.
The parameter estimate is then
c(a → b c, j, k|a, i)
ˆ

count(a → b c)
a→b
× Ei,j,k c
count(a)
(2)

=

where
a→b
Ei,j,k c

=

(o,t(2) ,t(3) )
∈Qa→b c

Zi (o) × Yj (t(2) ) × Yk (t(3) )
|Qa→b c |

Here we use count(a → b c) and count(a) to refer
to the count of the rule a → b c and the non-terminal
a in the corpus. Note that once the SVD step has
been used to compute representations Y (t) and Z(o)
for each inside and outside tree in the corpus, calculating the parameter value c(a → b c, j, k|a, i) is a
ˆ
very simple operation.
Similarly, for any rule a → x, deﬁne Qa→x to
be the set of outside trees seen with that rule in the
training corpus. The parameter estimate is then
c(a → x|a, i)
ˆ

=

count(a → x)
a→x
× Ei
count(a)

(3)

a→x =
a→x |.
where Ei
o∈Qa→x Zi (o)/|Q
A similar method is used for estimating parameters c(a, i) that play the role of the π parameters (deˆ
tails omitted for brevity; see Cohen et al. (2012)).

2.3.1 Guarantees for the Algorithm
Once the c(a → b c, j, k|a, i), c(a → x|a, i) and
ˆ
ˆ
c(a, i) parameters have been estimated from the
ˆ

training corpus, they can be used in place of the t,
q and π parameters in the inside-outside algorithm
for computing marginals (see Eq. 1). Call the resulting marginals µ(a, i, j). The guarantees for the
ˆ
parameter estimation method are as follows:
• Deﬁne Ωa = E[φ(T )(ψ(O)) |A = a] where
A, O, T are random variables corresponding to
the non-terminal label at a node, the outside
tree, and the inside tree (see Cohen et al. (2012)
ˆ
for a precise deﬁnition). Note that Ωa , as dea . Then if Ωa
ﬁned above, is an estimate of Ω
has rank m, the marginals µ will converge to
ˆ
the true values µ as the number of training examples goes to inﬁnity, assuming that the training samples are i.i.d. samples from an L-PCFG.
• Deﬁne σ to be the m’th largest singular value
of Ωa . Then the number of samples required
for µ to be -close to µ with probability at least
ˆ
1 − δ is polynomial in 1/ , 1/δ, and 1/σ.
Under the ﬁrst assumption, (Cohen et al.,
2012) show that the c parameters converge to
ˆ
values that are linear transforms of the original parameters in the L-PCFG. For example,
deﬁne c(a → b c, j, k|a, i) to be the value that
c(a → b c, j, k|a, i) converges to in the limit of inﬁˆ
nite data. Then there exist invertible matrices Ga ∈
Rm×m for all a ∈ N such that for any a → b c, for
any h1 , h2 , h3 ∈ Rm ,
t(a → b c, h2 , h3 |a, h1 ) =
[Ga ]i,h1 [(Gb )−1 ]j,h2 [(Gc )−1 ]k,h3 c(a → b c, j, k|a, i)
i,j,k

The transforms deﬁned by the Ga matrices are benign, in that they cancel in the inside-outside algorithm when marginals µ(a, i, j) are calculated. Similar relationships hold for the π and q parameters.

3

Implementation of the Algorithm

Cohen et al. (2012) introduced the spectral learning
algorithm, but did not perform experiments, leaving
several choices open in how the algorithm is implemented in practice. This section describes a number
of key choices made in our implementation of the
algorithm. In brief, they are as follows:

The choice of functions φ and ψ. We will describe basic features used in φ and ψ (single-level
rules, larger tree fragments, etc.). We will also describe a method for scaling different features in φ
and ψ by their variance, which turns out to be important for empirical results.
a→b
a→x
Estimation of Ei,j,k c and Ei . There are a very
large number of parameters in the model, leading to challenges in estimation. The estimates in
Eqs. 2 and 3 are unsmoothed. We describe a simple
backed-off smoothing method that leads to signiﬁcant improvements in performance of the method.

Handling positive and negative values. As deﬁned, the c parameters may be positive or negative;
ˆ
as a result, the µ values may also be positive or negˆ
ative. We ﬁnd that negative values can be a significant problem if not handled correctly; but with a
very simple ﬁx to the algorithm, it performs well.
We now turn to these three issues in more detail.
Section 4 will describe experiments measuring the
impact of the different choices.
3.1

The Choice of Functions φ and ψ

Cohen et al. (2012) show that the choice of feature
deﬁnitions φ and ψ is crucial in two respects. First,
for all non-terminals a ∈ N , the matrix Ωa must
be of rank m: otherwise the parameter-estimation
algorithm will not be consistent. Second, the number of samples required for learning is polynomial
in 1/σ, where σ = mina∈N σm (Ωa ), and σm (Ωa )
is the m’th smallest singular value of Ωa . (Note that
the second condition is stronger than the ﬁrst; σ > 0
implies that Ωa is of rank m for all a.) The choice
of φ and ψ has a direct impact on the value for σ:
roughly speaking, the value for σ can be thought of
as a measure of how informative the functions φ and
ψ are about the hidden state values.
With this in mind, our goal is to deﬁne a relatively simple set of features, which nevertheless
provide signiﬁcant information about hidden-state
values, and hence provide high accuracy under the
model. The inside-tree feature function φ(t) makes
use of the following indicator features (throughout
these deﬁnitions assume that a → b c is at the root
of the inside tree t):
• The pair of nonterminals (a, b). E.g., for the inside tree in ﬁgure 1 this would be the pair (VP, V).

• The pair (a, c). E.g., (VP, NP).
• The rule a → b c. E.g., VP → V NP.
• The rule a → b c paired with the rule at the
root of t(i,2) . E.g., for the inside tree in ﬁgure 1 this would correspond to the tree fragment
(VP (V saw) NP).
• The rule a → b c paired with the rule at
the root of t(i,3) .
E.g., the tree fragment
(VP V (NP D N)).
• The head part-of-speech of t(i,1) paired with a.4
E.g., the pair (VP, V).
• The number of words dominated by t(i,1) paired
with a (this is an integer valued feature).
In the case of an inside tree consisting of a single
rule a → x the feature vector simply indicates the
identity of that rule.
To illustrate the function ψ, it will be useful to
make use of the following example outside tree:
S
NP

VP

D

N

the

cat

NP

V
D

saw

N
dog

Note that in this example the foot node of the outside tree is labeled D. The features are as follows:
• The rule above the foot node. We take care
to mark which non-terminal is the foot, using a
* symbol. In the above example this feature is
NP → D∗ N.
• The two-level and three-level rule fragments
above the foot node. In the above example these features would be
VP
V

S
NP

D∗

NP
N

VP
V

NP
D∗

N

• The label of the foot node, together with the
label of its parent. In the above example this is
(D, NP).
• The label of the foot node, together with the label of its parent and grandparent. In the above example this is (D, NP, VP).
• The part of speech of the ﬁrst head word along
the path from the foot of the outside tree to the root
of the tree which is different from the head node of
4

We use the English head rules from the Stanford parser
(Klein and Manning, 2003).

the foot node. In the above example this is N.
• The width of the span to the left of the foot node,
paired with the label of the foot node.
• The width of the span to the right of the foot
node, paired with the label of the foot node.
Scaling of features. The features deﬁned above
are almost all binary valued features. We scale the
features in the following way. For each feature φi (t),
deﬁne count(i) to be the number of times the feature
is equal to 1, and M to be the number of training
examples. The feature is then redeﬁned to be
φi (t) ×

M
count(i) + κ

where κ is a smoothing term (the method is relatively insensitive to the choice of κ; we set κ = 5 in
our experiments). A similar process is applied to the
ψ features. The method has the effect of decreasing
the importance of more frequent features in the SVD
step of the algorithm.
The SVD-based step of the algorithm is very
closely related to previous work on CCA (Hotelling,
1936; Hardoon et al., 2004; Kakade and Foster,
2009); and the scaling step is derived from previous work on CCA (Dhillon et al., 2011). In CCA
the φ and ψ vectors are “whitened” in a preprocessing step, before an SVD is applied. This whitening process involves calculating covariance matrices
Cx = E[φφ ] and Cy = E[ψψ ], and replacing φ
by (C x )−1/2 φ and ψ by (C y )−1/2 ψ. The exact calculation of (C x )−1/2 and (C y )−1/2 is challenging in
high dimensions, however, as these matrices will not
be sparse; the transformation described above can
be considered an approximation where off-diagonal
members of Cx and Cy are set to zero. We will see
that empirically this scaling gives much improved
accuracy.
3.2

a→b
a→x
Estimation of Ei,j,k c and Ei

a→b
The number of Ei,j,k c parameters is very large,
and the estimation method described in Eqs. 2–3 is
unsmoothed. We have found signiﬁcant improvements in performance using a relatively simple backoff smoothing method. The intuition behind this
method is as follows: given two random variables X
and Y , under the assumption that the random variables are independent, E[XY ] = E[X] × E[Y ]. It

makes sense to deﬁne “backed off” estimates which
make increasingly strong independence assumptions
of this form.
Smoothing of binary rules For any rule a → b c
and indices i, j ∈ [m] we can deﬁne a second-order
moment as follows:

a→b
Ei,j,· c =

(o,t(2) ,t(3) )
∈Qa→b c

Zi (o) × Yj (t(2) )

|Qa→b c |

a→b
a→b
The deﬁnitions of Ei,·,k c and E·,j,k c are analogous.
We can deﬁne a ﬁrst-order estimate as follows:

a→b
E·,·,k c =

(o,t(2) ,t(3) )
∈Qa→b c

Yk (t(3) )

|Qa→b c |

a→b
Again, we have analogous deﬁnitions of Ei,·,· c and
a→b c . Different levels of smoothed estimate can
E·,j,·
be derived from these different terms. The ﬁrst is
2,a→b
Ei,j,k c =
a→b
a→b
a→b
a→b
a→b
a→b
Ei,j,· c × E·,·,k c + Ei,·,k c × E·,j,· c + E·,j,k c × Ei,·,· c
3

Note that we give an equal weight of 1/3 to each of
the three backed-off estimates seen in the numerator.
A second smoothed estimate is
3,a→b
a→b
a→b
a→b
Ei,j,k c = Ei,·,· c × E·,j,· c × E·,·,k c

Using the deﬁnition of Oa given in section 2.2.1, we
also deﬁne
Fia =

(o,t)∈Oa
|Oa |

Yi (t)

Hia =

(o,t)∈Oa Zi (o)
|Oa |

4,a→b
and our next smoothed estimate as Ei,j,k c = Hia ×
c
Fjb × Fk .
Our ﬁnal estimate is
2,a→b
a→b
a→b
λEi,j,k c + (1 − λ) λEi,j,k c + (1 − λ)Ki,j,k c
3,a→b
4,a→b
a→b
where Ki,j,k c = λEi,j,k c + (1 − λ)Ei,j,k c .
Here λ ∈ [0, 1] is a smoothing parameter, set to
|Qa→b c |/(C + |Qa→b c |) in our experiments,
where C is a parameter that is chosen by optimization of accuracy on a held-out set of data.

Smoothing lexical rules We deﬁne a similar
a→x parameters. Deﬁne
method for the Ei
a
Ei =

x

o∈Qa→x Zi (o)
a→x |
x |Q

a
hence Ei ignores the identity of x in making its estimate. The smoothed estimate is then deﬁned as
a→x
a
νEi +(1−ν)Ei . Here, ν is a value in [0, 1] which
is tuned on a development set. We only smooth lexical rules which appear in the data less than a ﬁxed
number of times. Unlike binary rules, for which the
estimation depends on a high order moment (third
moment), the lexical rules use ﬁrst-order moments,
and therefore it is not required to smooth rules with
a relatively high count. The maximal count for this
kind of smoothing is set using a development set.

3.3

Handling Positive and Negative Values

As described before, the parameter estimates may
be positive or negative, and as a result the
marginals computed by the algorithm may in some
cases themselves be negative. In early experiments we found this to be a signﬁcant problem, with some parses having a very large number of negatives, and being extremely poor in quality. Our ﬁx is to deﬁne the output of the parser
to be arg maxt (a,i,j)∈t |µ(a, i, j)| rather than
arg maxt (a,i,j)∈t µ(a, i, j) as deﬁned in Goodman’s algorithm. Thus if a marginal value µ(a, i, j)
is negative, we simply replace it with its absolute
value. This step was derived after inspection of the
parsing charts for bad parses, where we saw evidence that in these cases the entire set of marginal
values had been negated (and hence decoding under
Eq. 1 actually leads to the lowest probability parse
being output under the model). We suspect that this
is because in some cases a dominant parameter has
had its sign ﬂipped due to sampling error; more theoretical and empirical work is required in fully understanding this issue.

4

Experiments

In this section we describe parsing experiments using the L-PCFG estimation method. We give comparisons to the EM algorithm, considering both
speed of training, and accuracy of the resulting
model; we also give experiments investigating the
various choices described in the previous section.

We use the Penn WSJ treebank (Marcus et al.,
1993) for our experiments. Sections 2–21 were
used as training data, and sections 0 and 22 were
used as development data. Section 23 is used as
the ﬁnal test set. We binarize the trees in training data using the same method as that described in
Petrov et al. (2006). For example, the non-binary
rule VP → V NP PP SBAR would be converted
to the structure [VP [@VP [@VP V NP] PP]
SBAR] where @VP is a new symbol in the grammar.
Unary rules are removed by collapsing non-terminal
chains: for example the unary rule S → VP would
be replaced by a single non-terminal S|VP.
For the EM algorithm we use the initialization
method described in Matsuzaki et al. (2005). For efﬁciency, we use a coarse-to-ﬁne algorithm for parsing with either the EM or spectral derived grammar: a PCFG without latent states is used to calculate marginals, and dynamic programming items are
removed if their marginal probability is lower than
some threshold (0.00005 in our experiments).
For simplicity the parser takes part-of-speech
tagged sentences as input. We use automatically
tagged data from Turbo Tagger (Martins et al.,
2010). The tagger is used to tag both the development data and the test data. The tagger was retrained on sections 2–21. We use the F1 measure
according to the Parseval metric (Black et al., 1991).
For the spectral algorithm, we tuned the smoothing
parameters using section 0 of the treebank.
4.1

Comparison to EM: Accuracy

We compare models trained using EM and the spectral algorithm using values for m in {8, 16, 24, 32}.5
For EM, we found that it was important to use development data to choose the number of iterations
of training. We train the models for 100 iterations,
then test accuracy of the model on section 22 (development data) at different iteration numbers. Table 1
shows that a peak level of accuracy is reached for all
values of m, other than m = 8, at iteration 20–30,
with sometimes substantial overtraining beyond that
point.
The performance of a regular PCFG model, estimated using maximum likelihood and with no latent
5

Lower values of m, such as 2 or 4, lead to substantially
lower performance for both models.

m=8
m = 16
m = 24
m = 32

section 22
EM
spectral
86.87
85.60
88.32
87.77
88.35
88.53
88.56
88.82

section 23
EM
spectral
—
—
—
—
—
—
87.76
88.05

Table 2: Results on the development data (section 22,
with machine-generated POS tags) and test data (section
23, with machine-generated POS tags).

states, is 68.62%.
Table 2 gives results for the EM-trained models
and spectral-trained models. The spectral models
give very similar accuracy to the EM-trained model
on the test set. Results on the development set with
varying m show that the EM-based models perform
better for m = 8, but that the spectral algorithm
quickly catches up as m increases.
4.2

Comparison to EM: Training Speed

Table 3 gives training times for the EM algorithm
and the spectral algorithm for m ∈ {8, 16, 24, 32}.
All timing experiments were done on a single Intel
Xeon 2.67GHz CPU. The implementations for the
EM algorithm and the spectral algorithm were written in Java. The spectral algorithm also made use
of Matlab for several matrix calculations such as the
SVD calculation.
For EM we show the time to train a single iteration, and also the time to train the optimal model
(time for 30 iterations of training for m = 8, 16, 24,
and time for 20 iterations for m = 32). Note that
this latter time is optimistic, as it assumes an oracle
specifying exactly when it is possible to terminate
EM training with no loss in performance. The spectral method is considerably faster than EM: for example, for m = 32 the time for training the spectral
model is just under 10 hours, compared to 187 hours
for EM, a factor of almost 19 times faster.6
The reason for these speed ups is as follows.
Step 1 of the spectral algorithm (feature calculation,
transfer + scaling, and SVD) is not required by EM,
but takes a relatively small amount of time (about
1.2 hours for all values of m). Once step 1 has been
completed, step 2 of the spectral algorithm takes a
6

In practice, in order to overcome the speed issue with EM
training, we parallelized the E-step on multiple cores. The spectral algorithm can be similarly parallelized, computing statistics
and parameters for each nonterminal separately.

m=8
m = 16
m = 24
m = 32

10
83.51
85.18
83.62
83.23

20
86.45
87.94
88.19
88.56

30
86.68
88.32
88.35
88.52

40
86.69
88.21
88.25
87.82

50
86.63
88.10
87.73
87.06

60
86.67
87.86
87.41
86.47

70
86.70
87.70
87.35
86.38

80
86.82
87.46
87.26
85.85

90
86.87
87.34
87.02
85.75

100
86.83
87.24
86.80
85.57

Table 1: Results on section 22 for the EM algorithm, varying the number of iterations used. Best results in each row
are in boldface.

m=8
m = 16
m = 24
m = 32

single
EM iter.
6m
52m
3h7m
9h21m

EM
best model
3h
26h6m
93h36m
187h12m

total
3h32m
5h19m
7h15m
9h52m

feature
22m

spectral algorithm
transfer + scaling SVD
36m
34m
49m
36m
35m

a→bc
1h34m
3h13m
4h54m
7h16m

a→x
10m
19m
28m
41m

Table 3: Running time for the EM algorithm and the various stages in the spectral algorithm. For EM we show the
time for a single iteration, and the time to train the optimal model (time for 30 iterations of training for m = 8, 16, 24,
time for 20 iterations of training for m = 32). For the spectral method we show the following: “total” is the total
training time; “feature” is the time to compute the φ and ψ vectors for all data points; “transfer + scaling” is time
to transfer the data from Java to Matlab, combined with the time for scaling of the features; “SVD” is the time for
the SVD computation; a → b c is the time to compute the c(a → b c, h2 , h3 |a, h1 ) parameters; a → x is the time to
ˆ
compute the c(a → x, h|a, h) parameters. Note that “feature” and “transfer + scaling” are the same step for all values
ˆ
of m, so we quote a single runtime for these steps.

single pass over the data: in contrast, EM requires
a few tens of passes (certainly more than 10 passes,
from the results in table 1). The computations performed by the spectral algorithm in its single pass
are relatively cheap. In contrast to EM, the insideoutside algorithm is not required; however various
operations such as calculating smoothing terms in
the spectral method add some overhead. The net result is that for m = 32 the time for training the spectral method takes a very similar amount of time to a
single pass of the EM algorithm.
4.3

Smoothing, Features, and Negatives

We now describe experiments demonstrating the impact of various components described in section 3.
The effect of smoothing (section 3.2) Without
smoothing, results on section 22 are 85.05% (m =
8, −1.82), 86.84% (m = 16, −1.48), 86.47%
(m = 24, −1.88), 86.47% (m = 32, −2.09) (in
each case we show the decrease in performance from
the results in table 2). Smoothing is clearly important.
Scaling of features (section 3.1) Without scaling
of features, the accuracy on section 22 with m = 32

is 84.40%, a very signiﬁcant drop from the 88.82%
accuracy achieved with scaling.
Handling negative values (section 3.3) Replacing marginal values µ(a, i, j) with their absolute
values is also important: without this step, accuracy on section 22 decreases to 80.61% (m = 32).
319 sentences out of 1700 examples have different
parses when this step is implemented, implying that
the problem with negative values described in section 3.3 occurs on around 18% of all sentences.
The effect of feature functions To test the effect
of features on accuracy, we experimented with a
simpler set of features than those described in section 3.1. This simple set just includes an indicator
for the rule below a nonterminal (for inside trees)
and the rule above a nonterminal (for outside trees).
Even this simpler set of features achieves relatively
high accuracy (m = 8: 86.44 , m = 16: 86.86,
m = 24: 87.24 , m = 32: 88.07 ).
This set of features is reminiscent of a PCFG
model where the nonterminals are augmented their
parents (vertical Markovization of order 2) and binarization is done while retaining sibling information
(horizontal Markovization of order 1). See Klein
and Manning (2003) for more information. The per-

formance of this Markovized PCFG model lags behind the spectral model: it is 82.59%. This is probably due to the complexity of the grammar which
causes oveﬁtting. Condensing the sibling and parent
information using latent states as done in the spectral
model leads to better generalization.
It is important to note that the results for both
EM and the spectral algorithm are comparable to
state of the art, but there are other results previously reported in the literature which are higher.
For example, Hiroyuki et al. (2012) report an accuracy of 92.4 F1 on section 23 of the Penn WSJ
treebank using a Bayesian tree substitution grammar; Charniak and Johnson (2005) report accuracy
of 91.4 using a discriminative reranking model; Carreras et al. (2008) report 91.1 F1 accuracy for a discriminative, perceptron-trained model; Petrov and
Klein (2007) report an accuracy of 90.1 F1 , using
L-PCFGs, but with a split-merge training procedure.
Collins (2003) reports an accuracy of 88.2 F1 , which
is comparable to the results in this paper.

5

Conclusion

The spectral learning algorithm gives the same level
of accuracy as EM in our experiments, but has signiﬁcantly faster training times. There are several areas for future work. There are a large number of parameters in the model, and we suspect that more sophisticated regularization methods than the smoothing method we have described may improve performance. Future work should also investigate other
choices for the functions φ and ψ. There are natural ways to extend the approach to semi-supervised
learning; for example the SVD step, where representations of outside and inside trees are learned,
could be applied to unlabeled data parsed by a ﬁrstpass parser. Finally, the methods we have described
should be applicable to spectral learning for other
latent variable models.

Acknowledgements
Columbia University gratefully acknowledges the
support of the Defense Advanced Research Projects
Agency (DARPA) Machine Reading Program under Air Force Research Laboratory (AFRL) prime
contract no. FA8750-09-C-0181. Any opinions,
ﬁndings, and conclusions or recommendations ex-

pressed in this material are those of the author(s)
and do not necessarily reﬂect the view of DARPA,
AFRL, or the US government. Shay Cohen was
supported by the National Science Foundation under Grant #1136996 to the Computing Research Association for the CIFellows Project. Dean Foster
was supported by National Science Foundation grant
1106743.

References
A. Anandkumar, R. Ge, D. Hsu, S. M. Kakade, and
M. Telgarsky. 2012. Tensor decompositions for learning latent-variable models. arXiv:1210.7559.
S. Arora, R. Se, and A. Moitra. 2012. Learning topic
models - going beyond SVD. In Proceedings of
FOCS.
R. Bailly, A. Habrar, and F. Denis. 2010. A spectral
approach for probabilistic grammatical inference on
trees. In Proceedings of ALT.
B. Balle, A. Quattoni, and X. Carreras. 2011. A spectral learning algorithm for ﬁnite state transducers. In
Proceedings of ECML.
E. Black, S. Abney, D. Flickenger, C. Gdaniec, R. Grishman, P Harrison, D. Hindle, R. Ingria, F. Jelinek,
J. Klavans, M. Liberman, M. Marcus, S. Roukos,
B. Santorini, and T. Strzalkowski. 1991. A procedure
for quantitatively comparing the syntactic coverage of
English grammars. In Proceedings of DARPA Workshop on Speech and Natural Language.
X. Carreras, M. Collins, and T. Koo. 2008. TAG, Dynamic Programming, and the Perceptron for Efﬁcient,
Feature-rich Parsing. In Proceedings of CoNLL, pages
9–16.
E. Charniak and M. Johnson. 2005. Coarse-to-ﬁne nbest parsing and maxent discriminative reranking. In
Proceedings of ACL.
S. B. Cohen, K. Stratos, M. Collins, D. F. Foster, and
L. Ungar. 2012. Spectral learning of latent-variable
PCFGs. In Proceedings of ACL.
M. Collins. 2003. Head-driven statistical models for natural language processing. Computational Linguistics,
29:589–637.
P. Dhillon, D. P. Foster, and L. H. Ungar. 2011. Multiview learning of word embeddings via CCA. In Proceedings of NIPS.
P. Dhillon, J. Rodu, M. Collins, D. P. Foster, and L. H.
Ungar. 2012. Spectral dependency parsing with latent
variables. In Proceedings of EMNLP.
J. Goodman. 1996. Parsing algorithms and metrics. In
Proceedings of ACL.

D. Hardoon, S. Szedmak, and J. Shawe-Taylor. 2004.
Canonical correlation analysis: An overview with application to learning methods. Neural Computation,
16(12):2639–2664.
S. Hiroyuki, M. Yusuke, F. Akinori, and N. Masaaki.
2012. Bayesian symbol-reﬁned tree substitution grammars for syntactic parsing. In Proceedings of ACL,
pages 440–448.
H. Hotelling. 1936. Relations between two sets of variants. Biometrika, 28:321–377.
D. Hsu, S. M. Kakade, and T. Zhang. 2009. A spectral algorithm for learning hidden Markov models. In
Proceedings of COLT.
S. M. Kakade and D. P. Foster. 2009. Multi-view regression via canonical correlation analysis. In COLT.
D. Klein and C. D. Manning. 2003. Accurate unlexicalized parsing. In Proc. of ACL, pages 423–430.
F. M. Luque, A. Quattoni, B. Balle, and X. Carreras.
2012. Spectral learning for non-deterministic dependency parsing. In Proceedings of EACL.
M. P. Marcus, B. Santorini, and M. A. Marcinkiewicz.
1993. Building a large annotated corpus of English: The Penn treebank. Computational Linguistics,
19:313–330.
A. F. T. Martins, N. A. Smith, E. P. Xing, M. T.
Figueiredo, and M. Q. Aguiar. 2010. TurboParsers:
Dependency parsing by approximate variational inference. In Proceedings of EMNLP.
T. Matsuzaki, Y. Miyao, and J. Tsujii. 2005. Probabilistic CFG with latent annotations. In Proceedings
of ACL.
A. Parikh, L. Song, and E. P. Xing. 2011. A spectral algorithm for latent tree graphical models. In Proceedings of The 28th International Conference on Machine
Learningy (ICML 2011).
S. Petrov and D. Klein. 2007. Improved inference for
unlexicalized parsing. In Proc. of HLT-NAACL.
S. Petrov, L. Barrett, R. Thibaux, and D. Klein. 2006.
Learning accurate, compact, and interpretable tree annotation. In Proceedings of COLING-ACL.
S. Siddiqi, B. Boots, and G. Gordon. 2010. Reducedrank hidden markov models. JMLR, 9:741–748.
S. Vempala and G. Wang. 2004. A spectral algorithm for
learning mixtures of distributions. Journal of Computer and System Sciences, 68(4):841–860.

