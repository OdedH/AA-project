A Dynamic Evaluation of the Precision
of Static Heap Abstractions
OOSPLA - Reno, NV

October 20, 2010

Percy Liang

Omer Tripp

Mayur Naik

Mooly Sagiv

UC Berkeley

Tel-Aviv Univ.

Intel Labs Berkeley

Tel-Aviv Univ.

Introduction
Broad goal: verify correctness properties of software

2

Introduction
Broad goal: verify correctness properties of software
Motivating domain: multi-threaded programs (race and deadlock detection)

2

Introduction
Broad goal: verify correctness properties of software
Motivating domain: multi-threaded programs (race and deadlock detection)
client query

program

Static Analysis

heap abstraction

2

Introduction
Broad goal: verify correctness properties of software
Motivating domain: multi-threaded programs (race and deadlock detection)
client query

program

Static Analysis

heap abstraction

no OR possible
(false positives ⇒ imprecision!)

2

Introduction
Broad goal: verify correctness properties of software
Motivating domain: multi-threaded programs (race and deadlock detection)
client query

program

Static Analysis

heap abstraction

no OR possible
(false positives ⇒ imprecision!)

Heap abstraction aﬀects precision and scalabilty

2

Introduction
Broad goal: verify correctness properties of software
Motivating domain: multi-threaded programs (race and deadlock detection)
client query

program

Static Analysis

heap abstraction

no OR possible
(false positives ⇒ imprecision!)

Heap abstraction aﬀects precision and scalabilty
Question: what heap abstractions should one use?
2

Example client: ThreadEscape
Query: Does a variable point to a thread-escaping object at a program point?

3

Example client: ThreadEscape
Query: Does a variable point to a thread-escaping object at a program point?
getnew() {
return new
}
x = getnew()
y = getnew()
y.f = new
z = new
spawn y
p: ... ? ...

3

Example client: ThreadEscape
Query: Does a variable point to a thread-escaping object at a program point?
getnew() {
return new
}
x = getnew()
y = getnew()
y.f = new
z = new
spawn y
p: ... ? ...

x

3

Example client: ThreadEscape
Query: Does a variable point to a thread-escaping object at a program point?
getnew() {
return new
}
x = getnew()
y = getnew()
y.f = new
z = new
spawn y
p: ... ? ...

x
y

3

Example client: ThreadEscape
Query: Does a variable point to a thread-escaping object at a program point?
getnew() {
return new
}
x = getnew()
y = getnew()
y.f = new
z = new
spawn y
p: ... ? ...

x
y

3

Example client: ThreadEscape
Query: Does a variable point to a thread-escaping object at a program point?
getnew() {
return new
}
x = getnew()
y = getnew()
y.f = new
z = new
spawn y
p: ... ? ...

x
y
z

3

Example client: ThreadEscape
Query: Does a variable point to a thread-escaping object at a program point?
getnew() {
return new
}
x = getnew()
y = getnew()
y.f = new
z = new
spawn y
p: ... ? ...

x
y
z

3

Example client: ThreadEscape
Query: Does a variable point to a thread-escaping object at a program point?
getnew() {
return new
}
x = getnew()
y = getnew()
y.f = new
z = new
spawn y
p: ... ? ...

concrete answer

x
y
z

x
no

y
yes

z
no

3

Example client: ThreadEscape
Query: Does a variable point to a thread-escaping object at a program point?
getnew() {
return new
}
x = getnew()
y = getnew()
y.f = new
z = new
spawn y
p: ... ? ...

concrete answer
abstract answer

x
y
z

x
no
yes

y
yes
yes

z
no
no

3

Heap abstractions
Heap abstraction: partitioning of concrete objects

4

Heap abstractions
Heap abstraction: partitioning of concrete objects
P1

P2

P3

4

Heap abstractions
Heap abstraction: partitioning of concrete objects
P1

P2

P3

Property holds of partition ⇔ ∃o ∈ partition such that property holds of o

4

Heap abstractions
Heap abstraction: partitioning of concrete objects
P1

P2

P3

Property holds of partition ⇔ ∃o ∈ partition such that property holds of o
Formally: heap abstraction is function α
concrete object o

abstract object α(o)

4

Heap abstractions
Heap abstraction: partitioning of concrete objects
P1

P2

P3

Property holds of partition ⇔ ∃o ∈ partition such that property holds of o
Formally: heap abstraction is function α
concrete object o

abstract object α(o)

Example:
α(o) = alloc-site(o)
4

Heap abstractions
Heap abstraction: partitioning of concrete objects
P1

P2

P3

Property holds of partition ⇔ ∃o ∈ partition such that property holds of o
Formally: heap abstraction is function α
concrete object o

abstract object α(o)

Example:
α(o) = alloc-site(o), other-information(o)
4

The heap abstraction landscape
Tradeoﬀ:
imprecise, fast
(e.g., 0-CFA)

precise, slow
(e.g., ∞-CFA)

5

The heap abstraction landscape
Tradeoﬀ:
imprecise, fast
(e.g., 0-CFA)

precise, slow
(e.g., ∞-CFA)

How much precision is necessary for the given client?

5

The heap abstraction landscape
Tradeoﬀ:
imprecise, fast
(e.g., 0-CFA)

precise, slow
(e.g., ∞-CFA)

How much precision is necessary for the given client?
But it’s expensive to implement precise abstractions...

5

The heap abstraction landscape
Tradeoﬀ:
imprecise, fast
(e.g., 0-CFA)

precise, slow
(e.g., ∞-CFA)

How much precision is necessary for the given client?
But it’s expensive to implement precise abstractions...
Many dimensions:
k-CFA: call stack information

5

The heap abstraction landscape
Tradeoﬀ:
imprecise, fast
(e.g., 0-CFA)

precise, slow
(e.g., ∞-CFA)

How much precision is necessary for the given client?
But it’s expensive to implement precise abstractions...
Many dimensions:
k-CFA: call stack information
Object recency
Heap connectivity
etc.

5

The heap abstraction landscape
Tradeoﬀ:
imprecise, fast
(e.g., 0-CFA)

precise, slow
(e.g., ∞-CFA)

How much precision is necessary for the given client?
But it’s expensive to implement precise abstractions...
Many dimensions:
k-CFA: call stack information
Object recency
Heap connectivity
etc.
Question: how can we explore all these abstractions cheaply?

5

Main idea
Goal: get an idea of the utility of these abstractions
without implementing expensive static analyses

6

Main idea
Goal: get an idea of the utility of these abstractions
without implementing expensive static analyses
Key idea: use dynamic information

6

Main idea
Goal: get an idea of the utility of these abstractions
without implementing expensive static analyses
Key idea: use dynamic information

Static: all traces (expensive)
6

Main idea
Goal: get an idea of the utility of these abstractions
without implementing expensive static analyses
Key idea: use dynamic information

Static: all traces (expensive)

Dynamic: one trace (cheap)
6

Methodology
1. Run program dynamically with instrumentation

Concrete trace:

ω1

ω2

ω3

ω4

ω5

7

Methodology
1. Run program dynamically with instrumentation
2. Compute heap abstraction on each state

Concrete trace:

ω1

ω2

ω3

ω4

ω5

Abstract trace:

α
ω1

α
ω2

α
ω3

α
ω4

α
ω5

7

Methodology
1. Run program dynamically with instrumentation
2. Compute heap abstraction on each state
3. Answer query under abstraction

Concrete trace:

ω1

ω2

ω3

ω4

ω5

Abstract trace:

α
ω1

α
ω2

α
ω3

α
ω4

α
ω5

Abstract query answer:

no

yes

no

yes

no

7

Methodology
1. Run program dynamically with instrumentation
2. Compute heap abstraction on each state
3. Answer query under abstraction
Query is true ⇔ true on any state in trace

Concrete trace:

ω1

ω2

ω3

ω4

ω5

Abstract trace:

α
ω1

α
ω2

α
ω3

α
ω4

α
ω5

Abstract query answer:

no

yes

no

yes

no

⇒ yes

7

What does this tell us?

8

What does this tell us?
Note: no approximation on primitive data, method summarization, etc.
(focus exclusively on the heap abstraction)

8

What does this tell us?
Note: no approximation on primitive data, method summarization, etc.
(focus exclusively on the heap abstraction)

⇒ performing the most precise analysis using a given heap abstraction α

8

What does this tell us?
Note: no approximation on primitive data, method summarization, etc.
(focus exclusively on the heap abstraction)

⇒ performing the most precise analysis using a given heap abstraction α

⇒ provides upper bound on precision of any static analysis using α

8

Outline
• Abstractions: augment allocation sites with more context
– call stack
– object recency
– heap connectivity

9

Outline
• Abstractions: augment allocation sites with more context
– call stack
– object recency
– heap connectivity
• Clients: motivated by concurrency
– ThreadEscape
– SharedAccess
– SharedLock
– NonStationaryField

9

Outline
• Abstractions: augment allocation sites with more context
– call stack
– object recency
– heap connectivity
• Clients: motivated by concurrency
– ThreadEscape
– SharedAccess
– SharedLock
– NonStationaryField
• Benchmarks: 9 programs from the standard Dacapo suite

9

Outline
• Abstractions: augment allocation sites with more context
– call stack
– object recency
– heap connectivity
• Clients: motivated by concurrency
– ThreadEscape
– SharedAccess
– SharedLock
– NonStationaryField
• Benchmarks: 9 programs from the standard Dacapo suite
• Results: investigate all combinations

9

Abstraction: call stack [Shivers, 1988]

Common pattern: factory constructor methods
h1:
p2:
p3:
p1:

getnew() {
return new
}
x = getnew()
y = getnew()
spawn y
... x ...

10

Abstraction: call stack [Shivers, 1988]

Common pattern: factory constructor methods
h1:
p2:
p3:
p1:

getnew() {
return new
}
x = getnew()
y = getnew()
spawn y
... x ...

h1

x

Alloc
y

Allocation sites are too weak

10

Abstraction: call stack [Shivers, 1988]
Abstraction Allock (k is call stack depth):
call-stack-during-allocation-of(o)[1..k]
Common pattern: factory constructor methods
h1:
p2:
p3:
p1:

getnew() {
return new
}
x = getnew()
y = getnew()
spawn y
... x ...

h1

x

Alloc
y

Allocation sites are too weak

10

Abstraction: call stack [Shivers, 1988]
Abstraction Allock (k is call stack depth):
call-stack-during-allocation-of(o)[1..k]
Common pattern: factory constructor methods
h1:
p2:
p3:
p1:

getnew() {
return new
}
x = getnew()
y = getnew()
spawn y
... x ...

h1

x

Alloc
y

h1,p2

x
h1,p3

Allock=1

y

Allocation sites are too weak
Adding one level of calling context is suﬃcient
10

Abstraction: object recency [Balakrishnan & Reps, 2006]

Common pattern: server programs construct data, release to new thread
while (*) {
x = new
p1:
... x ...
spawn x
}

11

Abstraction: object recency [Balakrishnan & Reps, 2006]

Common pattern: server programs construct data, release to new thread
while (*) {
x = new
p1:
... x ...
spawn x
}

x
h1

Allock=∞

No amount of calling context helps
11

Abstraction: object recency [Balakrishnan & Reps, 2006]
Abstraction Recencyr (r is recency depth); for r = 1:
k
recency-bit(o)

Common pattern: server programs construct data, release to new thread
while (*) {
x = new
p1:
... x ...
spawn x
}

x
h1

Allock=∞

No amount of calling context helps
11

Abstraction: object recency [Balakrishnan & Reps, 2006]
Abstraction Recencyr (r is recency depth); for r = 1:
k
recency-bit(o)
Objects allocated:
Allock :

o1
h2

o2
h4

o3
h4

o4
h2

o5
h4

Common pattern: server programs construct data, release to new thread
while (*) {
x = new
p1:
... x ...
spawn x
}

x
h1

Allock=∞

No amount of calling context helps
11

Abstraction: object recency [Balakrishnan & Reps, 2006]
Abstraction Recencyr (r is recency depth); for r = 1:
k
recency-bit(o)
Objects allocated:
Allock :
recency-bit:

o1
h2
0

o2
h4
0

o3
h4
0

o4
h2
1

o5
h4
1

Common pattern: server programs construct data, release to new thread
while (*) {
x = new
p1:
... x ...
spawn x
}

x
h1

Allock=∞

No amount of calling context helps
11

Abstraction: object recency [Balakrishnan & Reps, 2006]
Abstraction Recencyr (r is recency depth); for r = 1:
k
recency-bit(o)
Objects allocated:
Allock :
recency-bit:

o1
h2
0

o2
h4
0

o3
h4
0

o4
h2
1

o5
h4
1

Common pattern: server programs construct data, release to new thread
x

while (*) {
x = new
p1:
... x ...
spawn x
}

Allock=∞

h1

x
h1,1

h1,0

Recencyr=1

No amount of calling context helps
Recency makes the proper distinctions
11

Abstraction: heap connectivity [Sagiv et al., 2002]

Common pattern: build linked list data structures
h1: s = new
spawn s
h2: x = new
y = x
while (*) {
h3:
z = new
y.f = z
if (x.f == y)
s.f = z
y = z
}
x = x.f
p1: ... x ...

12

Abstraction: heap connectivity [Sagiv et al., 2002]

Common pattern: build linked list data structures
h1: s = new
spawn s
h2: x = new
y = x
while (*) {
h3:
z = new
y.f = z
if (x.f == y)
s.f = z
y = z
}
x = x.f
p1: ... x ...

h1,0

x
h2,0

s
h3,1

h3,0

Recencyr=∞

No amount of recency helps
12

Abstraction: heap connectivity [Sagiv et al., 2002]
ReachFromk : set of alloc. sites reaching Allock (o)

Common pattern: build linked list data structures
h1: s = new
spawn s
h2: x = new
y = x
while (*) {
h3:
z = new
y.f = z
if (x.f == y)
s.f = z
y = z
}
x = x.f
p1: ... x ...

h1,0

x
h2,0

s
h3,1

h3,0

Recencyr=∞

No amount of recency helps
12

Abstraction: heap connectivity [Sagiv et al., 2002]
ReachFromk : set of alloc. sites reaching Allock (o)
PointedToByk : set of alloc. sites reaching Allock (o) in 1 step
Common pattern: build linked list data structures
h1: s = new
spawn s
h2: x = new
y = x
while (*) {
h3:
z = new
y.f = z
if (x.f == y)
s.f = z
y = z
}
x = x.f
p1: ... x ...

h1,0

x
h2,0

s
h3,1

h3,0

Recencyr=∞

No amount of recency helps
12

Abstraction: heap connectivity [Sagiv et al., 2002]
ReachFromk : set of alloc. sites reaching Allock (o)
PointedToByk : set of alloc. sites reaching Allock (o) in 1 step
Common pattern: build linked list data structures
h1: s = new
spawn s
h2: x = new
y = x
while (*) {
h3:
z = new
y.f = z
if (x.f == y)
s.f = z
y = z
}
x = x.f
p1: ... x ...

h1,0

x
h2,0

s
h3,1

h3,0

Recencyr=∞

{h1}

x
{h2}

s

{h2,h3}

{h1,h2,h3}

ReachFromk=0

No amount of recency helps
Reachability makes proper distinctions
12

Clients
ThreadEscape: Does variable v
point to an object potentially reachable from another thread?

13

Clients
ThreadEscape: Does variable v
point to an object potentially reachable from another thread?
SharedAccess: Does variable v
point to an object actually accessed by multiple threads?

13

Clients
ThreadEscape: Does variable v
point to an object potentially reachable from another thread?
SharedAccess: Does variable v
point to an object actually accessed by multiple threads?
SharedLock: Does variable v
point to an object which is locked by multiple threads?

13

Clients
ThreadEscape: Does variable v
point to an object potentially reachable from another thread?
SharedAccess: Does variable v
point to an object actually accessed by multiple threads?
SharedLock: Does variable v
point to an object which is locked by multiple threads?
NonStationaryField: for a ﬁeld f , does there exist an object o such that
o.f is written to after o.f is read from?
(generalization of final in Java from [Unkel & Lam, 2008])

13

Clients
ThreadEscape: Does variable v
point to an object potentially reachable from another thread?
SharedAccess: Does variable v
point to an object actually accessed by multiple threads?
SharedLock: Does variable v
point to an object which is locked by multiple threads?
NonStationaryField: for a ﬁeld f , does there exist an object o such that
o.f is written to after o.f is read from?
(generalization of final in Java from [Unkel & Lam, 2008])
Motivated by race and deadlock detection.

13

Benchmarks
9 Java programs from the DaCapo benchmark suite (version 9.12):

A parser generator and translator generator
A simulation and analysis framework for
AVR microcontrollers
batik
A Scalable Vector Graphics (SVG) toolkit
fop
An output-independent print formatter
hsqldb
An SQL relational-database engine
luindex
A text indexing tool
lusearch A text search tool
pmd
A source-code analyzer
xalan
An XSLT processor for transforming XML

antlr
avrora

290–1357 classes, 1.7K–6.8K methods, 133K–512K bytecodes, 5–46 threads

14

Experiments
Precision:
number of queries q such that q is true (concrete)
0% ≤
≤ 100%
α is true (abstract)
number of queries q such that q

15

Experiments
Precision:
number of queries q such that q is true (concrete)
0% ≤
≤ 100%
α is true (abstract)
number of queries q such that q
Questions:
• What abstraction works best for a given client?
• What is the eﬀect of the k in k-CFA?
• What is the eﬀect of the recency depth r?
• How scalable are the high-precision abstractions?

15

General results: ThreadEscape
benchmark
antlr
avrora
batik
fop
hsqldb
luindex
lusearch
pmd
xalan
average

Alloc

Allock=5

Recency

ReachFrom

48.6
54.7
13.5
36.3
62.6
6.3
14.3
12.4
64.0
34.8

85.0
62.3
15.1
99.3
69.0
97.2
90.0
87.1
78.9
76.0

81.0
69.2
20.9
42.8
94.3
6.8
19.0
14.9
78.7
47.5

100.0
77.8
20.6
41.3
?
6.8
19.6
14.6
76.6
44.7

Main points:
• Alloc can be very imprecise
• Allock=5 works best most of the time
16

General results: NonStationaryField
benchmark
antlr
avrora
batik
fop
hsqldb
luindex
lusearch
pmd
xalan
average

Alloc

Allock=5

Recency

ReachFrom

59.1
33.2
35.8
42.0
45.4
78.0
38.2
37.8
44.0
45.9

60.1
33.6
36.1
44.9
49.5
84.2
38.2
39.9
44.5
47.9

91.0
93.6
99.5
90.9
94.6
94.8
64.9
96.4
90.4
90.7

78.3
77.2
65.3
68.2
?
94.8
56.5
69.4
74.2
73.0

Main points:
• Call stack useless, reachability helps a bit
• Recency oﬀers huge improvement: captures temporal properties
17

Eﬀect of call stack depth k

80

Precision

100

80

Precision

100

60
40

60
Alloc

40

Recency
PointedToBy

20

20

0

1

2

3

4

5

6

7

8

k
(a) (ThreadEscape, batik)

∞

ReachFrom

0

1

2

3

4

5

6

7

8

∞

k
(b) (ThreadEscape, lusearch)

Main points:
• Phase transition: sharp increase in precision beyond k ≈ 5
• Synergy of information: ReachFrom requires high k to be precise

18

Eﬀect of recency depth
ThreadEscape on batik:
k=0
k=∞

r=0
13.5
15.1

r=1
20.9
23.4

r=2
21.4
99.0

r=3
22.1
99.0

r=4
22.5
99.0

r=5
22.6
99.0

Main points:
• Increasing recency depth beyond 1 helps, but maxes out quickly
• Synergy of information: need both large k and large r for success

19

Tradeoﬀ between precision and size
2000.0

2000.0
Random

275.9

Alloc
Recency

38.1

size ratio

size ratio

275.9

PointedToBy
ReachFrom

5.3
0.7

38.1
5.3
0.7

20

40

60

80

precision
(a) (ThreadEscape, batik)

100

20

40

60

80

100

precision
(b) (NonStationaryField, batik)

Main points:
• Reachability is quite expensive, Recency is cheap
• Random is surprisingly eﬀective on NonStationaryField,
but Recency is better

20

Summary
• Goal: determine good heap abstractions to use in static analysis
• Dynamic analysis enables us to quickly explore many heap abstractions

21

Summary
• Goal: determine good heap abstractions to use in static analysis
• Dynamic analysis enables us to quickly explore many heap abstractions
• Heap abstraction has large impact on precision
– Best abstraction depends on how its properties ﬁt the client
– Non-trivial interactions between dimensions

21

Summary
• Goal: determine good heap abstractions to use in static analysis
• Dynamic analysis enables us to quickly explore many heap abstractions
• Heap abstraction has large impact on precision
– Best abstraction depends on how its properties ﬁt the client
– Non-trivial interactions between dimensions
• Hopefully will serve as a useful guide for developers of static analyses

21

Summary
• Goal: determine good heap abstractions to use in static analysis
• Dynamic analysis enables us to quickly explore many heap abstractions
• Heap abstraction has large impact on precision
– Best abstraction depends on how its properties ﬁt the client
– Non-trivial interactions between dimensions
• Hopefully will serve as a useful guide for developers of static analyses

Thank you!

21

