arXiv:1307.1493v2 [stat.ML] 1 Nov 2013

Dropout Training as Adaptive Regularization

Stefan Wager∗ , Sida Wang† , and Percy Liang†
Departments of Statistics∗ and Computer Science†
Stanford University, Stanford, CA-94305
swager@stanford.edu, {sidaw, pliang}@cs.stanford.edu

Abstract
Dropout and other feature noising schemes control overﬁtting by artiﬁcially corrupting the training data. For generalized linear models, dropout performs a form
of adaptive regularization. Using this viewpoint, we show that the dropout regularizer is ﬁrst-order equivalent to an L2 regularizer applied after scaling the features
by an estimate of the inverse diagonal Fisher information matrix. We also establish
a connection to AdaGrad, an online learning algorithm, and ﬁnd that a close relative of AdaGrad operates by repeatedly solving linear dropout-regularized problems. By casting dropout as regularization, we develop a natural semi-supervised
algorithm that uses unlabeled data to create a better adaptive regularizer. We apply this idea to document classiﬁcation tasks, and show that it consistently boosts
the performance of dropout training, improving on state-of-the-art results on the
IMDB reviews dataset.

1

Introduction

Dropout training was introduced by Hinton et al. [1] as a way to control overﬁtting by randomly
omitting subsets of features at each iteration of a training procedure.1 Although dropout has proved
to be a very successful technique, the reasons for its success are not yet well understood at a theoretical level.
Dropout training falls into the broader category of learning methods that artiﬁcially corrupt training data to stabilize predictions [2, 4, 5, 6, 7]. There is a well-known connection between artiﬁcial
feature corruption and regularization [8, 9, 10]. For example, Bishop [9] showed that the effect of
training with features that have been corrupted with additive Gaussian noise is equivalent to a form
of L2 -type regularization in the low noise limit. In this paper, we take a step towards understanding how dropout training works by analyzing it as a regularizer. We focus on generalized linear
models (GLMs), a class of models for which feature dropout reduces to a form of adaptive model
regularization.
Using this framework, we show that dropout training is ﬁrst-order equivalent to L2 -regularization afˆ
ˆ
ter transforming the input by diag(I)−1/2 , where I is an estimate of the Fisher information matrix.
This transformation effectively makes the level curves of the objective more spherical, and so balances out the regularization applied to different features. In the case of logistic regression, dropout
can be interpreted as a form of adaptive L2 -regularization that favors rare but useful features.
The problem of learning with rare but useful features is discussed in the context of online learning
by Duchi et al. [11], who show that their AdaGrad adaptive descent procedure achieves better regret
bounds than regular stochastic gradient descent (SGD) in this setting. Here, we show that AdaGrad
S.W. is supported by a B.C. and E.J. Eaves Stanford Graduate Fellowship.
Hinton et al. introduced dropout training in the context of neural networks speciﬁcally, and also advocated
omitting random hidden layers during training. In this paper, we follow [2, 3] and study feature dropout as a
generic training method that can be applied to any learning algorithm.
1

1

and dropout training have an intimate connection: Just as SGD progresses by repeatedly solving
linearized L2 -regularized problems, a close relative of AdaGrad advances by solving linearized
dropout-regularized problems.
Our formulation of dropout training as adaptive regularization also leads to a simple semi-supervised
learning scheme, where we use unlabeled data to learn a better dropout regularizer. The approach
is fully discriminative and does not require ﬁtting a generative model. We apply this idea to several
document classiﬁcation problems, and ﬁnd that it consistently improves the performance of dropout
training. On the benchmark IMDB reviews dataset introduced by [12], dropout logistic regression
with a regularizer tuned on unlabeled data outperforms previous state-of-the-art. In follow-up research [13], we extend the results from this paper to more complicated structured prediction, such
as multi-class logistic regression and linear chain conditional random ﬁelds.

2

Artiﬁcial Feature Noising as Regularization

We begin by discussing the general connections between feature noising and regularization in generalized linear models (GLMs). We will apply the machinery developed here to dropout training in
Section 4.
A GLM deﬁnes a conditional distribution over a response y ∈ Y given an input feature vector
x ∈ Rd :
def

pβ (y | x) = h(y) exp{y x · β − A(x · β)},

x,y (β)

def

= − log pβ (y | x).

(1)

Here, h(y) is a quantity independent of x and β, A(·) is the log-partition function, and x,y (β) is the
loss function (i.e., the negative log likelihood); Table 1 contains a summary of notation. Common
examples of GLMs include linear (Y = R), logistic (Y = {0, 1}), and Poisson (Y = {0, 1, 2, . . . })
regression.
ˆ
Given n training examples (xi , yi ), the standard maximum likelihood estimate β ∈ Rd minimizes
the empirical loss over the training examples:
n

ˆ def
β = arg min

β∈Rd

xi , yi (β).

(2)

i=1

With artiﬁcial feature noising, we replace the observed feature vectors xi with noisy versions xi =
˜
ν(xi , ξi ), where ν is our noising function and ξi is an independent random variable. We ﬁrst create
many noisy copies of the dataset, and then average out the auxiliary noise. In this paper, we will
consider two types of noise:
• Additive Gaussian noise: ν(xi , ξi ) = xi + ξi , where ξi ∼ N (0, σ 2 Id×d ).
• Dropout noise: ν(xi , ξi ) = xi ξi , where
is the elementwise product of two vectors. Each component of ξi ∈ {0, (1 − δ)−1 }d is an independent draw from a scaled
Bernoulli(1 − δ) random variable. In other words, dropout noise corresponds to setting xij
˜
to 0 with probability δ and to xij /(1 − δ) else.2
Integrating over the feature noise gives us a noised maximum likelihood parameter estimate:
n

ˆ
β = arg min

β∈Rd

Eξ [

xi , yi (β)] ,
˜

def

where Eξ [Z] = E [Z | {xi , yi }]

(3)

i=1

is the expectation taken with respect to the artiﬁcial feature noise ξ = (ξ1 , . . . , ξn ). Similar expressions have been studied by [9, 10].
For GLMs, the noised empirical loss takes on a simpler form:
n

n

Eξ [

xi , yi (β)]
˜

n

− (y xi · β − Eξ [A(˜i · β)]) =
x

=

i=1
2
Artiﬁcial noise of the form xi
to dropout noise as deﬁned by [1].

i=1

xi , yi (β)

+ R(β).

(4)

i=1

ξi is also called blankout noise. For GLMs, blankout noise is equivalent

2

Table 1: Summary of notation.
xi
xi
˜
A(x · β)

Observed feature vector
Noised feature vector
Log-partition function

R(β)
Rq (β)
(β)

Noising penalty (5)
Quadratic approximation (6)
Negative log-likelihood (loss)

The ﬁrst equality holds provided that Eξ [˜i ] = xi , and the second is true with the following deﬁnix
tion:
n
def

Eξ [A(˜i · β)] − A(xi · β).
x

R(β) =

(5)

i=1

Here, R(β) acts as a regularizer that incorporates the effect of artiﬁcial feature noising. In GLMs, the
log-partition function A must always be convex, and so R is always positive by Jensen’s inequality.
The key observation here is that the effect of artiﬁcial feature noising reduces to a penalty R(β)
that does not depend on the labels {yi }. Because of this, artiﬁcial feature noising penalizes the
complexity of a classiﬁer in a way that does not depend on the accuracy of a classiﬁer. Thus, for
GLMs, artiﬁcial feature noising is a regularization scheme on the model itself that can be compared
with other forms of regularization such as ridge (L2 ) or lasso (L1 ) penalization. In Section 6, we
exploit the label-independence of the noising penalty and use unlabeled data to tune our estimate of
R(β).
The fact that R does not depend on the labels has another useful consequence that relates to prediction. The natural prediction rule with artiﬁcially noised features is to select y to minimize expected
ˆ
ˆ
loss over the added noise: y = argminy Eξ [ x, y (β)]. It is common practice, however, not to noise
ˆ
˜
the inputs and just to output classiﬁcation decisions based on the original feature vector [1, 3, 14]:
ˆ
y = argminy x, y (β). It is easy to verify that these expressions are in general not equivalent, but
ˆ
they are equivalent when the effect of feature noising reduces to a label-independent penalty on the
likelihood. Thus, the common practice of predicting with clean features is formally justiﬁed for
GLMs.
2.1

A Quadratic Approximation to the Noising Penalty

Although the noising penalty R yields an explicit regularizer that does not depend on the labels
{yi }, the form of R can be difﬁcult to interpret. To gain more insight, we will work with a quadratic
approximation of the type used by [9, 10]. By taking a second-order Taylor expansion of A around
1
x · β, we get that Eξ [A(˜ · β)] − A(x · β) ≈ 2 A (x · β) Varξ [˜ · β] . Here the ﬁrst-order term
x
x
Eξ [A (x · β)(˜ − x)] vanishes because Eξ [˜] = x. Applying this quadratic approximation to (5)
x
x
yields the following quadratic noising regularizer, which will play a pivotal role in the rest of the
paper:
def

Rq (β) =

1
2

n

A (xi · β) Varξ [˜i · β] .
x

(6)

i=1

This regularizer penalizes two types of variance over the training examples: (i) A (xi · β), which
corresponds to the variance of the response yi in the GLM, and (ii) Varξ [˜i · β], the variance of the
x
estimated GLM parameter due to noising.3
Accuracy of approximation Figure 1a compares the noising penalties R and Rq for logistic redef
gression in the case that x · β is Gaussian;4 we vary the mean parameter p = (1 + e−x·β )−1 and the
˜
q
noise level σ. We see that R is generally very accurate, although it tends to overestimate the true
penalty for p ≈ 0.5 and tends to underestimate it for very conﬁdent predictions. We give a graphical
explanation for this phenomenon in the Appendix (Figure A.1).
The quadratic approximation also appears to hold up on real datasets. In Figure 1b, we compare the evolution during training of both R and Rq on the 20 newsgroups alt.atheism vs
3

Although Rq is not convex, we were still able (using an L-BFGS algorithm) to train logistic regression
with Rq as a surrogate for the dropout regularizer without running into any major issues with local optima.
4
This assumption holds a priori for additive Gaussian noise, and can be reasonable for dropout by the central
limit theorem.

3

0.30

500
Loss

100

0.20

50

0.15
0.00

10

0.05

20

0.10

Noising Penalty

Dropout Penalty
Quadratic Penalty
Negative Log−Likelihood

200

0.25

p = 0.5
p = 0.73
p = 0.82
p = 0.88
p = 0.95

0.0

0.5

1.0

1.5

0

Sigma

50

100

150

Training Iteration

(a) Comparison of noising penalties R and Rq for
logistic regression with Gaussian perturbations,
i.e., (˜ − x) · β ∼ N (0, σ 2 ). The solid line
x
indicates the true penalty and the dashed one is
our quadratic approximation thereof; p = (1 +
e−x·β )−1 is the mean parameter for the logistic
model.

(b) Comparing the evolution of the exact dropout
penalty R and our quadratic approximation Rq
for logistic regression on the AthR classiﬁcation
task in [15] with 22K features and n = 1000
examples. The horizontal axis is the number of
quasi-Newton steps taken while training with exact dropout.

Figure 1: Validating the quadratic approximation.
soc.religion.christian classiﬁcation task described in [15]. We see that the quadratic approximation is accurate most of the way through the learning procedure, only deteriorating slightly
as the model converges to highly conﬁdent predictions.
In practice, we have found that ﬁtting logistic regression with the quadratic surrogate Rq gives
similar results to actual dropout-regularized logistic regression. We use this technique for our experiments in Section 6.

3

Regularization based on Additive Noise

Having established the general quadratic noising regularizer Rq , we now turn to studying the effects of Rq for various likelihoods (linear and logistic regression) and noising models (additive and
dropout). In this section, we warm up with additive noise; in Section 4 we turn to our main target of
interest, namely dropout noise.
Linear regression Suppose x = x + ε is generated by by adding noise with Var[ε] = σ 2 Id×d to
˜
the original feature vector x. Note that Varξ [˜ · β] = σ 2 β 2 , and in the case of linear regression
x
2
1 2
A(z) = 2 z , so A (z) = 1. Applying these facts to (6) yields a simpliﬁed form for the quadratic
noising penalty:
1
Rq (β) = σ 2 n β 2 .
(7)
2
2
Thus, we recover the well-known result that linear regression with additive feature noising is equivalent to ridge regression [2, 9]. Note that, with linear regression, the quadratic approximation Rq is
exact and so the correspondence with L2 -regularization is also exact.
Logistic regression The situation gets more interesting when we move beyond linear regression.
For logistic regression, A (xi · β) = pi (1 − pi ) where pi = (1 + exp(−xi · β))−1 is the predicted
probability of yi = 1. The quadratic noising penalty is then
1
R (β) = σ 2 β
2
q

n
2
2

pi (1 − pi ).

(8)

i=1

In other words, the noising penalty now simultaneously encourages parsimonious modeling as before (by encouraging β 2 to be small) as well as conﬁdent predictions (by encouraging the pi ’s to
2
1
move away from 2 ).
4

Table 2: Form of the different regularization schemes. These expressions assume that the design
matrix has been normalized, i.e., that i x2 = 1 for all j. The pi = (1 + e−xi ·β )−1 are mean
ij
parameters for the logistic model.
L2 -penalization
Additive Noising
Dropout Training

4

Linear Regression
β 2
2
β 2
2
β 2
2

Logistic Regression
β 2
2
β 2 i pi (1 − pi )
2
2
2
i, j pi (1 − pi ) xij βj

GLM
β 2
2
β 2 tr(V (β))
2
β diag(X V (β)X)β

Regularization based on Dropout Noise

Recall that dropout training corresponds to applying dropout noise to training examples, where
the noised features xi are obtained by setting xij to 0 with some “dropout probability” δ and to
˜
˜
xij /(1 − δ) with probability (1 − δ), independently for each coordinate j of the feature vector. We
can check that:
d
1 δ
Varξ [˜i · β] =
x
x2 β 2 ,
(9)
2 1 − δ j=1 ij j
and so the quadratic dropout penalty is
Rq (β) =

1 δ
21−δ

n

d
2
x2 β j .
ij

A (xi · β)
i=1

(10)

j=1

Letting X ∈ Rn×d be the design matrix with rows xi and V (β) ∈ Rn×n be a diagonal matrix with
entries A (xi · β), we can re-write this penalty as
1 δ
β diag(X V (β)X)β.
(11)
Rq (β) =
21−δ
Let β ∗ be the maximum likelihood estimate given inﬁnite data. When computed at β ∗ , the matrix
n
1
1
∗
2
∗
xi , yi (β ) is an estimate of the Fisher information matrix I. Thus,
i=1
n X V (β )X = n
dropout can be seen as an attempt to apply an L2 penalty after normalizing the feature vector by
diag(I)−1/2 . The Fisher information is linked to the shape of the level surfaces of (β) around β ∗ .
If I were a multiple of the identity matrix, then these level surfaces would be perfectly spherical
around β ∗ . Dropout, by normalizing the problem by diag(I)−1/2 , ensures that while the level
surfaces of (β) may not be spherical, the L2 -penalty is applied in a basis where the features have
been balanced out. We give a graphical illustration of this phenomenon in Figure A.2.
Linear Regression For linear regression, V is the identity matrix, so the dropout objective is
equivalent to a form of ridge regression where each column of the design matrix is normalized
before applying the L2 penalty.5 This connection has been noted previously by [3].
Logistic Regression The form of dropout penalties becomes much more intriguing once we move
beyond the realm of linear regression. The case of logistic regression is particularly interesting.
Here, we can write the quadratic dropout penalty from (10) as
Rq (β) =

1 δ
21−δ

n

d
2
pi (1 − pi ) x2 βj .
ij

(12)

i=1 j=1

Thus, just like additive noising, dropout generally gives an advantage to conﬁdent predictions and
small β. However, unlike all the other methods considered so far, dropout may allow for some large
2
pi (1 − pi ) and some large βj , provided that the corresponding cross-term x2 is small.
ij
Our analysis shows that dropout regularization should be better than L2 -regularization for learning
weights for features that are rare (i.e., often 0) but highly discriminative, because dropout effectively
does not penalize βj over observations for which xij = 0. Thus, in order for a feature to earn a large
2
βj , it sufﬁces for it to contribute to a conﬁdent prediction with small pi (1 − pi ) each time that it
is active.6 Dropout training has been empirically found to perform well on tasks such as document
5
Normalizing the columns of the design matrix before performing penalized regression is standard practice,
and is implemented by default in software like glmnet for R [16].
6
To be precise, dropout does not reward all rare but discriminative features. Rather, dropout rewards those
features that are rare and positively co-adapted with other features in a way that enables the model to make
conﬁdent predictions whenever the feature of interest is active.

5

Table 3: Accuracy of L2 and dropout regularized logistic regression on a simulated example. The
ﬁrst row indicates results over test examples where some of the rare useful features are active (i.e.,
where there is some signal that can be exploited), while the second row indicates accuracy over the
full test set. These results are averaged over 100 simulation runs, with 75 training examples in each.
All tuning parameters were set to optimal values. The sampling error on all reported values is within
±0.01.
Accuracy
Active Instances
All Instances

L2 -regularization
0.66
0.53

Dropout training
0.73
0.55

classiﬁcation where rare but discriminative features are prevalent [3]. Our result suggests that this is
no mere coincidence.
We summarize the relationship between L2 -penalization, additive noising and dropout in Table 2.
Additive noising introduces a product-form penalty depending on both β and A . However, the full
potential of artiﬁcial feature noising only emerges with dropout, which allows the penalty terms due
to β and A to interact in a non-trivial way through the design matrix X (except for linear regression,
in which all the noising schemes we consider collapse to ridge regression).
4.1 A Simulation Example
The above discussion suggests that dropout logistic regression should perform well with rare but
useful features. To test this intuition empirically, we designed a simulation study where all the
signal is grouped in 50 rare features, each of which is active only 4% of the time. We then added
1000 nuisance features that are always active to the design matrix, for a total of d = 1050 features.
To make sure that our experiment was picking up the effect of dropout training speciﬁcally and not
just normalization of X, we ensured that the columns of X were normalized in expectation.
The dropout penalty for logistic regression can be written as a matrix product

 
···
···
1 δ
2
Rq (β) =
(· · · pi (1 − pi ) · · ·) · · · x2 · · ·  βj  .
ij
21−δ
···
···

(13)

We designed the simulation study in such a way that, at the optimal β, the dropout penalty should
have structure

Small

(conﬁdent prediction)

Big
(weak prediction)




···
0




···




···



Big
(useful feature)

Small



.



(14)

(nuisance feature)

A dropout penalty with such a structure should be small. Although there are some uncertain pre2
dictions with large pi (1 − pi ) and some big weights βj , these terms cannot interact because the
2
corresponding terms xij are all 0 (these are examples without any of the rare discriminative features and thus have no signal). Meanwhile, L2 penalization has no natural way of penalizing some
βj more and others less. Our simulation results, given in Table 3, conﬁrm that dropout training
outperforms L2 -regularization here as expected. See Appendix A.1 for details.

5

Dropout Regularization in Online Learning

There is a well-known connection between L2 -regularization and stochastic gradient descent (SGD).
ˆ
ˆ
ˆ
ˆ
In SGD, the weight vector β is updated with βt+1 = βt − ηt gt , where gt =
xt , yt (βt ) is the
gradient of the loss due to the t-th training example. We can also write this update as a linear
L2 -penalized problem
ˆ
βt+1 = argminβ

ˆ + gt · (β − βt ) + 1 β − βt
ˆ
ˆ
2ηt

xt , yt (βt )

2
2

,

(15)

where the ﬁrst two terms form a linear approximation to the loss and the third term is an L2 regularizer. Thus, SGD progresses by repeatedly solving linearized L2 -regularized problems.
6

0.88

0.86

0.86

accuracy

0.9

0.88

accuracy

0.9

0.84
dropout+unlabeled
dropout
L2

0.82

0.8

0

10000
20000
30000
size of unlabeled data

0.84
dropout+unlabeled
dropout
L2

0.82

0.8

40000

5000
10000
size of labeled data

15000

Figure 2: Test set accuracy on the IMDB dataset [12] with unigram features. Left: 10000 labeled
training examples, and up to 40000 unlabeled examples. Right: 3000-15000 labeled training examples, and 25000 unlabeled examples. The unlabeled data is discounted by a factor α = 0.4.
As discussed by Duchi et al. [11], a problem with classic SGD is that it can be slow at learning
weights corresponding to rare but highly discriminative features. This problem can be alleviated
ˆ
ˆ
by running a modiﬁed form of SGD with βt+1 = βt − η A−1 gt , where the transformation At is
t
also learned online; this leads to the AdaGrad family of stochastic descent rules. Duchi et al. use
t
At = diag(Gt )1/2 where Gt =
i=1 gi gi and show that this choice achieves desirable regret
bounds in the presence of rare but useful features. At least superﬁcially, AdaGrad and dropout seem
to have similar goals: For logistic regression, they can both be understood as adaptive alternatives
to methods based on L2 -regularization that favor learning rare, useful features. As it turns out, they
have a deeper connection.
The natural way to incorporate dropout regularization into SGD is to replace the penalty term β −
ˆ
β 2 /2η in (15) with the dropout regularizer, giving us an update rule
2
ˆ
βt+1 = argminβ

ˆ + gt · (β − βt ) + Rq (β − βt ; βt )
ˆ
ˆ ˆ

x t , y t ( βt )

(16)

ˆ
ˆ
where, Rq (·; βt ) is the quadratic noising regularizer centered at βt :7
1
ˆ
ˆ
ˆ ˆ
Rq (β − βt ; βt ) = (β − βt ) diag(Ht ) (β − βt ), where Ht =
2

t
2

ˆ

xi , yi (βt ).

(17)

i=1

This implies that dropout descent is ﬁrst-order equivalent to an adaptive SGD procedure with At =
diag(Ht ). To see the connection between AdaGrad and this dropout-based online procedure, recall
that for GLMs both of the expressions
Eβ ∗

2

x, y (β

∗

) = Eβ ∗

x, y (β

∗

)

x, y (β

∗

)

(18)

ˆ
are equal to the Fisher information I [17]. In other words, as βt converges to β ∗ , Gt and Ht are both
consistent estimates of the Fisher information. Thus, by using dropout instead of L2 -regularization
to solve linearized problems in online learning, we end up with an AdaGrad-like algorithm.
Of course, the connection between AdaGrad and dropout is not perfect. In particular, AdaGrad
allows for a more aggressive learning rate by using At = diag(Gt )−1/2 instead of diag(Gt )−1 .
But, at a high level, AdaGrad and dropout appear to both be aiming for the same goal: scaling
the features by the Fisher information to make the level-curves of the objective more circular. In
contrast, L2 -regularization makes no attempt to sphere the level curves, and AROW [18]—another
popular adaptive method for online learning—only attempts to normalize the effective feature matrix
but does not consider the sensitivity of the loss to changes in the model weights. In the case of
logistic regression, AROW also favors learning rare features, but unlike dropout and AdaGrad does
not privilege conﬁdent predictions.
7

ˆ
ˆ
This expression is equivalent to (11) except that we used βt and not β − βt to compute Ht .

7

Table 4: Performance of semi-supervised dropout training for document classiﬁcation.
(a) Test accuracy with and without unlabeled data on
different datasets. Each dataset is split into 3 parts
of equal sizes: train, unlabeled, and test. Log. Reg.:
logistic regression with L2 regularization; Dropout:
dropout trained with quadratic surrogate; +Unlabeled: using unlabeled data.

(b) Test accuracy on the IMDB dataset [12]. Labeled:
using just labeled data from each paper/method, +Unlabeled: use additional unlabeled data. Drop: dropout
with Rq , MNB: multionomial naive Bayes with semisupervised frequency estimate from [19],8 -Uni: unigram features, -Bi: bigram features.

Datasets Log. Reg. Dropout +Unlabeled
Subj
88.96
90.85
91.48
RT
73.49
75.18
76.56
IMDB-2k
80.63
81.23
80.33
XGraph
83.10
84.64
85.41
BbCrypt
97.28
98.49
99.24
IMDB
87.14
88.70
89.21

Methods Labeled +Unlabeled
MNB-Uni [19] 83.62
84.13
MNB-Bi [19] 86.63
86.98
Vect.Sent[12] 88.33
88.89
NBSVM[15]-Bi 91.22
–
Drop-Uni 87.78
89.52
Drop-Bi 91.31
91.98

6

Semi-Supervised Dropout Training

Recall that the regularizer R(β) in (5) is independent of the labels {yi }. As a result, we can use
additional unlabeled training examples to estimate it more accurately. Suppose we have an unlabeled
dataset {zi } of size m, and let α ∈ (0, 1] be a discount factor for the unlabeled data. Then we can
deﬁne a semi-supervised penalty estimate
n
def
R∗ (β) =
R(β) + α RUnlabeled (β) ,
(19)
n + αm
where R(β) is the original penalty estimate and RUnlabeled (β) = i Eξ [A(zi · β)] − A(zi · β) is
computed using (5) over the unlabeled examples zi . We select the discount parameter by crossvalidation; empirically, α ∈ [0.1, 0.4] works well. For convenience, we optimize the quadratic
q
surrogate R∗ instead of R∗ . Another practical option would be to use the Gaussian approximation
from [3] for estimating R∗ (β).
Most approaches to semi-supervised learning either rely on using a generative model [19, 20, 21, 22,
23] or various assumptions on the relationship between the predictor and the marginal distribution
over inputs. Our semi-supervised approach is based on a different intuition: we’d like to set weights
to make conﬁdent predictions on unlabeled data as well as the labeled data, an intuition shared by
entropy regularization [24] and transductive SVMs [25].
Experiments We apply this semi-supervised technique to text classiﬁcation. Results on several
datasets described in [15] are shown in Table 4a; Figure 2 illustrates how the use of unlabeled data
improves the performance of our classiﬁer on a single dataset. Overall, we see that using unlabeled
data to learn a better regularizer R∗ (β) consistently improves the performance of dropout training.
Table 4b shows our results on the IMDB dataset of [12]. The dataset contains 50,000 unlabeled
examples in addition to the labeled train and test sets of size 25,000 each. Whereas the train and
test examples are either positive or negative, the unlabeled examples contain neutral reviews as well.
We train a dropout-regularized logistic regression classiﬁer on unigram/bigram features, and use the
unlabeled data to tune our regularizer. Our method beneﬁts from unlabeled data even in the presence
of a large amount of labeled data, and achieves state-of-the-art accuracy on this dataset.

7

Conclusion

We analyzed dropout training as a form of adaptive regularization. This framework enabled us
to uncover close connections between dropout training, adaptively balanced L2 -regularization, and
AdaGrad; and led to a simple yet effective method for semi-supervised training. There seem to be
multiple opportunities for digging deeper into the connection between dropout training and adaptive
regularization. In particular, it would be interesting to see whether the dropout regularizer takes
on a tractable and/or interpretable form in neural networks, and whether similar semi-supervised
schemes could be used to improve on the results presented in [1].
8

Our implementation of semi-supervised MNB. MNB with EM [20] failed to give an improvement.

8

References
[1] Geoffrey E Hinton, Nitish Srivastava, Alex Krizhevsky, Ilya Sutskever, and Ruslan R Salakhutdinov. Improving neural networks by preventing co-adaptation of feature detectors. arXiv preprint
arXiv:1207.0580, 2012.
[2] Laurens van der Maaten, Minmin Chen, Stephen Tyree, and Kilian Q Weinberger. Learning with
marginalized corrupted features. In Proceedings of the International Conference on Machine Learning,
2013.
[3] Sida I Wang and Christopher D Manning. Fast dropout training. In Proceedings of the International
Conference on Machine Learning, 2013.
[4] Yaser S Abu-Mostafa. Learning from hints in neural networks. Journal of Complexity, 6(2):192–198,
1990.
[5] Chris J.C. Burges and Bernhard Schlkopf. Improving the accuracy and speed of support vector machines.
In Advances in Neural Information Processing Systems, pages 375–381, 1997.
[6] Patrice Y Simard, Yann A Le Cun, John S Denker, and Bernard Victorri. Transformation invariance in
pattern recognition: Tangent distance and propagation. International Journal of Imaging Systems and
Technology, 11(3):181–197, 2000.
[7] Salah Rifai, Yann Dauphin, Pascal Vincent, Yoshua Bengio, and Xavier Muller. The manifold tangent
classiﬁer. Advances in Neural Information Processing Systems, 24:2294–2302, 2011.
[8] Kiyotoshi Matsuoka. Noise injection into inputs in back-propagation learning. Systems, Man and Cybernetics, IEEE Transactions on, 22(3):436–440, 1992.
[9] Chris M Bishop. Training with noise is equivalent to Tikhonov regularization. Neural computation,
7(1):108–116, 1995.
[10] Salah Rifai, Xavier Glorot, Yoshua Bengio, and Pascal Vincent. Adding noise to the input of a model
trained with a regularized objective. arXiv preprint arXiv:1104.3250, 2011.
[11] John Duchi, Elad Hazan, and Yoram Singer. Adaptive subgradient methods for online learning and
stochastic optimization. Journal of Machine Learning Research, 12:2121–2159, 2010.
[12] Andrew L Maas, Raymond E Daly, Peter T Pham, Dan Huang, Andrew Y Ng, and Christopher Potts.
Learning word vectors for sentiment analysis. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics, pages 142–150. Association for Computational Linguistics, 2011.
[13] Sida I Wang, Mengqiu Wang, Stefan Wager, Percy Liang, and Christopher D Manning. Feature noising
for log-linear structured prediction. In Empirical Methods in Natural Language Processing, 2013.
[14] Ian J Goodfellow, David Warde-Farley, Mehdi Mirza, Aaron Courville, and Yoshua Bengio. Maxout
networks. In Proceedings of the International Conference on Machine Learning, 2013.
[15] Sida Wang and Christopher D Manning. Baselines and bigrams: Simple, good sentiment and topic classiﬁcation. In Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics,
pages 90–94. Association for Computational Linguistics, 2012.
[16] Jerome Friedman, Trevor Hastie, and Rob Tibshirani. Regularization paths for generalized linear models
via coordinate descent. Journal of Statistical Software, 33(1):1, 2010.
[17] Erich Leo Lehmann and George Casella. Theory of Point Estimation. Springer, 1998.
[18] Koby Crammer, Alex Kulesza, Mark Dredze, et al. Adaptive regularization of weight vectors. Advances
in Neural Information Processing Systems, 22:414–422, 2009.
[19] Jiang Su, Jelber Sayyad Shirab, and Stan Matwin. Large scale text classiﬁcation using semi-supervised
multinomial naive Bayes. In Proceedings of the International Conference on Machine Learning, 2011.
[20] Kamal Nigam, Andrew Kachites McCallum, Sebastian Thrun, and Tom Mitchell. Text classiﬁcation from
labeled and unlabeled documents using EM. Machine Learning, 39(2-3):103–134, May 2000.
[21] G. Bouchard and B. Triggs. The trade-off between generative and discriminative classiﬁers. In International Conference on Computational Statistics, pages 721–728, 2004.
[22] R. Raina, Y. Shen, A. Ng, and A. McCallum. Classiﬁcation with hybrid generative/discriminative models.
In Advances in Neural Information Processing Systems, Cambridge, MA, 2004. MIT Press.
[23] J. Suzuki, A. Fujino, and H. Isozaki. Semi-supervised structured output learning based on a hybrid
generative and discriminative approach. In Empirical Methods in Natural Language Processing and
Computational Natural Language Learning, 2007.
[24] Y. Grandvalet and Y. Bengio. Entropy regularization. In Semi-Supervised Learning, United Kingdom,
2005. Springer.
[25] Thorsten Joachims. Transductive inference for text classiﬁcation using support vector machines. In
Proceedings of the International Conference on Machine Learning, pages 200–209, 1999.

9

A

Appendix

Figure A.1: Quadratic approximations to the logistic loss. We see that the red curve, namely the
quadratic approximation taken at η = 0, p = 1/(1 + eη ) = 0.5 is always above the actual loss
curve. Meanwhile, quadratic approximations taken at the more extreme locations of p = 0.05 and
p = 0.95 undershoot the true loss over a large range. Note that the curvature of the loss is symmetric
in the natural parameter η and so the performance of the quadratic approximation is equivalent at p
and 1 − p for all p ∈ (0, 1).
A.1

Description of Simulation Study

Section 4.1 gives the motivation for and a high-level description of our simulation study. Here, we
give a detailed description of the study.
Generating features. Our simulation has 1050 features. The ﬁrst 50 discriminative features form
5 groups of 10; the last 1000 features are nuisance terms. Each xi was independently generated as
follows:
1. Pick a group number g ∈ 1, ..., 25, and a sign sgn = ±1.
2. If g ≤ 5, draw the entries of xi with index between 10 (g − 1) + 1 and 10 (g − 1) + 10
uniformly from sgn · Exp(C), where C is selected such that E[(xi )2 ] = 1 for all j. Set all
j
the other discriminative features to 0. If g > 5, set all the discriminative features to 0.
3. Draw the last 1000 entries of xi independently from N (0, 1).
Notice that this procedure guarantees that the columns of X all have the same expected second
moments.
Generating labels. Given an xi , we generate yi from the Bernoulli distribution with parameter
σ(xi · β), where the ﬁrst 50 coordinates of β are 0.057 and the remaining 1000 coordinates are 0.
The value 0.057 was selected to make the average value of |xi · β| in the presence of signal be 2.
Training. For each simulation run, we generated a training set of size n = 75. For this purpose, we
cycled over the group number g deterministically. The penalization parameters were set to roughly
optimal values. For dropout, we used δ = 0.9 while from L2 -penalization we used λ = 32.
10

Figure A.2: Comparison of two L2 regularizers. In both cases, the black solid ellipses are level surfaces of the likelihood and the blue dashed curves are level surfaces of the regularizer; the optimum
of the regularized objective is denoted by OPT. The left panel shows a classic spherical L2 regulizer
β 2 , whereas the right panel has an L2 regularizer β diag(I)β that has been adapted to the shape
2
of the likelihood (I is the Fisher information matrix). The second regularizer is still aligned with
the axes, but the relative importance of each axis is now scaled using the curvature of the likelihood
function. As argued in (11), dropout training is comparable to the setup depicted in the right panel.

11

