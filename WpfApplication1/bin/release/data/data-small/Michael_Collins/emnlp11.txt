Exact Decoding of Phrase-Based Translation Models
through Lagrangian Relaxation
Yin-Wen Chang
MIT CSAIL
Cambridge, MA 02139, USA
yinwen@csail.mit.edu

Abstract
This paper describes an algorithm for exact
decoding of phrase-based translation models,
based on Lagrangian relaxation. The method
recovers exact solutions, with certiﬁcates of
optimality, on over 99% of test examples.
The method is much more efﬁcient than approaches based on linear programming (LP)
or integer linear programming (ILP) solvers:
these methods are not feasible for anything
other than short sentences. We compare our
method to MOSES (Koehn et al., 2007), and
give precise estimates of the number and magnitude of search errors that MOSES makes.

1

Introduction

Phrase-based models (Och et al., 1999; Koehn et
al., 2003; Koehn et al., 2007) are a widely-used
approach for statistical machine translation. The
decoding problem for phrase-based models is NPhard1 ; because of this, previous work has generally
focused on approximate search methods, for example variants of beam search, for decoding.
This paper describes an algorithm for exact
decoding of phrase-based models, based on Lagrangian relaxation (Lemar´ chal, 2001). The core
e
of the algorithm is a dynamic program for phrasebased translation which is efﬁcient, but which allows
some ill-formed translations. More speciﬁcally, the
dynamic program searches over the space of translations where exactly N words are translated (N is
the number of words in the source-language sentence), but where some source-language words may
be translated zero times, or some source-language
words may be translated more than once. Lagrangian relaxation is used to enforce the constraint
1

We refer here to the phrase-based models of (Koehn et al.,
2003; Koehn et al., 2007), considered in this paper. Other variants of phrase-based models, which allow polynomial time decoding, have been proposed, see the related work section.

Michael Collins
Department of Computer Science,
Columbia University,
New York, NY 10027, USA
mcollins@cs.columbia.edu
that each source-language word should be translated
exactly once. A subgradient algorithm is used to optimize the dual problem arising from the relaxation.
The ﬁrst technical contribution of this paper is the
basic Lagrangian relaxation algorithm. By the usual
guarantees for Lagrangian relaxation, if this algorithm converges to a solution where all constraints
are satisﬁed (i.e., where each word is translated exactly once), then the solution is guaranteed to be
optimal. For some source-language sentences however, the underlying relaxation is loose, and the algorithm will not converge. The second technical contribution of this paper is a method that incrementally
adds constraints to the underlying dynamic program,
thereby tightening the relaxation until an exact solution is recovered.
We describe experiments on translation from German to English, using phrase-based models trained
by MOSES (Koehn et al., 2007). The method
recovers exact solutions, with certiﬁcates of optimality, on over 99% of test examples. On over
78% of examples, the method converges with zero
added constraints (i.e., using the basic algorithm);
99.67% of all examples converge with 9 or fewer
constraints. We compare to a linear programming
(LP)/integer linear programming (ILP) based decoder. Our method is much more efﬁcient: LP or
ILP decoding is not feasible for anything other than
short sentences,2 whereas the average decoding time
for our method (for sentences of length 1-50 words)
is 121 seconds per sentence. We also compare our
method to MOSES, and give precise estimates of the
number and magnitude of search errors that MOSES
makes. Even with large beam sizes, MOSES makes
a signiﬁcant number of search errors. As far as we
are aware, previous work has not successfully re2

For example ILP decoding for sentences of lengths 11-15
words takes on average 2707.8 seconds.

covered exact solutions for the type of phrase-based
models used in MOSES.

2

Related Work

Lagrangian relaxation is a classical technique for
solving combinatorial optimization problems (Korte
and Vygen, 2008; Lemar´ chal, 2001). Dual decome
position, a special case of Lagrangian relaxation, has
been applied to inference problems in NLP (Koo et
al., 2010; Rush et al., 2010), and also to Markov random ﬁelds (Wainwright et al., 2005; Komodakis et
al., 2007; Sontag et al., 2008). Earlier work on belief propagation (Smith and Eisner, 2008) is closely
related to dual decomposition. Recently, Rush and
Collins (2011) describe a Lagrangian relaxation algorithm for decoding for syntactic translation; the
algorithmic construction described in the current paper is, however, very different in nature to this work.
Beam search stack decoders (Koehn et al., 2003)
are the most commonly used decoding algorithm
for phrase-based models. Dynamic-programmingbased beam search algorithms are discussed for both
word-based and phrase-based models by Tillmann
and Ney (2003) and Tillmann (2006).
Several works attempt exact decoding, but efﬁciency remains an issue. Exact decoding via integer
linear programming (ILP) for IBM model 4 (Brown
et al., 1993) has been studied by Germann et al.
(2001), with experiments using a bigram language
model for sentences up to eight words in length.
Riedel and Clarke (2009) have improved the efﬁciency of this work by using a cutting-plane algorithm, and experimented with sentence lengths up
to 30 words (again with a bigram LM). Zaslavskiy
et al. (2009) formulate the phrase-based decoding
problem as a traveling salesman problem (TSP), and
take advantage of existing exact and approximate
approaches designed for TSP. Their translation experiment uses a bigram language model and applies
an approximate algorithm for TSP. Och et al. (2001)
propose an A* search algorithm for IBM model 4,
and test on sentence lengths up to 14 words. Other
work (Kumar and Byrne, 2005; Blackwood et al.,
2009) has considered variants of phrase-based models with restrictions on reordering that allow exact,
polynomial time decoding, using ﬁnite-state transducers.
The idea of incrementally adding constraints to

tighten a relaxation until it is exact is a core idea in
combinatorial optimization. Previous work on this
topic in NLP or machine learning includes work on
inference in Markov random ﬁelds (Sontag et al.,
2008); work that encodes constraints using ﬁnitestate machines (Tromble and Eisner, 2006); and
work on non-projective dependency parsing (Riedel
and Clarke, 2006).

3

The Phrase-based Translation Model

This section establishes notation for phrase-based
translation models, and gives a deﬁnition of the decoding problem. The phrase-based model we use is
the same as that described by Koehn et al. (2003), as
implemented in MOSES (Koehn et al., 2007).
The input to a phrase-based translation system is a source-language sentence with N words,
x1 x2 . . . xN . A phrase table is used to deﬁne the
set of possible phrases for the sentence: each phrase
is a tuple p = (s, t, e), where (s, t) are indices representing a contiguous span in the source-language
sentence (we have s ≤ t), and e is a target-language
string consisting of a sequence of target-language
words. For example, the phrase p = (2, 5, the dog)
would specify that words x2 . . . x5 have a translation
in the phrase table as “the dog”. Each phrase p has
a score g(p) = g(s, t, e): this score will typically
be calculated as a log-linear combination of features
(e.g., see Koehn et al. (2003)).
We use s(p), t(p) and e(p) to refer to the three
components (s, t, e) of a phrase p.
The output from a phrase-based model is a
sequence of phrases y = p1 p2 . . . pL . We
will often refer to an output y as a derivation.
The derivation y deﬁnes a target-language translation e(y), which is formed by concatenating the
strings e(p1 ), e(p2 ), . . . , e(pL ). For two consecutive
phrases pk = (s, t, e) and pk+1 = (s , t , e ), the distortion distance is deﬁned as δ(t, s ) = |t + 1 − s |.
The score for a translation is then deﬁned as
L

f (y) = h(e(y))+

L−1

g(pk )+
k=1

η×δ(t(pk ), s(pk+1 ))
k=1

where η ∈ R is often referred to as the distortion
penalty, and typically takes a negative value. The
function h(e(y)) is the score of the string e(y) under

a language model.3
The decoding problem is to ﬁnd
arg max f (y)
y∈Y

where Y is the set of valid derivations. The set Y can
be deﬁned as follows. First, for any derivation y =
p1 p2 . . . pL , deﬁne y(i) to be the number of times
that the source-language word xi has been translated
L
in y: that is, y(i) =
k=1 [[s(pk ) ≤ i ≤ t(pk )]],
where [[π]] = 1 if π is true, and 0 otherwise. Then
Y is deﬁned as the set of ﬁnite length sequences
p1 p2 . . . pL such that:
1. Each word in the input is translated exactly
once: that is, y(i) = 1 for i = 1 . . . N .
2. For each pair of consecutive phrases
pk , pk+1 for k = 1 . . . L − 1, we have
δ(t(pk ), s(pk+1 )) ≤ d, where d is the
distortion limit.
An exact dynamic programming algorithm for
this problem uses states (w1 , w2 , b, r), where
(w1 , w2 ) is a target-language bigram that the partial translation ended with, b is a bit-string denoting
which source-language words have been translated,
and r is the end position of the previous phrase (e.g.,
see Koehn et al. (2003)). The bigram (w1 , w2 ) is
needed for calculation of trigram language model
scores; r is needed to enforce the distortion limit,
and to calculate distortion costs. The bit-string b
is needed to ensure that each word is translated exactly once. Since the number of possible bit-strings
is exponential in the length of sentence, exhaustive
dynamic programming is in general intractable. Instead, people commonly use heuristic search methods such as beam search for decoding. However,
these methods have no guarantee of returning the
highest scoring translation.

4

A Decoding Algorithm based on
Lagrangian Relaxation

We now describe a decoding algorithm for phrasebased translation, based on Lagrangian relaxation.
3

The language model score usually includes a word insertion score that controls the length of translations. The relative
weights of the g(p) and h(e(y)) terms, and the value for η, are
typically chosen using MERT training (Och, 2003).

We ﬁrst describe a dynamic program for decoding
which is efﬁcient, but which relaxes the y(i) = 1
constraints described in the previous section. We
then describe the Lagrangian relaxation algorithm,
which introduces Lagrange multipliers for each constraint of the form y(i) = 1, and uses a subgradient
algorithm to minimize the dual arising from the relaxation. We conclude with theorems describing formal properties of the algorithm, and with an example
run of the algorithm.
4.1

An Efﬁcient Dynamic Program

As described in the previous section, our goal is to
ﬁnd the optimal translation y ∗ = arg maxy∈Y f (y).
We will approach this problem by deﬁning a set Y
such that Y ⊂ Y , and such that
arg max f (y)
y∈Y

can be found efﬁciently using dynamic programming.
The set Y omits some constraints—
speciﬁcally, the constraints that each sourcelanguage word is translated once, i.e., that y(i) = 1
for i = 1 . . . N —that are enforced for members
of Y. In the next section we describe how to reintroduce these constraints using Lagrangian relaxation. The set Y does, however, include a looser
constraint, namely that N y(i) = N , which rei=1
quires that exactly N words are translated.
We now give the dynamic program that deﬁnes
Y . The main idea will be to replace bit-strings (as
described in the previous section) by a much smaller
number of dynamic programming states. Speciﬁcally, the states of the new dynamic program will
be tuples (w1 , w2 , n, l, m, r). The pair (w1 , w2 ) is
again a target-language bigram corresponding to the
last two words in the partial translation, and the integer r is again the end position of the previous phrase.
The integer n is the number of words that have been
translated thus far in the dynamic programming algorithm. The integers l and m specify a contiguous
span xl . . . xm in the source-language sentence; this
span is the last contiguous span of words that have
been translated thus far.
The dynamic program can be viewed as a
shortest-path problem in a directed graph, with
nodes in the graph corresponding to states
(w1 , w2 , n, l, m, r).
The transitions in the

graph are deﬁned as follows. For each state
(w1 , w2 , n, l, m, r), we consider any phrase
p = (s, t, e) with e = (e0 . . . eM −1 eM ) such that:
1) δ(r, s) ≤ d; and 2) t < l or s > m. The former
condition states that the phrase should satisfy the
distortion limit. The latter condition requires that
there is no overlap of the new phrase’s span (s, t)
with the span (l, m). For any such phrase, we create
a transition
p=(s,t,e)

(w1 , w2 , n, l, m, r) − − − (w1 , w2 , n , l , m , r )
−−→
where
(eM −1 , eM ) if M ≥ 2
(w2 , e1 )
if M = 1
• n = n + t s + 1
−
 (l, t ) if s = m + 1
(s, m) if t = l − 1
• (l , m ) =

(s, t ) otherwise
• r =t
The new target-language bigram (w1 , w2 ) is the last
two words of the partial translation after including
phrase p. It comes from either the last two words
of e, or, if e consists of a single word, the last word
of the previous bigram, w2 , and the ﬁrst and only
word, e1 , in e. (l , m ) is expanded from (l, m) if
the spans (l, m) and (s, t) are adjacent. Otherwise,
(l , m ) will be the same as (s, t).
The score of the transition is given by a sum
of the phrase translation score g(p), the language
model score, and the distortion cost η × δ(r, s). The
trigram language model score is h(e1 |w1 , w2 ) +
M −2
where
h(e2 |w2 , e1 ) +
i=1 h(ei+2 |ei , ei+1 ),
h(w3 |w1 , w2 ) is a trigram score (typically a log
probability plus a word insertion score).
We also include start and end states in the directed
graph. The start state is (<s>, <s>, 0, 0, 0, 0) where
<s> is the start symbol in the language model. For
each state (w1 , w2 , n, l, m, r), such that n = N , we
create a transition to the end state. This transition
takes the form
• (w1 , w2 ) =

(N,N +1,</s>)
(w1 , w2 , N, l, m, r) − − − − − − END
− − − − −→

For this transition, we deﬁne the score as score =
h(</s>|w1 , w2 ); thus this transition incorporates
the end symbol </s> in the language model.
The states and transitions we have described form
a directed graph, where each path from the start state

to the end state corresponds to a sequence of phrases
p1 p2 . . . pL . We deﬁne Y to be the full set of such
sequences. We can use the Viterbi algorithm to solve
arg maxy∈Y f (y) by simply searching for the highest scoring path from the start state to the end state.
The set Y clearly includes derivations that are illformed, in that they may include words that have
been translated 0 times, or more than 1 time. The
ﬁrst line of Figure 2 shows one such derivation (corresponding to the translation the quality and also the
and the quality and also .). For each phrase we show
the English string (e.g., the quality) together with the
span of the phrase (e.g., 3, 6). The values for y(i) are
also shown. It can be veriﬁed that this derivation is a
valid member of Y . However, y(i) = 1 for several
values of i: for example, words 1 and 2 are translated 0 times, while word 3 is translated twice.
Other dynamic programs, and deﬁnitions of Y ,
are possible: for example an alternative would be
to use a dynamic program with states (w1 , w2 , n, r).
However, including the previous contiguous span
(l, m) makes the set Y a closer approximation to
Y. In experiments we have found that including the
previous span (l, m) in the dynamic program leads
to faster convergence of the subgradient algorithm
described in the next section, and in general to more
stable results. This is in spite of the dynamic program being larger; it is no doubt due to Y being a
better approximation of Y.
4.2

The Lagrangian Relaxation Algorithm

We now describe the Lagrangian relaxation decoding algorithm for the phrase-based model. Recall
that in the previous section, we deﬁned a set Y that
allowed efﬁcient dynamic programming, and such
that Y ⊂ Y . It is easy to see that Y = {y : y ∈
Y , and ∀i, y(i) = 1}. The original decoding
problem can therefore be stated as:
arg max f (y) such that ∀i, y(i) = 1
y∈Y

We use Lagrangian relaxation (Korte and Vygen,
2008) to deal with the y(i) = 1 constraints. We
introduce Lagrange multipliers u(i) for each such
constraint. The Lagrange multipliers u(i) can take
any positive or negative value. The Lagrangian is
u(i)(y(i) − 1)

L(u, y) = f (y) +
i

Initialization: u0 (i) ← 0 for i = 1 . . . N
for t = 1 . . . T
y t = arg maxy∈Y L(ut−1 , y)
if y t (i) = 1 for i = 1 . . . N
return y t
else
for i = 1 . . . N
ut (i) = ut−1 (i) − αt (y t (i) − 1)

t

g (s, t, e) = g(s, t, e) +

u(i)
i=s

Figure 1: The decoding algorithm. αt > 0 is the step size
at the t’th iteration.

Intuitively, each Lagrange multiplier u(i) penalizes or rewards phrases that translate word i; the algorithm attempts to adjust the Lagrange multipliers
in such a way that each word is translated exactly
once. The updates ut (i) = ut−1 (i) − αt (y t (i) − 1)
will decrease the value for u(i) if y t (i) > 1, increase the value for u(i) if y t (i) = 0, and leave u(i)
unchanged if y t (i) = 1.

The dual objective is then

4.3

L(u) = max L(u, y).
y∈Y

and the dual problem is to solve
min L(u).
u

The next section gives a number of formal results describing how solving the dual problem will be useful
in solving the original optimization problem.
We now describe an algorithm that solves the dual
problem. By standard results for Lagrangian relaxation (Korte and Vygen, 2008), L(u) is a convex function; it can be minimized by a subgradient
method. If we deﬁne
yu = arg max L(u, y)
y∈Y

and γu (i) = yu (i) − 1 for i = 1 . . . N , then γu is
a subgradient of L(u) at u. A subgradient method
is an iterative method for minimizing L(u), which
perfoms updates ut ← ut−1 −αt γut−1 where αt > 0
is the step size for the t’th subgradient step.
Figure 1 depicts the resulting algorithm. At each
iteration, we solve
u(i)(y(i) − 1)

arg max f (y) +
y∈Y

i

= arg max f (y) +
y∈Y

u(i)y(i)
i

by the dynamic program described in the previous
section. Incorporating the i u(i)y(i) terms in the
dynamic program is straightforward: we simply redeﬁne the phrase scores as

Properties

We now give some theorems stating formal properties of the Lagrangian relaxation algorithm. These
results for Lagrangian relaxation are well known:
for completeness, we state them here. First, deﬁne
y ∗ to be the optimal solution for our original problem:
Deﬁnition 1. y ∗ = arg maxy∈Y f (y)
Our ﬁrst theorem states that the dual function provides an upper bound on the score for the optimal
translation, f (y ∗ ):
Theorem 1. For any value of u ∈ RN , L(u) ≥
f (y ∗ ).
Proof.
u(i)(y(i) − 1)

L(u) = max f (y) +
y∈Y

i

≥ max f (y) +
y∈Y

u(i)(y(i) − 1)
i

= max f (y)
y∈Y

The ﬁrst inequality follows because Y ⊂ Y . The
ﬁnal equality is true since any y ∈ Y has y(i) =
1 for all i, implying that i u(i)(y(i)−1) = 0.
The second theorem states that under an appropriate choice of the step sizes αt , the method converges
to the minimum of L(u). Hence we will successfully
ﬁnd the tightest possible upper bound deﬁned by the
dual L(u).
Theorem 2. For any sequence α1 , α2 , . . . If 1)
∞
t = ∞, then
limt→∞ αt → 0; 2)
t=1 α
t ) = min L(u)
limt→∞ L(u
u
Proof. See Korte and Vygen (2008).

¨
¨
¨
Input German: dadurch konnen die qualitat und die regelmaßige postzustellung auch weiterhin sichergestellt werden .
t

L(ut−1 )

1

-10.0988

0022330020001

y t (i)

2

-11.1597

0010001004151

3

-12.3742

3312200010001

4

-11.8623

0100011330301

5

-13.9916

0011324000101

6

-15.6558

1112020111111

7

-16.1022

derivation y t
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛9, 9 ˛6, 6 ˛5, 5 ˛3, 3 ˛
˛9, 9 ˛13, 13˛
3, 6
4, 6
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛the quality and ˛also ˛ the ˛ and ˛ the ˛quality and ˛also ˛ . ˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛3, 3 ˛ 7, 7 ˛12, 12 ˛ 10, 10 ˛12, 12 ˛ 10, 10 ˛12, 12 ˛ 10, 10 ˛12, 12 ˛ 10, 10 ˛
˛
11, 13
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛ the ˛regular ˛ will ˛continue to ˛ be ˛continue to ˛ be ˛continue to ˛ be ˛continue to ˛be guaranteed .˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛5, 5 ˛2, 2 ˛ 1, 1 ˛ 4, 4 ˛
˛
˛9, 9 ˛13, 13˛
1, 2
1, 2
3, 5
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛in that way , ˛ and ˛ can ˛thus ˛quality ˛in that way , ˛the quality and ˛also ˛ . ˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛2, 2 ˛ 6, 7
˛
˛9, 9 ˛11, 11 ˛
˛9, 9 ˛11, 11 ˛
˛9, 9 ˛11, 11
8, 8
8, 8
8, 8
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛ can ˛the regular ˛distribution should ˛also ˛ensure ˛distribution should ˛also ˛ensure ˛distribution should ˛also ˛ensure
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛3, 3 ˛ 7, 7 ˛5, 5 ˛ 7, 7 ˛5, 5 ˛ 7, 7 ˛6, 6 ˛ 4, 4 ˛
˛ 11, 11 ˛13, 13˛
5, 7
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛ the ˛regular ˛ and ˛regular ˛ and ˛regular ˛ the ˛quality ˛and the regular ˛ensured ˛ . ˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛6, 6 ˛ 4, 4
˛6, 6 ˛
˛ 9, 10
˛
˛
1, 2
3, 4
8, 8
11, 13
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛in that way , ˛the quality of ˛ the ˛quality of ˛ the ˛distribution should ˛continue to ˛be guaranteed .˛
˛
˛
˛
˛
˛
˛
˛
˛
˛ 3, 4
˛
˛
˛ 9, 10
˛
˛
1, 2
5, 7
8, 8
11, 13
˛
˛
˛
˛
˛
˛
˛
˛in that way , ˛the quality ˛and the regular ˛distribution should ˛continue to ˛be guaranteed .˛

1111111111111

˛
˛
˛13, 13˛
˛
˛
˛ . ˛

Figure 2: An example run of the algorithm in Figure 1. For each value of t we show the dual value L(ut−1 ), the
derivation y t , and the number of times each word is translated, y t (i) for i = 1 . . . N . For each phrase in a derivation
we show the English string e, together with the span (s, t): for example, the ﬁrst phrase in the ﬁrst derivation has
English string the quality and, and span (3, 6). At iteration 7 we have y t (i) = 1 for i = 1 . . . N , and the translation is
returned, with a guarantee that it is optimal.

Our ﬁnal theorem states that if at any iteration the
algorithm ﬁnds a solution y t such that y t (i) = 1 for
i = 1 . . . N , then this is guaranteed to be the optimal
solution to our original problem. First, deﬁne
Deﬁnition 2. yu = arg maxy∈Y L(u, y).
We then have the theorem
Theorem 3. If ∃ u, s.t. yu (i) = 1 for i = 1 . . . N ,
then f (yu ) = f (y ∗ ), i.e. yu is optimal.

tight, in that there may not be any settings u for the
Lagrange multipliers such that yu (i) = 1 for all i.
Section 5 describes a method for tightening
the underlying relaxation by introducing hard constraints (of the form y(i) = 1 for selected values of
i). We will see that this method is highly effective
in tightening the relaxation until the algorithm converges to an optimal solution.
4.4

Proof. We have
u(i)(y(i) − 1)

L(u) = max f (y) +
y∈Y

i

u(i)(yu (i) − 1)

= f (yu ) +
i

= f (yu )
The second equality is true because of the deﬁnition of yu . The third equality follows because by
assumption yu (i) = 1 for i = 1 . . . N . Because
L(u) = f (yu ) and L(u) ≥ f (y ∗ ) for all u, we have
f (yu ) ≥ f (y ∗ ). But y ∗ = arg maxy∈Y f (y), and
yu ∈ Y, hence we must also have f (yu ) ≤ f (y ∗ ). It
follows that f (yu ) = f (y ∗ ).
In some cases, however, the algorithm in Figure 1
may not return a solution y t such that y t (i) = 1
for all i. There could be two reasons for this. In
the ﬁrst case, we may not have run the algorithm
for enough iterations T to see convergence. In the
second case, the underlying relaxation may not be

An Example of the Algorithm

Figure 2 shows an example of how the algorithm
works when translating a German sentence into an
English sentence. After the ﬁrst iteration, there are
words that have been translated two or three times,
and words that have not been translated. At each
iteration, the Lagrangian multipliers are updated to
encourage each word to be translated once. On
this example, the algorithm converges to a solution
where all words are translated exactly once, and the
solution is guaranteed to be optimal.

5

Tightening the Relaxation

In some cases the algorithm in Figure 1 will not
converge to y(i) = 1 for i = 1 . . . N because
the underlying relaxation is not tight. We now describe a method that incrementally tightens the Lagrangian relaxation algorithm until it provides an exact answer. In cases that do not converge, we introduce hard constraints to force certain words to be
translated exactly once in the dynamic programming
solver. In experiments we show that typically only a

Optimize(C, u)
while (dual value still improving)
y ∗ = arg maxy∈YC L(u, y)
if y ∗ (i) = 1 for i = 1 . . . N return y ∗
else for i = 1 . . . N
u(i) = u(i) − α (y ∗ (i) − 1)
count(i) = 0 for i = 1 . . . N
for k = 1 . . . K
y ∗ = arg maxy∈YC L(u, y)
if y ∗ (i) = 1 for i = 1 . . . N return y ∗
else for i = 1 . . . N
u(i) = u(i) − α (y ∗ (i) − 1)
count(i) = count(i) + [[y ∗ (i) = 1]]
Let C = set of G i’s that have the largest value for
count(i), that are not in C, and that are not adjacent to
each other
return Optimize(C ∪ C , u)
Figure 3: A decoding algorithm with incremental addition of constraints. The function Optimize(C, u) is a recursive function, which takes as input a set of constraints
C, and a vector of Lagrange multipliers, u. The initial
call to the algorithm is with C = ∅, and u = 0. α > 0 is
the step size. In our experiments, the step size decreases
each time the dual value increases from one iteration to
the next; see Appendix A.

few constraints are necessary.
Given a set C ⊆ {1, 2, . . . , N }, we deﬁne
YC = {y : y ∈ Y , and ∀ i ∈ C, y(i) = 1}
Thus YC is a subset of Y , formed by adding hard
constraints of the form y(i) = 1 to Y . Note that YC
remains as a superset of Y, which enforces y(i) =
1 for all i. Finding arg maxy∈YC f (y) can again
be achieved using dynamic programming, with the
number of dynamic programming states increased
by a factor of 2|C| : dynamic programming states of
the form (w1 , w2 , n, l, m, r) are replaced by states
(w1 , w2 , n, l, m, r, bC ) where bC is a bit-string of
length |C|, which records which words in the set C
have or haven’t been translated in a hypothesis (partial derivation). Note that if C = {1 . . . N }, we have
YC = Y, and the dynamic program will correspond
to exhaustive dynamic programming.
We can again run a Lagrangian relaxation algorithm, using the set YC in place of Y . We will use
Lagrange multipliers u(i) to enforce the constraints
y(i) = 1 for i ∈ C. Our goal will be to ﬁnd a
/
small set of constraints C, such that Lagrangian re-

laxation will successfully recover an optimal solution. We will do this by incrementally adding elements to C; that is, by incrementally adding constraints that tighten the relaxation.
The intuition behind our approach is as follows.
Say we run the original algorithm, with the set Y ,
for several iterations, so that L(u) is close to convergence (i.e., L(u) is close to its minimal value).
However, assume that we have not yet generated a
solution y t such that y t (i) = 1 for all i. In this case
we have some evidence that the relaxation may not
be tight, and that we need to add some constraints.
The question is, which constraints to add? To answer this question, we run the subgradient algorithm
for K more iterations (e.g., K = 10), and at each iteration track which constraints of the form y(i) = 1
are violated. We then choose C to be the G constraints (e.g., G = 3) that are violated most often
during the K additional iterations, and are not adjacent to each other. We recursively call the algorithm, replacing Y by YC ; the recursive call may
then return an exact solution, or alternatively again
add more constraints and make a recursive call.4
Figure 3 depicts the resulting algorithm. We initially make a call to the algorithm Optimize(C, u)
with C equal to the empty set (i.e., no hard constraints), and with u(i) = 0 for all i. In an initial
phase the algorithm runs subgradient steps, while
the dual is still improving. In a second step, if a solution has not been found, the algorithm runs for K
more iterations, thereby choosing G additional constraints, then recursing.
If at any stage the algorithm ﬁnds a solution y ∗
such that y ∗ (i) = 1 for all i, then this is the solution to our original problem, arg maxy∈Y f (y).
This follows because for any C ⊆ {1 . . . N } we
have Y ⊆ YC ; hence the theorems in section 4.3 go
through for YC in place of Y , with trivial modiﬁcations. Note also that the algorithm is guaranteed to
eventually ﬁnd the optimal solution, because eventually C = {1 . . . N }, and Y = YC .
4

Formal justiﬁcation for the method comes from the relationship between Lagrangian relaxation and linear programming relaxations. In cases where the relaxation is not tight,
the subgradient method will essentially move between solutions whose convex combination form a fractional solution to
an underlying LP relaxation (Nedi´ and Ozdaglar, 2009). Our
c
method eliminates the fractional solution through the introduction of hard constraints.

# iter.
0-7
8-15
16-30
31-60
61-120
121-250
x

1-10 words
11-20 words
21-30 words
31-40 words 41-50 words
166 (89.7 %) 219 (39.2 %) 34 ( 6.0 %)
2 ( 0.6 %) 0 ( 0.0 %)
17 ( 9.2 %) 187 (33.5 %) 161 (28.4 %) 30 ( 8.6 %) 3 ( 1.8 %)
1 ( 0.5 %) 93 (16.7 %) 208 (36.7 %) 112 (32.3 %) 22 ( 13.1 %)
1 ( 0.5 %) 52 ( 9.3 %) 105 (18.6 %) 99 (28.5 %) 62 ( 36.9 %)
0 ( 0.0 %)
7 ( 1.3 %) 54 ( 9.5 %) 89 (25.6 %) 45 ( 26.8 %)
0 ( 0.0 %)
0 ( 0.0 %)
4 ( 0.7 %) 14 ( 4.0 %) 31 ( 18.5 %)
0 ( 0.0 %)
0 ( 0.0 %)
0 ( 0.0 %)
1 ( 0.3 %) 5 ( 3.0 %)

421
398
436
319
195
49
6

All sentences
(23.1 %) 23.1 %
(21.8 %) 44.9 %
(23.9 %) 68.8 %
(17.5 %) 86.3 %
(10.7 %) 97.0 %
( 2.7 %) 99.7 %
( 0.3 %) 100.0 %

Table 1: Table showing the number of iterations taken for the algorithm to converge. x indicates sentences that fail to
converge after 250 iterations. 97% of the examples converge within 120 iterations.
# cons.
0-0
1-3
4-6
7-9
x

1-10 words
11-20 words
21-30 words
31-40 words 41-50 words
All sentences
183 (98.9 %) 511 (91.6 %) 438 (77.4 %) 222 (64.0 %) 82 ( 48.8 %) 1,436 (78.7 %) 78.7 %
2 ( 1.1 %) 45 ( 8.1 %) 94 (16.6 %) 87 (25.1 %) 50 ( 29.8 %)
278 (15.2 %) 94.0 %
0 ( 0.0 %)
2 ( 0.4 %) 27 ( 4.8 %) 24 ( 6.9 %) 19 ( 11.3 %)
72 ( 3.9 %) 97.9 %
0 ( 0.0 %)
0 ( 0.0 %)
7 ( 1.2 %) 13 ( 3.7 %) 12 ( 7.1 %)
32 ( 1.8 %) 99.7 %
0 ( 0.0 %)
0 ( 0.0 %)
0 ( 0.0 %)
1 ( 0.3 %) 5 ( 3.0 %)
6 ( 0.3 %) 100.0 %

Table 2: Table showing the number of constraints added before convergence of the algorithm in Figure 3, broken down by sentence
length. Note that a maximum of 3 constraints are added at each recursive call, but that fewer than 3 constraints are added in cases
where fewer than 3 constraints have count(i) > 0. x indicates the sentences that fail to converge after 250 iterations. 78.7% of the
examples converge without adding any constraints.

The remaining question concerns the “dual still
improving” condition; i.e., how to determine that the
ﬁrst phase of the algorithm should terminate. We do
this by recording the ﬁrst and second best dual values L(u ) and L(u ) in the sequence of Lagrange
multipliers u1 , u2 , . . . generated by the algorithm.
Suppose that L(u ) ﬁrst occurs at iteration t . If
L(u )−L(u )
< , we say that the dual value does not
t−t
decrease enough. The value for is a parameter of
the approach: in experiments we used = 0.002.
See the supplementary material for this submission for an example run of the algorithm.
When C = ∅, A* search can be used for decoding, with the dynamic program for Y providing admissible estimates for the dynamic program
for YC . Experiments show that A* gives signiﬁcant
improvements in efﬁciency. The supplementary material contains a full description of the A* algorithm.

6

Experiments

In this section, we present experimental results to
demonstrate the efﬁciency of the decoding algorithm. We compare to MOSES (Koehn et al., 2007),
a phrase-based decoder using beam search, and to
a general purpose integer linear programming (ILP)
solver, which solves the problem exactly.
The experiments focus on translation from German to English, using the Europarl data (Koehn,
2005). We tested on 1,824 sentences of length at

most 50 words. The experiments use the algorithm
shown in Figure 3. We limit the algorithm to a maximum of 250 iterations and a maximum of 9 hard
constraints. The distortion limit d is set to be four,
and we prune the phrase translation table to have 10
English phrases per German phrase.
Our method ﬁnds exact solutions on 1,818 out
of 1,824 sentences (99.67%). (6 examples do not
converge within 250 iterations.) Table 1 shows the
number of iterations required for convergence, and
Table 2 shows the number of constraints required
for convergence, broken down by sentence length.
In 1,436/1,818 (78.7%) sentences, the method converges without adding hard constraints to tighten the
relaxation. For sentences with 1-10 words, the vast
majority (183 out of 185 examples) converge with
0 constraints added. As sentences get longer, more
constraints are often required. However most examples converge with 9 or fewer constraints.
Table 3 shows the average times for decoding,
broken down by sentence length, and by the number
of constraints that are added. As expected, decoding times increase as the length of sentences, and
the number of constraints required, increase. The
average run time across all sentences is 120.9 seconds. Table 3 also shows the run time of the method
without the A* algorithm for decoding. The A* algorithm gives signiﬁcant reductions in runtime.

1-10 words
A*
w/o
0-0
0.8
0.8
1-3
2.4
2.9
4-6
0.0
0.0
7-9
0.0
0.0
mean
0.8
0.9
median 0.7
0.7
# cons.

11-20 words
A*
w/o
9.7
10.7
23.2
28.0
28.2
38.8
0.0
0.0
10.9
12.3
8.9
9.9

21-30 words
A* w/o
47.0 53.7
80.9 102.3
111.7 163.7
166.1 500.4
57.2 72.6
48.3 54.6

31-40 words
A*
w/o
153.6 178.6
277.4 360.8
309.5 575.2
361.0 1,467.6
203.4 299.2
169.7 202.6

41-50 words
A*
w/o
402.6 492.4
686.0 877.7
1,552.8 1,709.2
1,167.2 3,222.4
679.9 953.4
484.0 606.5

All sentences
A*
w/o
64.6
76.1
241.3 309.7
555.6 699.5
620.7 1,914.1
120.9 168.9
35.2
40.0

Table 3: The average time (in seconds) for decoding using the algorithm in Figure 3, with and without A* algorithm, broken down
by sentence length and the number of constraints that are added. A* indicates speeding up using A* search; w/o denotes without
using A*.
method
length
1-10
Y
11-15
16-20
Y
1-10
11-15
set

ILP
mean median
275.2 132.9
2,707.8 1,138.5
20,583.1 3,692.6
257.2 157.7
3607.3 1838.7

LP
mean median
10.9
4.4
177.4
66.1
1,374.6 637.0
18.4
8.9
476.8 161.1

% frac.
12.4 %
40.8 %
59.7 %
1.1 %
3.0 %

Table 4: Average and median time of the LP/ILP solver (in
seconds). % frac. indicates how often the LP gives a fractional
answer. Y indicates the dynamic program using set Y as deﬁned in Section 4.1, and Y indicates the dynamic program using states (w1 , w2 , n, r). The statistics for ILP for length 16-20
are based on 50 sentences.

6.1

Comparison to an LP/ILP solver

To compare to a linear programming (LP) or integer linear programming (ILP) solver, we can implement the dynamic program (search over the set
Y ) through linear constraints, with a linear objective. The y(i) = 1 constraints are also linear. Hence we can encode our relaxation within an
LP or ILP. Having done this, we tested the resulting LP or ILP using Gurobi, a high-performance
commercial grade solver. We also compare to
an LP or ILP where the dynamic program makes
use of states (w1 , w2 , n, r)—i.e., the span (l, m) is
dropped, making the dynamic program smaller. Table 4 shows the average time taken by the LP/ILP
solver. Both the LP and the ILP require very long
running times on these shorter sentences, and running times on longer sentences are prohibitive. Our
algorithm is more efﬁcient because it leverages the
structure of the problem, by directly using a combinatorial algorithm (dynamic programming).
6.2

Comparison to MOSES

We now describe comparisons to the phrase-based
decoder implemented in MOSES. MOSES uses

beam search to ﬁnd approximate solutions.
The distortion limit described in section 3 is the
same as that in Koehn et al. (2003), and is the same
as that described in the user manual for MOSES
(Koehn et al., 2007). However, a complicating factor for our comparisons is that MOSES uses an additional distortion constraint, not documented in the
manual, which we describe here.5 We call this constraint the gap constraint. We will show in experiments that without the gap constraint, MOSES fails
to produce translations on many examples. In our
experiments we will compare to MOSES both with
and without the gap constraint (in the latter case, we
discard examples where MOSES fails).
We now describe the gap constraint. For a sequence of phrases p1 , . . . , pk deﬁne θ(p1 . . . pk ) to
be the index of the left-most source-language word
not translated in this sequence. For example, if
the bit-string for p1 . . . pk is 111001101000, then
θ(p1 . . . pk ) = 4. A sequence of phrases p1 . . . pL
satisﬁes the gap constraint if and only if for k =
2 . . . L, |t(pk ) + 1 − θ(p1 . . . pk )| ≤ d, where d is
the distortion limit. We will call MOSES without
this restriction MOSES-nogc, and MOSES with this
restriction MOSES-gc.
Results for MOSES-nogc Table 5 shows the
number of examples where MOSES-nogc fails to
give a translation, and the number of search errors
for those cases where it does give a translation, for
a range of beam sizes. A search error is deﬁned as a
case where our algorithm produces an exact solution
that has higher score than the output from MOSESnogc. The number of search errors is signiﬁcant,
even for large beam sizes.
5

Personal communication from Philipp Koehn; see also the
software for MOSES.

Beam size
100
200
1000
10000

Fails
650/1,818
531/1,818
342/1,818
169/1,818

# search errors
214/1,168
207/1,287
115/1,476
68/1,649

percentage
18.32 %
16.08 %
7.79 %
4.12 %

Table 5: Table showing the number of examples where
MOSES-nogc fails to give a translation, and the number/percentage of search errors for cases where it does give a
translation.
Diff.
0.000 – 0.125
0.125 – 0.250
0.250 – 0.500
0.500 – 1.000
1.000 – 2.000
2.000 – 4.000
4.000 –13.000

MOSES-gc
s =100
66 (24.26%)
59 (21.69%)
65 (23.90%)
49 (18.01%)
31 (11.40%)
2 ( 0.74%)
0 ( 0.00%)

MOSES-gc
s =200
65 (24.07%)
58 (21.48%)
65 (24.07%)
49 (18.15%)
31 (11.48%)
2 ( 0.74%)
0 ( 0.00%)

MOSES-nogc
s=1000
32 ( 27.83%)
25 ( 21.74%)
25 ( 21.74%)
23 ( 20.00%)
5 ( 4.35%)
3 ( 2.61%)
2 ( 1.74%)

Table 6: Table showing statistics for the difference between the
translation score from MOSES, and from the optimal derivation, for those sentences where a search error is made. For
MOSES-gc we include cases where the translation produced by
our system is not reachable by MOSES-gc. The average score
of the optimal derivations is -23.4.

Results for MOSES-gc MOSES-gc uses the gap
constraint, and thus in some cases our decoder will
produce derivations which MOSES-gc cannot reach.
Among the 1,818 sentences where we produce a solution, there are 270 such derivations. For the remaining 1,548 sentences, MOSES-gc makes search
errors on 2 sentences (0.13%) when the beam size is
100, and no search errors when the beam size is 200,
1,000, or 10,000.
Table 6 shows statistics for the magnitude of
the search errors that MOSES-gc and MOSES-nogc
make.
BLEU Scores Finally, table 7 gives BLEU scores
(Papineni et al., 2002) for decoding using MOSES
and our method. The BLEU scores under the two
decoders are almost identical; hence while MOSES
makes a signiﬁcant proportion of search errors, these
search errors appear to be benign in terms of their
impact on BLEU scores, at least for this particular
translation model. Future work should investigate
why this is the case, and whether this applies to other
models and language pairs.

7

Conclusions

We have described an exact decoding algorithm for
phrase-based translation models, using Lagrangian

type of Moses
MOSES-gc

MOSES-nogc

beam size
100
200
1,000
10,000
100
200
1,000
10,000

# sents
1,818
1,818
1,818
1,818
1,168
1,287
1,476
1,649

Moses
24.4773
24.4765
24.4765
24.4765
27.3546
27.0591
26.5734
25.6531

our method
24.5395
24.5395
24.5395
24.5395
27.3249
26.9907
26.6128
25.6620

Table 7: BLEU score comparisons. We consider only
those sentences where both decoders produce a translation.

relaxation. The algorithmic construction we have
described may also be useful in other areas of NLP,
for example natural language generation. Possible extensions to the approach include methods that
incorporate the Lagrangian relaxation formulation
within learning algorithms for statistical MT: we see
this as an interesting avenue for future research.

A

Step Size

Similar to Koo et al. (2010), we set the step size at
the t’th iteration to be αt = 1/(1 + λt ), where λt is
the number of times that L(u(t ) ) > L(u(t −1) ) for
all t ≤ t. Thus the step size decreases each time the
dual value increases from one iteration to the next.
Acknowledgments Yin-Wen Chang and Michael
Collins were supported under the GALE program
of the Defense Advanced Research Projects Agency,
Contract No. HR0011-06-C-0022. Michael Collins
was also supported by NSF grant IIS-0915176.

References
Graeme Blackwood, Adri` de Gispert, Jamie Brunning,
a
and William Byrne. 2009. Large-scale statistical
machine translation with weighted ﬁnite state transducers. In Proceeding of the 2009 conference on
Finite-State Methods and Natural Language Processing: Post-proceedings of the 7th International Workshop FSMNLP 2008, pages 39–49, Amsterdam, The
Netherlands, The Netherlands. IOS Press.
Peter F. Brown, Vincent J. Della Pietra, Stephen A. Della
Pietra, and Robert L. Mercer. 1993. The mathematics
of statistical machine translation: Parameter estimation. Computational Linguistics, 19:263–311, June.
Ulrich Germann, Michael Jahr, Kevin Knight, Daniel
Marcu, and Kenji Yamada. 2001. Fast decoding and
optimal decoding for machine translation. In Proceed-

ings of the 39th Annual Meeting on Association for
Computational Linguistics, ACL ’01, pages 228–235.
Philipp Koehn, Franz Josef Och, and Daniel Marcu.
2003. Statistical phrase-based translation. In Proceedings of the 2003 Conference of the North American
Chapter of the Association for Computational Linguistics on Human Language Technology, NAACL ’03,
pages 48–54.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran, Richard
Zens, Chris Dyer, Ondˇej Bojar, Alexandra Conr
stantin, and Evan Herbst. 2007. Moses: Open source
toolkit for statistical machine translation. In Proceedings of the 45th Annual Meeting of the ACL on Interactive Poster and Demonstration Sessions, ACL ’07,
pages 177–180.
Philipp Koehn. 2005. Europarl: A parallel corpus for
statistical machine translation. In Proceedings of the
MT Summit.
Nikos Komodakis, Nikos Paragios, and Georgios Tziritas. 2007. MRF optimization via dual decomposition:
Message-passing revisited. In Proceedings of the 11th
International Conference on Computer Vision.
Terry Koo, Alexander M. Rush, Michael Collins, Tommi
Jaakkola, and David Sontag. 2010. Dual decomposition for parsing with non-projective head automata.
In Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages
1288–1298, Cambridge, MA, October. Association for
Computational Linguistics.
Bernhard Korte and Jens Vygen. 2008. Combinatorial
Optimization: Theory and Application. Springer Verlag.
Shankar Kumar and William Byrne. 2005. Local phrase
reordering models for statistical machine translation.
In Proceedings of the conference on Human Language
Technology and Empirical Methods in Natural Language Processing, HLT ’05, pages 161–168.
Claude Lemar´ chal. 2001. Lagrangian Relaxation.
e
In Computational Combinatorial Optimization, Optimal or Provably Near-Optimal Solutions [based
on a Spring School], pages 112–156, London, UK.
Springer-Verlag.
Angelia Nedi´ and Asuman Ozdaglar. 2009. Approxic
mate primal solutions and rate analysis for dual subgradient methods. SIAM Journal on Optimization,
19(4):1757–1780.
Franz Josef Och, Christoph Tillmann, Hermann Ney, and
Lehrstuhl Fiir Informatik. 1999. Improved alignment
models for statistical machine translation. In Proceedings of the Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very
Large Corpora, pages 20–28.

Franz Josef Och, Nicola Uefﬁng, and Hermann Ney.
2001. An efﬁcient A* search algorithm for statistical machine translation. In Proceedings of the workshop on Data-driven methods in machine translation Volume 14, DMMT ’01, pages 1–8, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Franz Josef Och. 2003. Minimum error rate training
in statistical machine translation. In Proceedings of
the 41st Annual Meeting on Association for Computational Linguistics, ACL ’03, pages 160–167.
Kishore Papineni, Salim Roukos, Todd Ward, and
Wei Jing Zhu. 2002. Bleu: a method for automatic
evaluation of machine translation. In Proceedings of
ACL 2002.
Sebastian Riedel and James Clarke. 2006. Incremental
integer linear programming for non-projective dependency parsing. In Proceedings of the 2006 Conference
on Empirical Methods in Natural Language Processing, EMNLP ’06, pages 129–137, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Sebastian Riedel and James Clarke. 2009. Revisiting
optimal decoding for machine translation IBM model
4. In Proceedings of Human Language Technologies:
The 2009 Annual Conference of the North American
Chapter of the Association for Computational Linguistics, Companion Volume: Short Papers, NAACLShort ’09, pages 5–8, Stroudsburg, PA, USA. Association for Computational Linguistics.
Alexander M. Rush and Michael Collins. 2011. Exact
decoding of syntactic translation models through Lagrangian relaxation. In Proceedings of ACL.
Alexander M Rush, David Sontag, Michael Collins, and
Tommi Jaakkola. 2010. On dual decomposition and
linear programming relaxations for natural language
processing. In Proceedings of the 2010 Conference on
Empirical Methods in Natural Language Processing,
pages 1–11, Cambridge, MA, October. Association for
Computational Linguistics.
David A. Smith and Jason Eisner. 2008. Dependency
parsing by belief propagation. In Proceedings of the
Conference on Empirical Methods in Natural Language Processing, EMNLP ’08, pages 145–156.
David Sontag, Talya Meltzer, Amir Globerson, Tommi
Jaakkola, and Yair Weiss. 2008. Tightening LP relaxations for MAP using message passing. In Proceedings of the 24th Conference on Uncertainty in Artiﬁcial Intelligence, pages 503–510.
Christoph Tillmann and Hermann Ney. 2003. Word reordering and a dynamic programming beam search algorithm for statistical machine translation. Computational Linguistics, 29:97–133, March.
Christoph Tillmann. 2006. Efﬁcient dynamic programming search algorithms for phrase-based SMT.

In Proceedings of the Workshop on Computationally
Hard Problems and Joint Inference in Speech and Language Processing, CHSLP ’06, pages 9–16.
Roy W. Tromble and Jason Eisner. 2006. A fast
ﬁnite-state relaxation method for enforcing global constraints on sequence decoding. In Proceedings of
the main conference on Human Language Technology
Conference of the North American Chapter of the Association of Computational Linguistics, HLT-NAACL
’06, pages 423–430, Stroudsburg, PA, USA. Association for Computational Linguistics.
Martin Wainwright, Tommi Jaakkola, and Alan Willsky. 2005. MAP estimation via agreement on
trees: Message-passing and linear programming. In
IEEE Transactions on Information Theory, volume 51,
pages 3697–3717.
Mikhail Zaslavskiy, Marc Dymetman, and Nicola Cancedda. 2009. Phrase-based statistical machine translation as a traveling salesman problem. In Proceedings
of the Joint Conference of the 47th Annual Meeting of
the ACL and the 4th International Joint Conference on
Natural Language Processing of the AFNLP: Volume
1 - Volume 1, ACL ’09, pages 333–341, Stroudsburg,
PA, USA. Association for Computational Linguistics.

