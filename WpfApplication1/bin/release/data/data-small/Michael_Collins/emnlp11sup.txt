Exact Decoding of Phrase-Based Translation Models
through Lagrangian Relaxation: Supplementary Material
Yin-Wen Chang
MIT CSAIL
Cambridge, MA 02139, USA
yinwen@csail.mit.edu

A

An Example Run of the Algorithm in
Figure 3

Figure 1 gives an example run of the algorithm. After 31 iterations the algorithm detects that the dual
is no longer decreasing rapidly enough, and runs
for K = 10 additional iterations, tracking which
constraints are violated. Constraints y(6) = 1 and
y(10) = 1 are each violated 10 times, while other
constraints are not violated. A recursive call to the
algorithm is made with C = {6, 10}, and the algorithm converges in a single iteration, to a solution
that is guaranteed to be optimal.

B

Speeding up the DP: A* Search

In the algorithm depicted in Figure 3, each time we
call Optimize(C ∪ C , u), we expand the number of
states in the dynamic program by adding hard constraints. On the graph level, adding hard constraints
can be viewed as expanding an original state in Y
to 2|C| states in YC , since now we keep a bit-string
bC of length |C| in the states to record which words
in C have or haven’t been translated. We now show
how this observation leads to an A* algorithm that
can signiﬁcantly improve efﬁciency when decoding
with C = ∅.
For any state s = (w1 , w2 , n, l, m, r, bC ) and Lagrange multiplier values u ∈ RN , deﬁne βC (s, u) to
be the maximum score for any path from the state
s to the end state, under Lagrange multipliers u,
in the graph created using constraint set C. Deﬁne
π(s) = (w1 , w2 , n, l, m, r), that is, the corresponding state in the graph with no constraints (C = ∅).
Then for any values of s and u, we have
βC (s, u) ≤ β∅ (π(s), u)

Michael Collins
Department of Computer Science,
Columbia University,
New York, NY 10027, USA
mcollins@cs.columbia.edu
That is, the maximum score for any path to the end
state in the graph with no constraints, forms an upper
bound on the value for βC (s, u).
This observation leads directly to an A* algorithm, which is exact in ﬁnding the optimum solution, since we can use β∅ (π(s), u) as the admissible estimates for the score from state s to the goal
(the end state). The β∅ (s , u) values for all s can be
calculated by running the Viterbi algorithm using a
backwards path. With only 1/2|C| states, calculating
β∅ (s , u) is much cheaper than calculating βC (s, u)
directly. Guided by β∅ (s , u), βC (s, u) can be calculated efﬁciently by using A* search.
Using the A* algorithm leads to signiﬁcant
improvements in efﬁciency when constraints are
added. Section 6 presents comparison of the running
time with and without A* algorithm.

Input German: es bleibt jedoch dabei , dass kolumbien ein land ist , das aufmerksam beobachtet werden muss .
t L(ut−1 )
1
2

32
33
34
35
36
37
38
39
40
41

y t (i)

t
˛
˛
˛
˛
˛
˛
˛
˛ derivation y ˛
˛
˛
˛
˛5, 6 ˛10, 10 ˛ 8, 9
˛6, 6 ˛10, 10 ˛ 8, 9
˛6, 6 ˛10, 10 ˛8, 8 ˛ 9, 12
˛17, 17˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
-11.8658 0 0 0 0 1 3 0 3 3 4 1 1 0 0 0 0 1 ˛
˛a country ˛ that ˛ is
˛a country ˛ that ˛ is
˛ a ˛country that ˛ . ˛
that ˛ is
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛ 3, 3
˛1, 1 ˛
˛5, 5 ˛ 3, 3
˛1, 1 ˛
˛5, 5 ˛ 7, 7
˛11, 11 ˛16, 16
2, 3
2, 3
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
-5.46647 2 2 4 0 2 0 1 0 0 0 1 0 1 1 1 1 1 ˛
˛however , ˛ it ˛is , however ˛ , ˛however , ˛ it ˛is , however ˛ , ˛colombia ˛ ,
˛ must
.
.
.
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛ 7, 7
˛10, 10 ˛8, 8 ˛ 9, 12
˛16, 16 ˛
˛17, 17˛
1, 5
13, 15
˛
˛
˛
˛
˛
˛
˛
˛
-17.0203 1 1 1 1 1 0 1 1 1 2 1 1 1 1 1 1 1 ˛
˛nonetheless , ˛colombia ˛ is
˛ a ˛country that ˛ must ˛be closely monitored ˛ . ˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛6, 6 ˛ 8, 9
˛6, 6 ˛ 7, 7
˛ 11, 12 ˛16, 16 ˛
˛17, 17˛
1, 5
13, 15
˛
˛
˛
˛
˛
˛
˛
˛
˛
-17.1727 1 1 1 1 1 2 1 1 1 0 1 1 1 1 1 1 1 ˛
˛nonetheless , ˛ that ˛a country ˛ that ˛colombia ˛, which ˛ must ˛be closely monitored ˛ . ˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛ 7, 7
˛10, 10 ˛8, 8 ˛ 9, 12
˛16, 16 ˛
˛17, 17˛
1, 5
13, 15
˛
˛
˛
˛
˛
˛
˛
˛
-17.0203 1 1 1 1 1 0 1 1 1 2 1 1 1 1 1 1 1 ˛
˛nonetheless , ˛colombia ˛ is
˛ a ˛country that ˛ must ˛be closely monitored ˛ . ˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
1, 5
13, 15
˛
˛ 7, 7
˛10, 10 ˛8, 8 ˛ 9, 12
˛16, 16 ˛
˛17, 17˛
-17.1631 1 1 1 1 1 0 1 1 1 2 1 1 1 1 1 1 1 ˛
˛ a ˛country that ˛ must ˛be closely monitored ˛ . ˛
nonetheless , ˛colombia ˛ is
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
1, 5
13, 15
˛
˛6, 6 ˛ 8, 9
˛6, 6 ˛ 7, 7
˛ 11, 12 ˛16, 16 ˛
˛17, 17˛
-17.0408 1 1 1 1 1 2 1 1 1 0 1 1 1 1 1 1 1 ˛
nonetheless , ˛ that ˛a country ˛ that ˛colombia ˛, which ˛ must ˛be closely monitored ˛ . ˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛ 7, 7
˛10, 10 ˛8, 8 ˛ 9, 12
˛16, 16 ˛
˛17, 17˛
1, 5
13, 15
˛
˛
˛
˛
˛
˛
˛
˛
-17.1727 1 1 1 1 1 0 1 1 1 2 1 1 1 1 1 1 1 ˛
˛nonetheless , ˛colombia ˛ is
˛ a ˛country that ˛ must ˛be closely monitored ˛ . ˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛6, 6 ˛ 8, 9
˛6, 6 ˛ 7, 7
˛ 11, 12 ˛16, 16 ˛
˛17, 17˛
1, 5
13, 15
˛
˛
˛
˛
˛
˛
˛
˛
˛
-17.0408 1 1 1 1 1 2 1 1 1 0 1 1 1 1 1 1 1 ˛
˛nonetheless , ˛ that ˛a country ˛ that ˛colombia ˛, which ˛ must ˛be closely monitored ˛ . ˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛6, 6 ˛ 8, 9
˛6, 6 ˛ 7, 7
˛ 11, 12 ˛16, 16 ˛
˛17, 17˛
1, 5
13, 15
˛
˛
˛
˛
˛
˛
˛
˛
˛
-17.1658 1 1 1 1 1 2 1 1 1 0 1 1 1 1 1 1 1 ˛
˛nonetheless , ˛ that ˛a country ˛ that ˛colombia ˛, which ˛ must ˛be closely monitored ˛ . ˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛ 7, 7
˛10, 10 ˛8, 8 ˛ 9, 12
˛16, 16 ˛
˛17, 17˛
1, 5
13, 15
˛
˛
˛
˛
˛
˛
˛
˛
-17.056 1 1 1 1 1 0 1 1 1 2 1 1 1 1 1 1 1 ˛
˛nonetheless , ˛colombia ˛ is
˛ a ˛country that ˛ must ˛be closely monitored ˛ . ˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛6, 6 ˛ 8, 9
˛6, 6 ˛ 7, 7
˛ 11, 12 ˛16, 16 ˛
˛17, 17˛
1, 5
13, 15
˛
˛
˛
˛
˛
˛
˛
˛
˛
-17.1732 1 1 1 1 1 2 1 1 1 0 1 1 1 1 1 1 1 ˛
˛nonetheless , ˛ that ˛a country ˛ that ˛colombia ˛, which ˛ must ˛be closely monitored ˛ . ˛

˛
˛
˛
˛
˛17, 17˛
13, 15
˛
˛
˛
˛be closely monitored ˛ . ˛

count(6) = 10; count(10) = 10; count(i) = 0 for all other i
adding constraints: 6 10
˛
˛
˛
˛
˛
˛
˛
˛
˛
˛ 7, 7
˛6, 6 ˛
˛16, 16 ˛
˛17, 17˛
1, 5
8, 12
13, 15
˛
˛
˛
˛
˛
˛
˛
-17.229 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ˛
˛nonetheless , ˛colombia ˛ that ˛a country that ˛ must ˛be closely monitored ˛ . ˛
00000•000•0000000

42

Figure 1: An example run of the algorithm in Figure 3. At iteration 32, we start the K = 10 iterations to count
which constraints are violated most often. After K iterations, the count for 6 and 10 is 10, and all other constraints
have not been violated during the K iterations. Thus, hard constraints for word 6 and 10 are added. After adding the
constraints, we have y t (i) = 1 for i = 1 . . . N , and the translation is returned, with a guarantee that it is optimal.

